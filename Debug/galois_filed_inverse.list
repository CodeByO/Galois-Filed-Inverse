
galois_filed_inverse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08007b80  08007b80  00017b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080bc  080080bc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  080080bc  080080bc  000180bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080c4  080080c4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080c4  080080c4  000180c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080c8  080080c8  000180c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080080cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          0000005c  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000250  20000250  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000055be  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000154a  00000000  00000000  000257e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000638  00000000  00000000  00026d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000570  00000000  00000000  00027368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211da  00000000  00000000  000278d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006e8a  00000000  00000000  00048ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1f3b  00000000  00000000  0004f93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00111877  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c5c  00000000  00000000  001118c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b68 	.word	0x08007b68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	08007b68 	.word	0x08007b68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <LCD1602_EnablePulse>:

//***** Functions definitions *****//
//Private functions
//1) Enable EN pulse
static void LCD1602_EnablePulse(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <LCD1602_EnablePulse+0x38>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <LCD1602_EnablePulse+0x3c>)
 8001002:	8811      	ldrh	r1, [r2, #0]
 8001004:	2201      	movs	r2, #1
 8001006:	4618      	mov	r0, r3
 8001008:	f001 fc62 	bl	80028d0 <HAL_GPIO_WritePin>
    LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 800100c:	230a      	movs	r3, #10
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f97a 	bl	8001308 <LCD1602_TIM_MicorSecDelay>
    HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <LCD1602_EnablePulse+0x38>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a06      	ldr	r2, [pc, #24]	; (8001034 <LCD1602_EnablePulse+0x3c>)
 800101a:	8811      	ldrh	r1, [r2, #0]
 800101c:	2200      	movs	r2, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f001 fc56 	bl	80028d0 <HAL_GPIO_WritePin>
    LCD1602_TIM_MicorSecDelay(60);
 8001024:	203c      	movs	r0, #60	; 0x3c
 8001026:	f000 f96f 	bl	8001308 <LCD1602_TIM_MicorSecDelay>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000210 	.word	0x20000210
 8001034:	20000216 	.word	0x20000216

08001038 <LCD1602_RS>:
//2) RS control
static void LCD1602_RS(bool state)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
    if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d008      	beq.n	800105a <LCD1602_RS+0x22>
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <LCD1602_RS+0x3c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <LCD1602_RS+0x40>)
 800104e:	8811      	ldrh	r1, [r2, #0]
 8001050:	2201      	movs	r2, #1
 8001052:	4618      	mov	r0, r3
 8001054:	f001 fc3c 	bl	80028d0 <HAL_GPIO_WritePin>
    else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 8001058:	e007      	b.n	800106a <LCD1602_RS+0x32>
    else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <LCD1602_RS+0x3c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a06      	ldr	r2, [pc, #24]	; (8001078 <LCD1602_RS+0x40>)
 8001060:	8811      	ldrh	r1, [r2, #0]
 8001062:	2200      	movs	r2, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f001 fc33 	bl	80028d0 <HAL_GPIO_WritePin>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000210 	.word	0x20000210
 8001078:	20000214 	.word	0x20000214

0800107c <LCD1602_write>:

//3) Write Parallel interface
static void LCD1602_write(uint8_t byte)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
    uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 030f 	and.w	r3, r3, #15
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	091b      	lsrs	r3, r3, #4
 8001092:	73bb      	strb	r3, [r7, #14]

    if(mode_8_4_I2C == 1)       //8bits mode
 8001094:	4b61      	ldr	r3, [pc, #388]	; (800121c <LCD1602_write+0x1a0>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d15a      	bne.n	8001152 <LCD1602_write+0xd6>
    {
        //write data to output pins
        //LSB data
        HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800109c:	4b60      	ldr	r3, [pc, #384]	; (8001220 <LCD1602_write+0x1a4>)
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	4b60      	ldr	r3, [pc, #384]	; (8001224 <LCD1602_write+0x1a8>)
 80010a2:	8819      	ldrh	r1, [r3, #0]
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	461a      	mov	r2, r3
 80010ae:	f001 fc0f 	bl	80028d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80010b2:	4b5b      	ldr	r3, [pc, #364]	; (8001220 <LCD1602_write+0x1a4>)
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	4b5c      	ldr	r3, [pc, #368]	; (8001228 <LCD1602_write+0x1ac>)
 80010b8:	8819      	ldrh	r1, [r3, #0]
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	f001 fc04 	bl	80028d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80010c8:	4b55      	ldr	r3, [pc, #340]	; (8001220 <LCD1602_write+0x1a4>)
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	4b57      	ldr	r3, [pc, #348]	; (800122c <LCD1602_write+0x1b0>)
 80010ce:	8819      	ldrh	r1, [r3, #0]
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	f001 fbf9 	bl	80028d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80010de:	4b50      	ldr	r3, [pc, #320]	; (8001220 <LCD1602_write+0x1a4>)
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	4b53      	ldr	r3, [pc, #332]	; (8001230 <LCD1602_write+0x1b4>)
 80010e4:	8819      	ldrh	r1, [r3, #0]
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	461a      	mov	r2, r3
 80010f0:	f001 fbee 	bl	80028d0 <HAL_GPIO_WritePin>
        //MSB data
        HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80010f4:	4b4f      	ldr	r3, [pc, #316]	; (8001234 <LCD1602_write+0x1b8>)
 80010f6:	6818      	ldr	r0, [r3, #0]
 80010f8:	4b4f      	ldr	r3, [pc, #316]	; (8001238 <LCD1602_write+0x1bc>)
 80010fa:	8819      	ldrh	r1, [r3, #0]
 80010fc:	7bbb      	ldrb	r3, [r7, #14]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	f001 fbe3 	bl	80028d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 800110a:	4b4a      	ldr	r3, [pc, #296]	; (8001234 <LCD1602_write+0x1b8>)
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	4b4b      	ldr	r3, [pc, #300]	; (800123c <LCD1602_write+0x1c0>)
 8001110:	8819      	ldrh	r1, [r3, #0]
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	f001 fbd8 	bl	80028d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001120:	4b44      	ldr	r3, [pc, #272]	; (8001234 <LCD1602_write+0x1b8>)
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	4b46      	ldr	r3, [pc, #280]	; (8001240 <LCD1602_write+0x1c4>)
 8001126:	8819      	ldrh	r1, [r3, #0]
 8001128:	7bbb      	ldrb	r3, [r7, #14]
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	b2db      	uxtb	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	f001 fbcd 	bl	80028d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001136:	4b3f      	ldr	r3, [pc, #252]	; (8001234 <LCD1602_write+0x1b8>)
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	4b42      	ldr	r3, [pc, #264]	; (8001244 <LCD1602_write+0x1c8>)
 800113c:	8819      	ldrh	r1, [r3, #0]
 800113e:	7bbb      	ldrb	r3, [r7, #14]
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	b2db      	uxtb	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	f001 fbc2 	bl	80028d0 <HAL_GPIO_WritePin>
        //Write the Enable pulse
        LCD1602_EnablePulse();
 800114c:	f7ff ff54 	bl	8000ff8 <LCD1602_EnablePulse>
        HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
        HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
        //Write the Enable pulse
        LCD1602_EnablePulse();
    }
}
 8001150:	e05f      	b.n	8001212 <LCD1602_write+0x196>
    else if(mode_8_4_I2C == 2)  //4 bits mode
 8001152:	4b32      	ldr	r3, [pc, #200]	; (800121c <LCD1602_write+0x1a0>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d15b      	bne.n	8001212 <LCD1602_write+0x196>
        HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800115a:	4b36      	ldr	r3, [pc, #216]	; (8001234 <LCD1602_write+0x1b8>)
 800115c:	6818      	ldr	r0, [r3, #0]
 800115e:	4b36      	ldr	r3, [pc, #216]	; (8001238 <LCD1602_write+0x1bc>)
 8001160:	8819      	ldrh	r1, [r3, #0]
 8001162:	7bbb      	ldrb	r3, [r7, #14]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	f001 fbb0 	bl	80028d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <LCD1602_write+0x1b8>)
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	4b31      	ldr	r3, [pc, #196]	; (800123c <LCD1602_write+0x1c0>)
 8001176:	8819      	ldrh	r1, [r3, #0]
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	f001 fba5 	bl	80028d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <LCD1602_write+0x1b8>)
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <LCD1602_write+0x1c4>)
 800118c:	8819      	ldrh	r1, [r3, #0]
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	b2db      	uxtb	r3, r3
 8001196:	461a      	mov	r2, r3
 8001198:	f001 fb9a 	bl	80028d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <LCD1602_write+0x1b8>)
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	4b28      	ldr	r3, [pc, #160]	; (8001244 <LCD1602_write+0x1c8>)
 80011a2:	8819      	ldrh	r1, [r3, #0]
 80011a4:	7bbb      	ldrb	r3, [r7, #14]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	f001 fb8f 	bl	80028d0 <HAL_GPIO_WritePin>
        LCD1602_EnablePulse();
 80011b2:	f7ff ff21 	bl	8000ff8 <LCD1602_EnablePulse>
        HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <LCD1602_write+0x1b8>)
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <LCD1602_write+0x1bc>)
 80011bc:	8819      	ldrh	r1, [r3, #0]
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	f001 fb82 	bl	80028d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <LCD1602_write+0x1b8>)
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <LCD1602_write+0x1c0>)
 80011d2:	8819      	ldrh	r1, [r3, #0]
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	f001 fb77 	bl	80028d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <LCD1602_write+0x1b8>)
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <LCD1602_write+0x1c4>)
 80011e8:	8819      	ldrh	r1, [r3, #0]
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	f001 fb6c 	bl	80028d0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <LCD1602_write+0x1b8>)
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <LCD1602_write+0x1c8>)
 80011fe:	8819      	ldrh	r1, [r3, #0]
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	b2db      	uxtb	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	f001 fb61 	bl	80028d0 <HAL_GPIO_WritePin>
        LCD1602_EnablePulse();
 800120e:	f7ff fef3 	bl	8000ff8 <LCD1602_EnablePulse>
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000000 	.word	0x20000000
 8001220:	20000218 	.word	0x20000218
 8001224:	2000021c 	.word	0x2000021c
 8001228:	2000021e 	.word	0x2000021e
 800122c:	20000220 	.word	0x20000220
 8001230:	20000222 	.word	0x20000222
 8001234:	20000224 	.word	0x20000224
 8001238:	20000228 	.word	0x20000228
 800123c:	2000022a 	.word	0x2000022a
 8001240:	2000022c 	.word	0x2000022c
 8001244:	2000022e 	.word	0x2000022e

08001248 <LCD1602_TIM_Config>:
//4) Microsecond delay functions
static void LCD1602_TIM_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
    RCC_ClkInitTypeDef myCLKtypeDef;
    uint32_t clockSpeed;
    uint32_t flashLatencyVar;
    HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 800124e:	1d3a      	adds	r2, r7, #4
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f001 ffb0 	bl	80031bc <HAL_RCC_GetClockConfig>
    if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d103      	bne.n	800126a <LCD1602_TIM_Config+0x22>
    {
        clockSpeed = HAL_RCC_GetPCLK1Freq();
 8001262:	f001 ff97 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 8001266:	61f8      	str	r0, [r7, #28]
 8001268:	e004      	b.n	8001274 <LCD1602_TIM_Config+0x2c>
    }
    else
    {
        clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 800126a:	f001 ff93 	bl	8003194 <HAL_RCC_GetPCLK1Freq>
 800126e:	4603      	mov	r3, r0
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	61fb      	str	r3, [r7, #28]
    }
    clockSpeed *= 0.000001;
 8001274:	69f8      	ldr	r0, [r7, #28]
 8001276:	f7ff f945 	bl	8000504 <__aeabi_ui2d>
 800127a:	a321      	add	r3, pc, #132	; (adr r3, 8001300 <LCD1602_TIM_Config+0xb8>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7ff f9ba 	bl	80005f8 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fc8c 	bl	8000ba8 <__aeabi_d2uiz>
 8001290:	4603      	mov	r3, r0
 8001292:	61fb      	str	r3, [r7, #28]

    //Enable clock for TIM2 timer
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <LCD1602_TIM_Config+0xb0>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <LCD1602_TIM_Config+0xb0>)
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	6413      	str	r3, [r2, #64]	; 0x40
    //Set the mode to Count up
    TIM3->CR1 &= ~(0x0010);
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a15      	ldr	r2, [pc, #84]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012a6:	f023 0310 	bic.w	r3, r3, #16
 80012aa:	6013      	str	r3, [r2, #0]
    //Enable Update Event
    TIM3->CR1 &= ~(0x0001);
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	6013      	str	r3, [r2, #0]
    //Update request source
    TIM3->CR1 &= ~(1UL << 2);
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012be:	f023 0304 	bic.w	r3, r3, #4
 80012c2:	6013      	str	r3, [r2, #0]
    // Set bit 3 High to enable One-Pulse mode
    TIM3->CR1 |= (1UL << 3);
 80012c4:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012ca:	f043 0308 	orr.w	r3, r3, #8
 80012ce:	6013      	str	r3, [r2, #0]
    //Set the Prescalar
    TIM3->PSC = clockSpeed-1;
 80012d0:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	6293      	str	r3, [r2, #40]	; 0x28
    //Set and Auto-Reload Value to delay the timer 1 sec
    TIM3->ARR = 10-1;                               // The Flag sets when overflows
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012da:	2209      	movs	r2, #9
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c
    //Event generation handling to reset the counter
    TIM3->EGR = 1;                  //Update generate auto
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	615a      	str	r2, [r3, #20]
    TIM3->SR &= ~(0x0001);  //Clear Update interrupt flag
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <LCD1602_TIM_Config+0xb4>)
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	6113      	str	r3, [r2, #16]
}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40000400 	.word	0x40000400
 8001300:	a0b5ed8d 	.word	0xa0b5ed8d
 8001304:	3eb0c6f7 	.word	0x3eb0c6f7

08001308 <LCD1602_TIM_MicorSecDelay>:
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    TIM3->ARR = uSecDelay-1;
 8001310:	4a0e      	ldr	r2, [pc, #56]	; (800134c <LCD1602_TIM_MicorSecDelay+0x44>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3b01      	subs	r3, #1
 8001316:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM3->SR &= ~(0x0001);  // Clear UEV flag
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <LCD1602_TIM_MicorSecDelay+0x44>)
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	4a0b      	ldr	r2, [pc, #44]	; (800134c <LCD1602_TIM_MicorSecDelay+0x44>)
 800131e:	f023 0301 	bic.w	r3, r3, #1
 8001322:	6113      	str	r3, [r2, #16]
    TIM3->CR1 |= 1UL;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <LCD1602_TIM_MicorSecDelay+0x44>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a08      	ldr	r2, [pc, #32]	; (800134c <LCD1602_TIM_MicorSecDelay+0x44>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]
    while((TIM3->SR&0x0001) != 1);
 8001330:	bf00      	nop
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <LCD1602_TIM_MicorSecDelay+0x44>)
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b01      	cmp	r3, #1
 800133c:	d1f9      	bne.n	8001332 <LCD1602_TIM_MicorSecDelay+0x2a>
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40000400 	.word	0x40000400

08001350 <LCD1602_writeCommand>:
//5) Write command
static void LCD1602_writeCommand(uint8_t command)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
    //Set RS to 0
    LCD1602_RS(false);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fe6c 	bl	8001038 <LCD1602_RS>
    //Call low level write parallel function
    LCD1602_write(command);
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fe8a 	bl	800107c <LCD1602_write>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <LCD1602_writeData>:
//6) Write 8 bits data
static void LCD1602_writeData(uint8_t data)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
    //Set RS to 1
    LCD1602_RS(true);
 800137a:	2001      	movs	r0, #1
 800137c:	f7ff fe5c 	bl	8001038 <LCD1602_RS>
    //Call low level write parallel function
    LCD1602_write(data);
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fe7a 	bl	800107c <LCD1602_write>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <LCD1602_Begin8BIT>:
}

//Public functions
//1) LCD begin 8 bits function
void LCD1602_Begin8BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_LSBs0to3, uint16_t D0, uint16_t D1, uint16_t D2, uint16_t D3, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	460b      	mov	r3, r1
 800139c:	817b      	strh	r3, [r7, #10]
 800139e:	4613      	mov	r3, r2
 80013a0:	813b      	strh	r3, [r7, #8]
    //Set GPIO Ports and Pins data
    PORT_RS_and_E = PORT_RS_E;
 80013a2:	4a2a      	ldr	r2, [pc, #168]	; (800144c <LCD1602_Begin8BIT+0xbc>)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6013      	str	r3, [r2, #0]
    PIN_RS = RS;
 80013a8:	4a29      	ldr	r2, [pc, #164]	; (8001450 <LCD1602_Begin8BIT+0xc0>)
 80013aa:	897b      	ldrh	r3, [r7, #10]
 80013ac:	8013      	strh	r3, [r2, #0]
    PIN_E = E;
 80013ae:	4a29      	ldr	r2, [pc, #164]	; (8001454 <LCD1602_Begin8BIT+0xc4>)
 80013b0:	893b      	ldrh	r3, [r7, #8]
 80013b2:	8013      	strh	r3, [r2, #0]
    PORT_LSB = PORT_LSBs0to3;
 80013b4:	4a28      	ldr	r2, [pc, #160]	; (8001458 <LCD1602_Begin8BIT+0xc8>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
    D0_PIN = D0;
 80013ba:	4a28      	ldr	r2, [pc, #160]	; (800145c <LCD1602_Begin8BIT+0xcc>)
 80013bc:	8b3b      	ldrh	r3, [r7, #24]
 80013be:	8013      	strh	r3, [r2, #0]
    D1_PIN = D1;
 80013c0:	4a27      	ldr	r2, [pc, #156]	; (8001460 <LCD1602_Begin8BIT+0xd0>)
 80013c2:	8bbb      	ldrh	r3, [r7, #28]
 80013c4:	8013      	strh	r3, [r2, #0]
    D2_PIN = D2;
 80013c6:	4a27      	ldr	r2, [pc, #156]	; (8001464 <LCD1602_Begin8BIT+0xd4>)
 80013c8:	8c3b      	ldrh	r3, [r7, #32]
 80013ca:	8013      	strh	r3, [r2, #0]
    D3_PIN = D3;
 80013cc:	4a26      	ldr	r2, [pc, #152]	; (8001468 <LCD1602_Begin8BIT+0xd8>)
 80013ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013d0:	8013      	strh	r3, [r2, #0]
    PORT_MSB = PORT_MSBs4to7;
 80013d2:	4a26      	ldr	r2, [pc, #152]	; (800146c <LCD1602_Begin8BIT+0xdc>)
 80013d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d6:	6013      	str	r3, [r2, #0]
    D4_PIN = D4;
 80013d8:	4a25      	ldr	r2, [pc, #148]	; (8001470 <LCD1602_Begin8BIT+0xe0>)
 80013da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013dc:	8013      	strh	r3, [r2, #0]
    D5_PIN = D5;
 80013de:	4a25      	ldr	r2, [pc, #148]	; (8001474 <LCD1602_Begin8BIT+0xe4>)
 80013e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80013e2:	8013      	strh	r3, [r2, #0]
    D6_PIN = D6;
 80013e4:	4a24      	ldr	r2, [pc, #144]	; (8001478 <LCD1602_Begin8BIT+0xe8>)
 80013e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80013e8:	8013      	strh	r3, [r2, #0]
    D7_PIN = D7;
 80013ea:	4a24      	ldr	r2, [pc, #144]	; (800147c <LCD1602_Begin8BIT+0xec>)
 80013ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80013ee:	8013      	strh	r3, [r2, #0]
    //Initialise microsecond timer
    LCD1602_TIM_Config();
 80013f0:	f7ff ff2a 	bl	8001248 <LCD1602_TIM_Config>
    //Set the mode to 8 bits
    mode_8_4_I2C = 1;
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <LCD1602_Begin8BIT+0xf0>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
    //Function set variable to 8 bits mode
    FunctionSet = 0x38;
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <LCD1602_Begin8BIT+0xf4>)
 80013fc:	2238      	movs	r2, #56	; 0x38
 80013fe:	701a      	strb	r2, [r3, #0]

    //Initialise LCD
    //1. Wait at least 15ms
    HAL_Delay(20);
 8001400:	2014      	movs	r0, #20
 8001402:	f000 ff93 	bl	800232c <HAL_Delay>
    //2. Attentions sequence
    LCD1602_writeCommand(0x30);
 8001406:	2030      	movs	r0, #48	; 0x30
 8001408:	f7ff ffa2 	bl	8001350 <LCD1602_writeCommand>
    HAL_Delay(5);
 800140c:	2005      	movs	r0, #5
 800140e:	f000 ff8d 	bl	800232c <HAL_Delay>
    LCD1602_writeCommand(0x30);
 8001412:	2030      	movs	r0, #48	; 0x30
 8001414:	f7ff ff9c 	bl	8001350 <LCD1602_writeCommand>
    HAL_Delay(1);
 8001418:	2001      	movs	r0, #1
 800141a:	f000 ff87 	bl	800232c <HAL_Delay>
    LCD1602_writeCommand(0x30);
 800141e:	2030      	movs	r0, #48	; 0x30
 8001420:	f7ff ff96 	bl	8001350 <LCD1602_writeCommand>
    HAL_Delay(1);
 8001424:	2001      	movs	r0, #1
 8001426:	f000 ff81 	bl	800232c <HAL_Delay>
    //3. Function set; Enable 2 lines, Data length to 8 bits
    LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N | LCD_FUNCTION_DL);
 800142a:	2038      	movs	r0, #56	; 0x38
 800142c:	f7ff ff90 	bl	8001350 <LCD1602_writeCommand>
    //4. Display control (Display ON, Cursor ON, blink cursor)
    LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8001430:	200f      	movs	r0, #15
 8001432:	f7ff ff8d 	bl	8001350 <LCD1602_writeCommand>
    //5. Clear LCD and return home
    LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8001436:	2001      	movs	r0, #1
 8001438:	f7ff ff8a 	bl	8001350 <LCD1602_writeCommand>
    HAL_Delay(2);
 800143c:	2002      	movs	r0, #2
 800143e:	f000 ff75 	bl	800232c <HAL_Delay>
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000210 	.word	0x20000210
 8001450:	20000214 	.word	0x20000214
 8001454:	20000216 	.word	0x20000216
 8001458:	20000218 	.word	0x20000218
 800145c:	2000021c 	.word	0x2000021c
 8001460:	2000021e 	.word	0x2000021e
 8001464:	20000220 	.word	0x20000220
 8001468:	20000222 	.word	0x20000222
 800146c:	20000224 	.word	0x20000224
 8001470:	20000228 	.word	0x20000228
 8001474:	2000022a 	.word	0x2000022a
 8001478:	2000022c 	.word	0x2000022c
 800147c:	2000022e 	.word	0x2000022e
 8001480:	20000000 	.word	0x20000000
 8001484:	20000001 	.word	0x20000001

08001488 <LCD1602_print>:
    LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
    HAL_Delay(3);
}
//3) LCD print string
void LCD1602_print(char string[])
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
    for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8001490:	2300      	movs	r3, #0
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	e009      	b.n	80014aa <LCD1602_print+0x22>
    {
        LCD1602_writeData((uint8_t)string[i]);
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff66 	bl	8001370 <LCD1602_writeData>
    for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	3301      	adds	r3, #1
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d805      	bhi.n	80014bc <LCD1602_print+0x34>
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1ec      	bne.n	8001496 <LCD1602_print+0xe>
    }
}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <LCD1602_setCursor>:
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	460a      	mov	r2, r1
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	4613      	mov	r3, r2
 80014d2:	71bb      	strb	r3, [r7, #6]
    uint8_t maskData;
    maskData = (col-1)&0x0F;
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	73fb      	strb	r3, [r7, #15]
    if(row==1)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d108      	bne.n	80014f8 <LCD1602_setCursor+0x34>
    {
        maskData |= (0x80);
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ec:	73fb      	strb	r3, [r7, #15]
        LCD1602_writeCommand(maskData);
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff2d 	bl	8001350 <LCD1602_writeCommand>
    else
    {
        maskData |= (0xc0);
        LCD1602_writeCommand(maskData);
    }
}
 80014f6:	e007      	b.n	8001508 <LCD1602_setCursor+0x44>
        maskData |= (0xc0);
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80014fe:	73fb      	strb	r3, [r7, #15]
        LCD1602_writeCommand(maskData);
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff24 	bl	8001350 <LCD1602_writeCommand>
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <LCD1602_1stLine>:
void LCD1602_1stLine(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
    LCD1602_setCursor(1,1);
 8001514:	2101      	movs	r1, #1
 8001516:	2001      	movs	r0, #1
 8001518:	f7ff ffd4 	bl	80014c4 <LCD1602_setCursor>
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <LCD1602_2ndLine>:
void LCD1602_2ndLine(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
    LCD1602_setCursor(2,1);
 8001524:	2101      	movs	r1, #1
 8001526:	2002      	movs	r0, #2
 8001528:	f7ff ffcc 	bl	80014c4 <LCD1602_setCursor>
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <LCD1602_clear>:
    DisplayControl |= (0x02);
    LCD1602_writeCommand(DisplayControl);
}
//7) Clear display
void LCD1602_clear(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
    LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8001534:	2001      	movs	r0, #1
 8001536:	f7ff ff0b 	bl	8001350 <LCD1602_writeCommand>
    HAL_Delay(3);
 800153a:	2003      	movs	r0, #3
 800153c:	f000 fef6 	bl	800232c <HAL_Delay>
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <gf_add>:
        dec <<= 1;
    }
}

uint8_t gf_add(uint8_t a, uint8_t b)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	460a      	mov	r2, r1
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	4613      	mov	r3, r2
 8001552:	71bb      	strb	r3, [r7, #6]
    return a ^ b;
 8001554:	79fa      	ldrb	r2, [r7, #7]
 8001556:	79bb      	ldrb	r3, [r7, #6]
 8001558:	4053      	eors	r3, r2
 800155a:	b2db      	uxtb	r3, r3
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <gf_multiply>:

uint8_t gf_multiply(uint8_t a, uint8_t b)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	460a      	mov	r2, r1
 8001572:	71fb      	strb	r3, [r7, #7]
 8001574:	4613      	mov	r3, r2
 8001576:	71bb      	strb	r3, [r7, #6]
    uint8_t i;
    uint8_t acc = 0x00; // Accumulator
 8001578:	2300      	movs	r3, #0
 800157a:	73bb      	strb	r3, [r7, #14]
    uint8_t msb; // Current MSB of a

    for (i = 0; i < 8; ++i)
 800157c:	2300      	movs	r3, #0
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e01f      	b.n	80015c2 <gf_multiply+0x5a>
    {
        // If LSB of b is 1, add a to accumulator
        if (b & 0x01)
 8001582:	79bb      	ldrb	r3, [r7, #6]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <gf_multiply+0x2c>
        {
            acc ^= a;
 800158c:	7bba      	ldrb	r2, [r7, #14]
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	4053      	eors	r3, r2
 8001592:	73bb      	strb	r3, [r7, #14]
        }

        // Store MSB of a, then shift it off
        msb = a & 0x80;
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800159a:	737b      	strb	r3, [r7, #13]
        a <<= 1;
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	71fb      	strb	r3, [r7, #7]

        // If MSB of a was 1, add field polynomial to a
        if (msb)
 80015a2:	7b7b      	ldrb	r3, [r7, #13]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d006      	beq.n	80015b6 <gf_multiply+0x4e>
        {
            a = gf_add(a, FIELD_POLY);
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	211b      	movs	r1, #27
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ffc9 	bl	8001544 <gf_add>
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
        }

        // Advance to next bit of b
        b >>= 1;
 80015b6:	79bb      	ldrb	r3, [r7, #6]
 80015b8:	085b      	lsrs	r3, r3, #1
 80015ba:	71bb      	strb	r3, [r7, #6]
    for (i = 0; i < 8; ++i)
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	3301      	adds	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	2b07      	cmp	r3, #7
 80015c6:	d9dc      	bls.n	8001582 <gf_multiply+0x1a>
    }

    return acc;
 80015c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <gf_divide>:

    return z;
}

void gf_divide(uint8_t a, uint8_t b, uint8_t* q, uint8_t* r, uint8_t field_poly)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b087      	sub	sp, #28
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60ba      	str	r2, [r7, #8]
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	4603      	mov	r3, r0
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	460b      	mov	r3, r1
 80015e2:	73bb      	strb	r3, [r7, #14]
    uint8_t i = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	75fb      	strb	r3, [r7, #23]
    uint8_t j;
    uint8_t quotient = 0x00; // Quotient
 80015e8:	2300      	movs	r3, #0
 80015ea:	757b      	strb	r3, [r7, #21]
    uint8_t rem = b; // Remainder
 80015ec:	7bbb      	ldrb	r3, [r7, #14]
 80015ee:	753b      	strb	r3, [r7, #20]
    uint8_t msb_a; // Current MSB of a

    // Perform initial alignment
    msb_a = a & 0x80;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80015f6:	74fb      	strb	r3, [r7, #19]
    while (0 == msb_a && i < 8)
 80015f8:	e009      	b.n	800160e <gf_divide+0x3c>
    {
        a <<= 1;
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
        msb_a = a & 0x80;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001606:	74fb      	strb	r3, [r7, #19]
        i++;
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	3301      	adds	r3, #1
 800160c:	75fb      	strb	r3, [r7, #23]
    while (0 == msb_a && i < 8)
 800160e:	7cfb      	ldrb	r3, [r7, #19]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <gf_divide+0x48>
 8001614:	7dfb      	ldrb	r3, [r7, #23]
 8001616:	2b07      	cmp	r3, #7
 8001618:	d9ef      	bls.n	80015fa <gf_divide+0x28>
    }

    // Take care of field polynomial MSB (bit 8)
    if (field_poly)
 800161a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d012      	beq.n	8001648 <gf_divide+0x76>
    {
        quotient |= (1 << (i + 1));
 8001622:	7dfb      	ldrb	r3, [r7, #23]
 8001624:	3301      	adds	r3, #1
 8001626:	2201      	movs	r2, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	b25a      	sxtb	r2, r3
 800162e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001632:	4313      	orrs	r3, r2
 8001634:	b25b      	sxtb	r3, r3
 8001636:	757b      	strb	r3, [r7, #21]
        rem ^= (a << 1);
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	b25a      	sxtb	r2, r3
 800163e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8001642:	4053      	eors	r3, r2
 8001644:	b25b      	sxtb	r3, r3
 8001646:	753b      	strb	r3, [r7, #20]
    }

    // Compute for remaining bits after alignment
    // From this point msb_a is always 1
    for (j = 0; j < i + 1; ++j)
 8001648:	2300      	movs	r3, #0
 800164a:	75bb      	strb	r3, [r7, #22]
 800164c:	e01d      	b.n	800168a <gf_divide+0xb8>
    {
        if ((rem << j) & 0x80)
 800164e:	7d3a      	ldrb	r2, [r7, #20]
 8001650:	7dbb      	ldrb	r3, [r7, #22]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00f      	beq.n	800167e <gf_divide+0xac>
        {
            // Reduce if needed
            quotient |= (1 << (i - j));
 800165e:	7dfa      	ldrb	r2, [r7, #23]
 8001660:	7dbb      	ldrb	r3, [r7, #22]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2201      	movs	r2, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	b25a      	sxtb	r2, r3
 800166c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001670:	4313      	orrs	r3, r2
 8001672:	b25b      	sxtb	r3, r3
 8001674:	757b      	strb	r3, [r7, #21]
            rem ^= a;
 8001676:	7d3a      	ldrb	r2, [r7, #20]
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	4053      	eors	r3, r2
 800167c:	753b      	strb	r3, [r7, #20]
        }

        a >>= 1;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
    for (j = 0; j < i + 1; ++j)
 8001684:	7dbb      	ldrb	r3, [r7, #22]
 8001686:	3301      	adds	r3, #1
 8001688:	75bb      	strb	r3, [r7, #22]
 800168a:	7dfa      	ldrb	r2, [r7, #23]
 800168c:	7dbb      	ldrb	r3, [r7, #22]
 800168e:	429a      	cmp	r2, r3
 8001690:	d2dd      	bcs.n	800164e <gf_divide+0x7c>

    }

    *q = quotient;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	7d7a      	ldrb	r2, [r7, #21]
 8001696:	701a      	strb	r2, [r3, #0]
    *r = rem;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7d3a      	ldrb	r2, [r7, #20]
 800169c:	701a      	strb	r2, [r3, #0]
}
 800169e:	bf00      	nop
 80016a0:	371c      	adds	r7, #28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <gf_inverse>:

uint8_t gf_inverse(uint8_t a, uint8_t b)
{
 80016aa:	b590      	push	{r4, r7, lr}
 80016ac:	b08b      	sub	sp, #44	; 0x2c
 80016ae:	af02      	add	r7, sp, #8
 80016b0:	4603      	mov	r3, r0
 80016b2:	460a      	mov	r2, r1
 80016b4:	71fb      	strb	r3, [r7, #7]
 80016b6:	4613      	mov	r3, r2
 80016b8:	71bb      	strb	r3, [r7, #6]
    // Map 0x00 to 0x00
    if (a == 0x00)
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <gf_inverse+0x1a>
    {
        return 0x00;
 80016c0:	2300      	movs	r3, #0
 80016c2:	e065      	b.n	8001790 <gf_inverse+0xe6>
    uint8_t rem[8];
    uint8_t aux[8];
    uint8_t q, r;
    uint8_t i;

    rem[0] = b;
 80016c4:	79bb      	ldrb	r3, [r7, #6]
 80016c6:	753b      	strb	r3, [r7, #20]
    rem[1] = a;
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	757b      	strb	r3, [r7, #21]
    aux[0] = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	733b      	strb	r3, [r7, #12]
    aux[1] = 1;
 80016d0:	2301      	movs	r3, #1
 80016d2:	737b      	strb	r3, [r7, #13]

    i = 1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	77fb      	strb	r3, [r7, #31]
    while (rem[i] > 0x01)
 80016d8:	e04e      	b.n	8001778 <gf_inverse+0xce>
    {
        i++;
 80016da:	7ffb      	ldrb	r3, [r7, #31]
 80016dc:	3301      	adds	r3, #1
 80016de:	77fb      	strb	r3, [r7, #31]
        if (i == 2)
 80016e0:	7ffb      	ldrb	r3, [r7, #31]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d114      	bne.n	8001710 <gf_inverse+0x66>
        {
            gf_divide(rem[i - 1], rem[i - 2], &q, &r, 1);
 80016e6:	7ffb      	ldrb	r3, [r7, #31]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	3320      	adds	r3, #32
 80016ec:	443b      	add	r3, r7
 80016ee:	f813 0c0c 	ldrb.w	r0, [r3, #-12]
 80016f2:	7ffb      	ldrb	r3, [r7, #31]
 80016f4:	3b02      	subs	r3, #2
 80016f6:	3320      	adds	r3, #32
 80016f8:	443b      	add	r3, r7
 80016fa:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 80016fe:	f107 030a 	add.w	r3, r7, #10
 8001702:	f107 020b 	add.w	r2, r7, #11
 8001706:	2401      	movs	r4, #1
 8001708:	9400      	str	r4, [sp, #0]
 800170a:	f7ff ff62 	bl	80015d2 <gf_divide>
 800170e:	e013      	b.n	8001738 <gf_inverse+0x8e>
        }
        else
        {
            gf_divide(rem[i - 1], rem[i - 2], &q, &r, 0);
 8001710:	7ffb      	ldrb	r3, [r7, #31]
 8001712:	3b01      	subs	r3, #1
 8001714:	3320      	adds	r3, #32
 8001716:	443b      	add	r3, r7
 8001718:	f813 0c0c 	ldrb.w	r0, [r3, #-12]
 800171c:	7ffb      	ldrb	r3, [r7, #31]
 800171e:	3b02      	subs	r3, #2
 8001720:	3320      	adds	r3, #32
 8001722:	443b      	add	r3, r7
 8001724:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8001728:	f107 030a 	add.w	r3, r7, #10
 800172c:	f107 020b 	add.w	r2, r7, #11
 8001730:	2400      	movs	r4, #0
 8001732:	9400      	str	r4, [sp, #0]
 8001734:	f7ff ff4d 	bl	80015d2 <gf_divide>
        }
        rem[i] = r;
 8001738:	7ffb      	ldrb	r3, [r7, #31]
 800173a:	7aba      	ldrb	r2, [r7, #10]
 800173c:	3320      	adds	r3, #32
 800173e:	443b      	add	r3, r7
 8001740:	f803 2c0c 	strb.w	r2, [r3, #-12]
        aux[i] = gf_multiply(q, aux[i - 1]) ^ aux[i - 2];
 8001744:	7afa      	ldrb	r2, [r7, #11]
 8001746:	7ffb      	ldrb	r3, [r7, #31]
 8001748:	3b01      	subs	r3, #1
 800174a:	3320      	adds	r3, #32
 800174c:	443b      	add	r3, r7
 800174e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001752:	4619      	mov	r1, r3
 8001754:	4610      	mov	r0, r2
 8001756:	f7ff ff07 	bl	8001568 <gf_multiply>
 800175a:	4603      	mov	r3, r0
 800175c:	4619      	mov	r1, r3
 800175e:	7ffb      	ldrb	r3, [r7, #31]
 8001760:	3b02      	subs	r3, #2
 8001762:	3320      	adds	r3, #32
 8001764:	443b      	add	r3, r7
 8001766:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800176a:	7ffb      	ldrb	r3, [r7, #31]
 800176c:	404a      	eors	r2, r1
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	3320      	adds	r3, #32
 8001772:	443b      	add	r3, r7
 8001774:	f803 2c14 	strb.w	r2, [r3, #-20]
    while (rem[i] > 0x01)
 8001778:	7ffb      	ldrb	r3, [r7, #31]
 800177a:	3320      	adds	r3, #32
 800177c:	443b      	add	r3, r7
 800177e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d8a9      	bhi.n	80016da <gf_inverse+0x30>
    }

    // Inverse of A(x) is in current index of aux
    return aux[i];
 8001786:	7ffb      	ldrb	r3, [r7, #31]
 8001788:	3320      	adds	r3, #32
 800178a:	443b      	add	r3, r7
 800178c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3724      	adds	r7, #36	; 0x24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd90      	pop	{r4, r7, pc}

08001798 <ascii_to_hex>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
unsigned int ascii_to_hex(const char* str)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	uint8_t result;
	unsigned int i = 0, h, high, low;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
	high = (str[i] > '9') ? str[i] - 'A' + 10 : str[i] - '0';
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	4413      	add	r3, r2
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b39      	cmp	r3, #57	; 0x39
 80017ae:	d905      	bls.n	80017bc <ascii_to_hex+0x24>
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	4413      	add	r3, r2
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	3b37      	subs	r3, #55	; 0x37
 80017ba:	e004      	b.n	80017c6 <ascii_to_hex+0x2e>
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	4413      	add	r3, r2
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	3b30      	subs	r3, #48	; 0x30
 80017c6:	613b      	str	r3, [r7, #16]
	low = (str[i + 1] > '9') ? str[i + 1] - 'A' + 10 : str[i + 1] - '0';
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b39      	cmp	r3, #57	; 0x39
 80017d4:	d906      	bls.n	80017e4 <ascii_to_hex+0x4c>
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3301      	adds	r3, #1
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	3b37      	subs	r3, #55	; 0x37
 80017e2:	e005      	b.n	80017f0 <ascii_to_hex+0x58>
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	3301      	adds	r3, #1
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	4413      	add	r3, r2
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	3b30      	subs	r3, #48	; 0x30
 80017f0:	60fb      	str	r3, [r7, #12]
	result = (high << 4) | low;
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	4313      	orrs	r3, r2
 8001800:	72fb      	strb	r3, [r7, #11]
	return result;
 8001802:	7afb      	ldrb	r3, [r7, #11]
}
 8001804:	4618      	mov	r0, r3
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001810:	b5b0      	push	{r4, r5, r7, lr}
 8001812:	b09c      	sub	sp, #112	; 0x70
 8001814:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001816:	f000 fd17 	bl	8002248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800181a:	f000 fa4f 	bl	8001cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800181e:	f000 faab 	bl	8001d78 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  char *welcom = "Welcome galois \n\r";
 8001822:	4bc0      	ldr	r3, [pc, #768]	; (8001b24 <main+0x314>)
 8001824:	647b      	str	r3, [r7, #68]	; 0x44
  char *welcom2 = "field! \n\r";
 8001826:	4bc0      	ldr	r3, [pc, #768]	; (8001b28 <main+0x318>)
 8001828:	643b      	str	r3, [r7, #64]	; 0x40
  char *input_text = "click Key Pad";
 800182a:	4bc0      	ldr	r3, [pc, #768]	; (8001b2c <main+0x31c>)
 800182c:	63fb      	str	r3, [r7, #60]	; 0x3c
  char inversion_result[22] = "Result : ";
 800182e:	4ac0      	ldr	r2, [pc, #768]	; (8001b30 <main+0x320>)
 8001830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001834:	ca07      	ldmia	r2, {r0, r1, r2}
 8001836:	c303      	stmia	r3!, {r0, r1}
 8001838:	801a      	strh	r2, [r3, #0]
 800183a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
  char calculating[] = "Calculating...";
 8001846:	4bbb      	ldr	r3, [pc, #748]	; (8001b34 <main+0x324>)
 8001848:	f107 0414 	add.w	r4, r7, #20
 800184c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800184e:	c407      	stmia	r4!, {r0, r1, r2}
 8001850:	8023      	strh	r3, [r4, #0]
 8001852:	3402      	adds	r4, #2
 8001854:	0c1b      	lsrs	r3, r3, #16
 8001856:	7023      	strb	r3, [r4, #0]
  char initial_message[] = "Initializing....";
 8001858:	4bb7      	ldr	r3, [pc, #732]	; (8001b38 <main+0x328>)
 800185a:	463c      	mov	r4, r7
 800185c:	461d      	mov	r5, r3
 800185e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001862:	682b      	ldr	r3, [r5, #0]
 8001864:	7023      	strb	r3, [r4, #0]
  GPIO_PinState pin_state;
  /* USER CODE END 2 */
  LCD1602_Begin8BIT(RS_GPIO_Port, RS_Pin, E_Pin, D0_GPIO_Port, D0_Pin, D1_Pin, D2_Pin, D3_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	9308      	str	r3, [sp, #32]
 800186a:	2340      	movs	r3, #64	; 0x40
 800186c:	9307      	str	r3, [sp, #28]
 800186e:	2320      	movs	r3, #32
 8001870:	9306      	str	r3, [sp, #24]
 8001872:	2310      	movs	r3, #16
 8001874:	9305      	str	r3, [sp, #20]
 8001876:	4bb1      	ldr	r3, [pc, #708]	; (8001b3c <main+0x32c>)
 8001878:	9304      	str	r3, [sp, #16]
 800187a:	2308      	movs	r3, #8
 800187c:	9303      	str	r3, [sp, #12]
 800187e:	2304      	movs	r3, #4
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	2302      	movs	r3, #2
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	2301      	movs	r3, #1
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	4bac      	ldr	r3, [pc, #688]	; (8001b3c <main+0x32c>)
 800188c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001894:	48a9      	ldr	r0, [pc, #676]	; (8001b3c <main+0x32c>)
 8001896:	f7ff fd7b 	bl	8001390 <LCD1602_Begin8BIT>
    LCD1602_print(welcom);
 800189a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800189c:	f7ff fdf4 	bl	8001488 <LCD1602_print>
    LCD1602_2ndLine();
 80018a0:	f7ff fe3e 	bl	8001520 <LCD1602_2ndLine>
    LCD1602_print(welcom2);
 80018a4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80018a6:	f7ff fdef 	bl	8001488 <LCD1602_print>
    LCD1602_1stLine();
 80018aa:	f7ff fe31 	bl	8001510 <LCD1602_1stLine>
    HAL_Delay(1000);
 80018ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018b2:	f000 fd3b 	bl	800232c <HAL_Delay>
    LCD1602_clear();
 80018b6:	f7ff fe3b 	bl	8001530 <LCD1602_clear>
    LCD1602_print(input_text);
 80018ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018bc:	f7ff fde4 	bl	8001488 <LCD1602_print>
    HAL_Delay(2000);
 80018c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018c4:	f000 fd32 	bl	800232c <HAL_Delay>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
    	LCD1602_print(input_text);
 80018c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018ca:	f7ff fddd 	bl	8001488 <LCD1602_print>
    	HAL_Delay(500);
 80018ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018d2:	f000 fd2b 	bl	800232c <HAL_Delay>
    	LCD1602_clear();
 80018d6:	f7ff fe2b 	bl	8001530 <LCD1602_clear>
    	if(index == 2){
 80018da:	4b99      	ldr	r3, [pc, #612]	; (8001b40 <main+0x330>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d14f      	bne.n	8001982 <main+0x172>
    		    LCD1602_clear();
 80018e2:	f7ff fe25 	bl	8001530 <LCD1602_clear>
    			uint_hex = ascii_to_hex(hex_number);
 80018e6:	4897      	ldr	r0, [pc, #604]	; (8001b44 <main+0x334>)
 80018e8:	f7ff ff56 	bl	8001798 <ascii_to_hex>
 80018ec:	4603      	mov	r3, r0
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	4b95      	ldr	r3, [pc, #596]	; (8001b48 <main+0x338>)
 80018f2:	701a      	strb	r2, [r3, #0]
    			sprintf(hex_text, "0x%02x", uint_hex);
 80018f4:	4b94      	ldr	r3, [pc, #592]	; (8001b48 <main+0x338>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4994      	ldr	r1, [pc, #592]	; (8001b4c <main+0x33c>)
 80018fc:	4894      	ldr	r0, [pc, #592]	; (8001b50 <main+0x340>)
 80018fe:	f002 fb41 	bl	8003f84 <siprintf>
    			LCD1602_print(hex_text);
 8001902:	4893      	ldr	r0, [pc, #588]	; (8001b50 <main+0x340>)
 8001904:	f7ff fdc0 	bl	8001488 <LCD1602_print>
    			LCD1602_2ndLine();
 8001908:	f7ff fe0a 	bl	8001520 <LCD1602_2ndLine>
    			LCD1602_print(calculating);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fdb9 	bl	8001488 <LCD1602_print>
    			HAL_Delay(2000);
 8001916:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800191a:	f000 fd07 	bl	800232c <HAL_Delay>

    			LCD1602_clear();
 800191e:	f7ff fe07 	bl	8001530 <LCD1602_clear>
    			LCD1602_1stLine();
 8001922:	f7ff fdf5 	bl	8001510 <LCD1602_1stLine>

    			result = gf_inverse(uint_hex, FIELD_POLY);
 8001926:	4b88      	ldr	r3, [pc, #544]	; (8001b48 <main+0x338>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	211b      	movs	r1, #27
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff febc 	bl	80016aa <gf_inverse>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	4b87      	ldr	r3, [pc, #540]	; (8001b54 <main+0x344>)
 8001938:	701a      	strb	r2, [r3, #0]
    			sprintf(hex_text, "0x%02x", result);
 800193a:	4b86      	ldr	r3, [pc, #536]	; (8001b54 <main+0x344>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	4982      	ldr	r1, [pc, #520]	; (8001b4c <main+0x33c>)
 8001942:	4883      	ldr	r0, [pc, #524]	; (8001b50 <main+0x340>)
 8001944:	f002 fb1e 	bl	8003f84 <siprintf>
    			LCD1602_print(inversion_result);
 8001948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fd9b 	bl	8001488 <LCD1602_print>
    			LCD1602_2ndLine();
 8001952:	f7ff fde5 	bl	8001520 <LCD1602_2ndLine>
    			LCD1602_print(hex_text);
 8001956:	487e      	ldr	r0, [pc, #504]	; (8001b50 <main+0x340>)
 8001958:	f7ff fd96 	bl	8001488 <LCD1602_print>
    			HAL_Delay(2000);
 800195c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001960:	f000 fce4 	bl	800232c <HAL_Delay>

    			LCD1602_clear();
 8001964:	f7ff fde4 	bl	8001530 <LCD1602_clear>
    			LCD1602_1stLine();
 8001968:	f7ff fdd2 	bl	8001510 <LCD1602_1stLine>
    			LCD1602_print(initial_message);
 800196c:	463b      	mov	r3, r7
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fd8a 	bl	8001488 <LCD1602_print>
    			HAL_Delay(2000);
 8001974:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001978:	f000 fcd8 	bl	800232c <HAL_Delay>


    			index = 0;
 800197c:	4b70      	ldr	r3, [pc, #448]	; (8001b40 <main+0x330>)
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
    		}

    	 switch(keyPad){
 8001982:	4b75      	ldr	r3, [pc, #468]	; (8001b58 <main+0x348>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800198a:	f000 8181 	beq.w	8001c90 <main+0x480>
 800198e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001992:	f300 818b 	bgt.w	8001cac <main+0x49c>
 8001996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800199a:	f000 816b 	beq.w	8001c74 <main+0x464>
 800199e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019a2:	f300 8183 	bgt.w	8001cac <main+0x49c>
 80019a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019aa:	f000 8155 	beq.w	8001c58 <main+0x448>
 80019ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019b2:	f300 817b 	bgt.w	8001cac <main+0x49c>
 80019b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019ba:	f000 813f 	beq.w	8001c3c <main+0x42c>
 80019be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019c2:	f300 8173 	bgt.w	8001cac <main+0x49c>
 80019c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019ca:	f000 8129 	beq.w	8001c20 <main+0x410>
 80019ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019d2:	f300 816b 	bgt.w	8001cac <main+0x49c>
 80019d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019da:	f000 8113 	beq.w	8001c04 <main+0x3f4>
 80019de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e2:	f300 8163 	bgt.w	8001cac <main+0x49c>
 80019e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ea:	f000 80fd 	beq.w	8001be8 <main+0x3d8>
 80019ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f2:	f300 815b 	bgt.w	8001cac <main+0x49c>
 80019f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019fa:	f000 80e7 	beq.w	8001bcc <main+0x3bc>
 80019fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a02:	f300 8153 	bgt.w	8001cac <main+0x49c>
 8001a06:	2b80      	cmp	r3, #128	; 0x80
 8001a08:	f000 80d2 	beq.w	8001bb0 <main+0x3a0>
 8001a0c:	2b80      	cmp	r3, #128	; 0x80
 8001a0e:	f300 814d 	bgt.w	8001cac <main+0x49c>
 8001a12:	2b20      	cmp	r3, #32
 8001a14:	dc4a      	bgt.n	8001aac <main+0x29c>
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f340 8148 	ble.w	8001cac <main+0x49c>
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	2b1f      	cmp	r3, #31
 8001a20:	f200 8144 	bhi.w	8001cac <main+0x49c>
 8001a24:	a201      	add	r2, pc, #4	; (adr r2, 8001a2c <main+0x21c>)
 8001a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2a:	bf00      	nop
 8001a2c:	08001ab3 	.word	0x08001ab3
 8001a30:	08001acf 	.word	0x08001acf
 8001a34:	08001cad 	.word	0x08001cad
 8001a38:	08001aeb 	.word	0x08001aeb
 8001a3c:	08001cad 	.word	0x08001cad
 8001a40:	08001cad 	.word	0x08001cad
 8001a44:	08001cad 	.word	0x08001cad
 8001a48:	08001b07 	.word	0x08001b07
 8001a4c:	08001cad 	.word	0x08001cad
 8001a50:	08001cad 	.word	0x08001cad
 8001a54:	08001cad 	.word	0x08001cad
 8001a58:	08001cad 	.word	0x08001cad
 8001a5c:	08001cad 	.word	0x08001cad
 8001a60:	08001cad 	.word	0x08001cad
 8001a64:	08001cad 	.word	0x08001cad
 8001a68:	08001b5d 	.word	0x08001b5d
 8001a6c:	08001cad 	.word	0x08001cad
 8001a70:	08001cad 	.word	0x08001cad
 8001a74:	08001cad 	.word	0x08001cad
 8001a78:	08001cad 	.word	0x08001cad
 8001a7c:	08001cad 	.word	0x08001cad
 8001a80:	08001cad 	.word	0x08001cad
 8001a84:	08001cad 	.word	0x08001cad
 8001a88:	08001cad 	.word	0x08001cad
 8001a8c:	08001cad 	.word	0x08001cad
 8001a90:	08001cad 	.word	0x08001cad
 8001a94:	08001cad 	.word	0x08001cad
 8001a98:	08001cad 	.word	0x08001cad
 8001a9c:	08001cad 	.word	0x08001cad
 8001aa0:	08001cad 	.word	0x08001cad
 8001aa4:	08001cad 	.word	0x08001cad
 8001aa8:	08001b79 	.word	0x08001b79
 8001aac:	2b40      	cmp	r3, #64	; 0x40
 8001aae:	d071      	beq.n	8001b94 <main+0x384>
    	    	hex_number[index] = 'F';
    	    	keyPad = NULL;
    	    	index++;
    	        break;
    	    default:
    	    	break;
 8001ab0:	e0fc      	b.n	8001cac <main+0x49c>
    	    	hex_number[index] = '0';
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <main+0x330>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a23      	ldr	r2, [pc, #140]	; (8001b44 <main+0x334>)
 8001ab8:	2130      	movs	r1, #48	; 0x30
 8001aba:	54d1      	strb	r1, [r2, r3]
    	    	keyPad = NULL;
 8001abc:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <main+0x348>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	801a      	strh	r2, [r3, #0]
    	    	index++;
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <main+0x330>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	4a1d      	ldr	r2, [pc, #116]	; (8001b40 <main+0x330>)
 8001aca:	6013      	str	r3, [r2, #0]
    	    	break;
 8001acc:	e0ef      	b.n	8001cae <main+0x49e>
    	    	hex_number[index] = '1';
 8001ace:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <main+0x330>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <main+0x334>)
 8001ad4:	2131      	movs	r1, #49	; 0x31
 8001ad6:	54d1      	strb	r1, [r2, r3]
    	    	keyPad = NULL;
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <main+0x348>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	801a      	strh	r2, [r3, #0]
    	    	index++;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <main+0x330>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	4a16      	ldr	r2, [pc, #88]	; (8001b40 <main+0x330>)
 8001ae6:	6013      	str	r3, [r2, #0]
    	        break;
 8001ae8:	e0e1      	b.n	8001cae <main+0x49e>
    	    	hex_number[index] = '2';
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <main+0x330>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <main+0x334>)
 8001af0:	2132      	movs	r1, #50	; 0x32
 8001af2:	54d1      	strb	r1, [r2, r3]
    	    	keyPad = NULL;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <main+0x348>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	801a      	strh	r2, [r3, #0]
    	    	index++;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <main+0x330>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3301      	adds	r3, #1
 8001b00:	4a0f      	ldr	r2, [pc, #60]	; (8001b40 <main+0x330>)
 8001b02:	6013      	str	r3, [r2, #0]
    	        break;
 8001b04:	e0d3      	b.n	8001cae <main+0x49e>
    	    	hex_number[index] = '3';
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <main+0x330>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <main+0x334>)
 8001b0c:	2133      	movs	r1, #51	; 0x33
 8001b0e:	54d1      	strb	r1, [r2, r3]
    	    	keyPad = NULL;
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <main+0x348>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	801a      	strh	r2, [r3, #0]
    	    	index++;
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <main+0x330>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	4a08      	ldr	r2, [pc, #32]	; (8001b40 <main+0x330>)
 8001b1e:	6013      	str	r3, [r2, #0]
    	        break;
 8001b20:	e0c5      	b.n	8001cae <main+0x49e>
 8001b22:	bf00      	nop
 8001b24:	08007b80 	.word	0x08007b80
 8001b28:	08007b94 	.word	0x08007b94
 8001b2c:	08007ba0 	.word	0x08007ba0
 8001b30:	08007bb8 	.word	0x08007bb8
 8001b34:	08007bd0 	.word	0x08007bd0
 8001b38:	08007be0 	.word	0x08007be0
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	20000230 	.word	0x20000230
 8001b44:	20000004 	.word	0x20000004
 8001b48:	20000234 	.word	0x20000234
 8001b4c:	08007bb0 	.word	0x08007bb0
 8001b50:	20000008 	.word	0x20000008
 8001b54:	20000235 	.word	0x20000235
 8001b58:	20000236 	.word	0x20000236
    	    	hex_number[index] = '4';
 8001b5c:	4b54      	ldr	r3, [pc, #336]	; (8001cb0 <main+0x4a0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a54      	ldr	r2, [pc, #336]	; (8001cb4 <main+0x4a4>)
 8001b62:	2134      	movs	r1, #52	; 0x34
 8001b64:	54d1      	strb	r1, [r2, r3]
    	    	keyPad = NULL;
 8001b66:	4b54      	ldr	r3, [pc, #336]	; (8001cb8 <main+0x4a8>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	801a      	strh	r2, [r3, #0]
    	    	index++;
 8001b6c:	4b50      	ldr	r3, [pc, #320]	; (8001cb0 <main+0x4a0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	3301      	adds	r3, #1
 8001b72:	4a4f      	ldr	r2, [pc, #316]	; (8001cb0 <main+0x4a0>)
 8001b74:	6013      	str	r3, [r2, #0]
    	        break;
 8001b76:	e09a      	b.n	8001cae <main+0x49e>
    	    	hex_number[index] = '5';
 8001b78:	4b4d      	ldr	r3, [pc, #308]	; (8001cb0 <main+0x4a0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a4d      	ldr	r2, [pc, #308]	; (8001cb4 <main+0x4a4>)
 8001b7e:	2135      	movs	r1, #53	; 0x35
 8001b80:	54d1      	strb	r1, [r2, r3]
    	    	keyPad = NULL;
 8001b82:	4b4d      	ldr	r3, [pc, #308]	; (8001cb8 <main+0x4a8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	801a      	strh	r2, [r3, #0]
    	    	index++;
 8001b88:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <main+0x4a0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	4a48      	ldr	r2, [pc, #288]	; (8001cb0 <main+0x4a0>)
 8001b90:	6013      	str	r3, [r2, #0]
    	        break;
 8001b92:	e08c      	b.n	8001cae <main+0x49e>
    	    	hex_number[index] = '6';
 8001b94:	4b46      	ldr	r3, [pc, #280]	; (8001cb0 <main+0x4a0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a46      	ldr	r2, [pc, #280]	; (8001cb4 <main+0x4a4>)
 8001b9a:	2136      	movs	r1, #54	; 0x36
 8001b9c:	54d1      	strb	r1, [r2, r3]
    	    	keyPad = NULL;
 8001b9e:	4b46      	ldr	r3, [pc, #280]	; (8001cb8 <main+0x4a8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	801a      	strh	r2, [r3, #0]
    	    	index++;
 8001ba4:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <main+0x4a0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	4a41      	ldr	r2, [pc, #260]	; (8001cb0 <main+0x4a0>)
 8001bac:	6013      	str	r3, [r2, #0]
    	        break;
 8001bae:	e07e      	b.n	8001cae <main+0x49e>
    	    	hex_number[index] = '7';
 8001bb0:	4b3f      	ldr	r3, [pc, #252]	; (8001cb0 <main+0x4a0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a3f      	ldr	r2, [pc, #252]	; (8001cb4 <main+0x4a4>)
 8001bb6:	2137      	movs	r1, #55	; 0x37
 8001bb8:	54d1      	strb	r1, [r2, r3]
    	    	keyPad = NULL;
 8001bba:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <main+0x4a8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	801a      	strh	r2, [r3, #0]
    	    	index++;
 8001bc0:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <main+0x4a0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	4a3a      	ldr	r2, [pc, #232]	; (8001cb0 <main+0x4a0>)
 8001bc8:	6013      	str	r3, [r2, #0]
    	        break;
 8001bca:	e070      	b.n	8001cae <main+0x49e>
    	    	hex_number[index] = '8';
 8001bcc:	4b38      	ldr	r3, [pc, #224]	; (8001cb0 <main+0x4a0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a38      	ldr	r2, [pc, #224]	; (8001cb4 <main+0x4a4>)
 8001bd2:	2138      	movs	r1, #56	; 0x38
 8001bd4:	54d1      	strb	r1, [r2, r3]
    	    	keyPad = NULL;
 8001bd6:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <main+0x4a8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	801a      	strh	r2, [r3, #0]
    	    	index++;
 8001bdc:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <main+0x4a0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	4a33      	ldr	r2, [pc, #204]	; (8001cb0 <main+0x4a0>)
 8001be4:	6013      	str	r3, [r2, #0]
    	        break;
 8001be6:	e062      	b.n	8001cae <main+0x49e>
    	    	hex_number[index] = '9';
 8001be8:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <main+0x4a0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a31      	ldr	r2, [pc, #196]	; (8001cb4 <main+0x4a4>)
 8001bee:	2139      	movs	r1, #57	; 0x39
 8001bf0:	54d1      	strb	r1, [r2, r3]
    	    	keyPad = NULL;
 8001bf2:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <main+0x4a8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	801a      	strh	r2, [r3, #0]
    	    	index++;
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <main+0x4a0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	4a2c      	ldr	r2, [pc, #176]	; (8001cb0 <main+0x4a0>)
 8001c00:	6013      	str	r3, [r2, #0]
    	        break;
 8001c02:	e054      	b.n	8001cae <main+0x49e>
    	    	hex_number[index] = 'A';
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <main+0x4a0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a2a      	ldr	r2, [pc, #168]	; (8001cb4 <main+0x4a4>)
 8001c0a:	2141      	movs	r1, #65	; 0x41
 8001c0c:	54d1      	strb	r1, [r2, r3]
    	    	keyPad = NULL;
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <main+0x4a8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	801a      	strh	r2, [r3, #0]
    	    	index++;
 8001c14:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <main+0x4a0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	4a25      	ldr	r2, [pc, #148]	; (8001cb0 <main+0x4a0>)
 8001c1c:	6013      	str	r3, [r2, #0]
    	        break;
 8001c1e:	e046      	b.n	8001cae <main+0x49e>
    	    	hex_number[index] = 'B';
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <main+0x4a0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a23      	ldr	r2, [pc, #140]	; (8001cb4 <main+0x4a4>)
 8001c26:	2142      	movs	r1, #66	; 0x42
 8001c28:	54d1      	strb	r1, [r2, r3]
    	    	keyPad = NULL;
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <main+0x4a8>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	801a      	strh	r2, [r3, #0]
    	    	index++;
 8001c30:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <main+0x4a0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	4a1e      	ldr	r2, [pc, #120]	; (8001cb0 <main+0x4a0>)
 8001c38:	6013      	str	r3, [r2, #0]
    	        break;
 8001c3a:	e038      	b.n	8001cae <main+0x49e>
    	    	hex_number[index] = 'C';
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <main+0x4a0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <main+0x4a4>)
 8001c42:	2143      	movs	r1, #67	; 0x43
 8001c44:	54d1      	strb	r1, [r2, r3]
    	    	keyPad = NULL;
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <main+0x4a8>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	801a      	strh	r2, [r3, #0]
    	    	index++;
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <main+0x4a0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <main+0x4a0>)
 8001c54:	6013      	str	r3, [r2, #0]
    	        break;
 8001c56:	e02a      	b.n	8001cae <main+0x49e>
    	    	hex_number[index] = 'D';
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <main+0x4a0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a15      	ldr	r2, [pc, #84]	; (8001cb4 <main+0x4a4>)
 8001c5e:	2144      	movs	r1, #68	; 0x44
 8001c60:	54d1      	strb	r1, [r2, r3]
    	    	keyPad = NULL;
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <main+0x4a8>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	801a      	strh	r2, [r3, #0]
    	    	index++;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <main+0x4a0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <main+0x4a0>)
 8001c70:	6013      	str	r3, [r2, #0]
    	        break;
 8001c72:	e01c      	b.n	8001cae <main+0x49e>
    	    	hex_number[index] = 'E';
 8001c74:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <main+0x4a0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <main+0x4a4>)
 8001c7a:	2145      	movs	r1, #69	; 0x45
 8001c7c:	54d1      	strb	r1, [r2, r3]
    	    	keyPad = NULL;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <main+0x4a8>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	801a      	strh	r2, [r3, #0]
    	    	index++;
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <main+0x4a0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <main+0x4a0>)
 8001c8c:	6013      	str	r3, [r2, #0]
    	        break;
 8001c8e:	e00e      	b.n	8001cae <main+0x49e>
    	    	hex_number[index] = 'F';
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <main+0x4a0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <main+0x4a4>)
 8001c96:	2146      	movs	r1, #70	; 0x46
 8001c98:	54d1      	strb	r1, [r2, r3]
    	    	keyPad = NULL;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <main+0x4a8>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	801a      	strh	r2, [r3, #0]
    	    	index++;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <main+0x4a0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	4a02      	ldr	r2, [pc, #8]	; (8001cb0 <main+0x4a0>)
 8001ca8:	6013      	str	r3, [r2, #0]
    	        break;
 8001caa:	e000      	b.n	8001cae <main+0x49e>
    	    	break;
 8001cac:	bf00      	nop
    	LCD1602_print(input_text);
 8001cae:	e60b      	b.n	80018c8 <main+0xb8>
 8001cb0:	20000230 	.word	0x20000230
 8001cb4:	20000004 	.word	0x20000004
 8001cb8:	20000236 	.word	0x20000236

08001cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b094      	sub	sp, #80	; 0x50
 8001cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cc2:	f107 0320 	add.w	r3, r7, #32
 8001cc6:	2230      	movs	r2, #48	; 0x30
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 fad2 	bl	8003274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <SystemClock_Config+0xb4>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	4a21      	ldr	r2, [pc, #132]	; (8001d70 <SystemClock_Config+0xb4>)
 8001cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cee:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf0:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <SystemClock_Config+0xb4>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <SystemClock_Config+0xb8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <SystemClock_Config+0xb8>)
 8001d06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <SystemClock_Config+0xb8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d20:	2310      	movs	r3, #16
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d28:	f107 0320 	add.w	r3, r7, #32
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 fe01 	bl	8002934 <HAL_RCC_OscConfig>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001d38:	f000 f8d8 	bl	8001eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f001 f864 	bl	8002e24 <HAL_RCC_ClockConfig>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001d62:	f000 f8c3 	bl	8001eec <Error_Handler>
  }
}
 8001d66:	bf00      	nop
 8001d68:	3750      	adds	r7, #80	; 0x50
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40007000 	.word	0x40007000

08001d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <MX_GPIO_Init+0x144>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a49      	ldr	r2, [pc, #292]	; (8001ebc <MX_GPIO_Init+0x144>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <MX_GPIO_Init+0x144>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <MX_GPIO_Init+0x144>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a42      	ldr	r2, [pc, #264]	; (8001ebc <MX_GPIO_Init+0x144>)
 8001db4:	f043 0310 	orr.w	r3, r3, #16
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b40      	ldr	r3, [pc, #256]	; (8001ebc <MX_GPIO_Init+0x144>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	4b3c      	ldr	r3, [pc, #240]	; (8001ebc <MX_GPIO_Init+0x144>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a3b      	ldr	r2, [pc, #236]	; (8001ebc <MX_GPIO_Init+0x144>)
 8001dd0:	f043 0308 	orr.w	r3, r3, #8
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <MX_GPIO_Init+0x144>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001de2:	2200      	movs	r2, #0
 8001de4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001de8:	4835      	ldr	r0, [pc, #212]	; (8001ec0 <MX_GPIO_Init+0x148>)
 8001dea:	f000 fd71 	bl	80028d0 <HAL_GPIO_WritePin>
                          |RS_Pin|RW_Pin|E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin D7_Pin
                           RS_Pin RW_Pin E_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8001dee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001df2:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |RS_Pin|RW_Pin|E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	4619      	mov	r1, r3
 8001e06:	482e      	ldr	r0, [pc, #184]	; (8001ec0 <MX_GPIO_Init+0x148>)
 8001e08:	f000 fbc6 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW3_Pin SW4_Pin */
  GPIO_InitStruct.Pin = SW3_Pin|SW4_Pin;
 8001e0c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e16:	2301      	movs	r3, #1
 8001e18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4828      	ldr	r0, [pc, #160]	; (8001ec4 <MX_GPIO_Init+0x14c>)
 8001e22:	f000 fbb9 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY8_Pin KEY9_Pin KEY10_Pin KEY11_Pin
                           KEY12_Pin KEY13_Pin KEY14_Pin KEY15_Pin
                           KEY0_Pin KEY1_Pin KEY2_Pin KEY3_Pin
                           KEY4_Pin KEY5_Pin KEY6_Pin KEY7_Pin */
  GPIO_InitStruct.Pin = KEY8_Pin|KEY9_Pin|KEY10_Pin|KEY11_Pin
 8001e26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e2a:	60fb      	str	r3, [r7, #12]
                          |KEY12_Pin|KEY13_Pin|KEY14_Pin|KEY15_Pin
                          |KEY0_Pin|KEY1_Pin|KEY2_Pin|KEY3_Pin
                          |KEY4_Pin|KEY5_Pin|KEY6_Pin|KEY7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4822      	ldr	r0, [pc, #136]	; (8001ec8 <MX_GPIO_Init+0x150>)
 8001e3e:	f000 fbab 	bl	8002598 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	2006      	movs	r0, #6
 8001e48:	f000 fb6f 	bl	800252a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e4c:	2006      	movs	r0, #6
 8001e4e:	f000 fb88 	bl	8002562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	2007      	movs	r0, #7
 8001e58:	f000 fb67 	bl	800252a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e5c:	2007      	movs	r0, #7
 8001e5e:	f000 fb80 	bl	8002562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	2008      	movs	r0, #8
 8001e68:	f000 fb5f 	bl	800252a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001e6c:	2008      	movs	r0, #8
 8001e6e:	f000 fb78 	bl	8002562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	2009      	movs	r0, #9
 8001e78:	f000 fb57 	bl	800252a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001e7c:	2009      	movs	r0, #9
 8001e7e:	f000 fb70 	bl	8002562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	200a      	movs	r0, #10
 8001e88:	f000 fb4f 	bl	800252a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001e8c:	200a      	movs	r0, #10
 8001e8e:	f000 fb68 	bl	8002562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2017      	movs	r0, #23
 8001e98:	f000 fb47 	bl	800252a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e9c:	2017      	movs	r0, #23
 8001e9e:	f000 fb60 	bl	8002562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	2028      	movs	r0, #40	; 0x28
 8001ea8:	f000 fb3f 	bl	800252a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001eac:	2028      	movs	r0, #40	; 0x28
 8001eae:	f000 fb58 	bl	8002562 <HAL_NVIC_EnableIRQ>

}
 8001eb2:	bf00      	nop
 8001eb4:	3720      	adds	r7, #32
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020800 	.word	0x40020800
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40020c00 	.word	0x40020c00

08001ecc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
	keyPad = GPIO_Pin;
 8001ed6:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	8013      	strh	r3, [r2, #0]

}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	20000236 	.word	0x20000236

08001eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef0:	b672      	cpsid	i
}
 8001ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <Error_Handler+0x8>
	...

08001ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800

08001f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <NMI_Handler+0x4>

08001f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <HardFault_Handler+0x4>

08001f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <MemManage_Handler+0x4>

08001f5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <BusFault_Handler+0x4>

08001f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <UsageFault_Handler+0x4>

08001f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f94:	f000 f9aa 	bl	80022ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f000 fcaf 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8001fae:	2002      	movs	r0, #2
 8001fb0:	f000 fca8 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY2_Pin);
 8001fbc:	2004      	movs	r0, #4
 8001fbe:	f000 fca1 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY3_Pin);
 8001fca:	2008      	movs	r0, #8
 8001fcc:	f000 fc9a 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY4_Pin);
 8001fd8:	2010      	movs	r0, #16
 8001fda:	f000 fc93 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY5_Pin);
 8001fe6:	2020      	movs	r0, #32
 8001fe8:	f000 fc8c 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY6_Pin);
 8001fec:	2040      	movs	r0, #64	; 0x40
 8001fee:	f000 fc89 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY7_Pin);
 8001ff2:	2080      	movs	r0, #128	; 0x80
 8001ff4:	f000 fc86 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY8_Pin);
 8001ff8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ffc:	f000 fc82 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY9_Pin);
 8002000:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002004:	f000 fc7e 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}

0800200c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY10_Pin);
 8002010:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002014:	f000 fc76 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY11_Pin);
 8002018:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800201c:	f000 fc72 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY12_Pin);
 8002020:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002024:	f000 fc6e 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY13_Pin);
 8002028:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800202c:	f000 fc6a 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY14_Pin);
 8002030:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002034:	f000 fc66 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(KEY15_Pin);
 8002038:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800203c:	f000 fc62 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}

08002044 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
	return 1;
 8002048:	2301      	movs	r3, #1
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <_kill>:

int _kill(int pid, int sig)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800205e:	f001 f8df 	bl	8003220 <__errno>
 8002062:	4603      	mov	r3, r0
 8002064:	2216      	movs	r2, #22
 8002066:	601a      	str	r2, [r3, #0]
	return -1;
 8002068:	f04f 33ff 	mov.w	r3, #4294967295
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_exit>:

void _exit (int status)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800207c:	f04f 31ff 	mov.w	r1, #4294967295
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ffe7 	bl	8002054 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002086:	e7fe      	b.n	8002086 <_exit+0x12>

08002088 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	e00a      	b.n	80020b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800209a:	f3af 8000 	nop.w
 800209e:	4601      	mov	r1, r0
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	60ba      	str	r2, [r7, #8]
 80020a6:	b2ca      	uxtb	r2, r1
 80020a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3301      	adds	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	dbf0      	blt.n	800209a <_read+0x12>
	}

return len;
 80020b8:	687b      	ldr	r3, [r7, #4]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	e009      	b.n	80020e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	60ba      	str	r2, [r7, #8]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	dbf1      	blt.n	80020d4 <_write+0x12>
	}
	return len;
 80020f0:	687b      	ldr	r3, [r7, #4]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_close>:

int _close(int file)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
	return -1;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002122:	605a      	str	r2, [r3, #4]
	return 0;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <_isatty>:

int _isatty(int file)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
	return 1;
 800213a:	2301      	movs	r3, #1
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
	return 0;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <_sbrk+0x5c>)
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <_sbrk+0x60>)
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <_sbrk+0x64>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <_sbrk+0x64>)
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <_sbrk+0x68>)
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <_sbrk+0x64>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	429a      	cmp	r2, r3
 8002192:	d207      	bcs.n	80021a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002194:	f001 f844 	bl	8003220 <__errno>
 8002198:	4603      	mov	r3, r0
 800219a:	220c      	movs	r2, #12
 800219c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	e009      	b.n	80021b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <_sbrk+0x64>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <_sbrk+0x64>)
 80021b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b6:	68fb      	ldr	r3, [r7, #12]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20020000 	.word	0x20020000
 80021c4:	00000400 	.word	0x00000400
 80021c8:	20000238 	.word	0x20000238
 80021cc:	20000250 	.word	0x20000250

080021d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <SystemInit+0x20>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <SystemInit+0x20>)
 80021dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800222c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021f8:	480d      	ldr	r0, [pc, #52]	; (8002230 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021fa:	490e      	ldr	r1, [pc, #56]	; (8002234 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021fc:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002200:	e002      	b.n	8002208 <LoopCopyDataInit>

08002202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002206:	3304      	adds	r3, #4

08002208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800220c:	d3f9      	bcc.n	8002202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220e:	4a0b      	ldr	r2, [pc, #44]	; (800223c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002210:	4c0b      	ldr	r4, [pc, #44]	; (8002240 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002214:	e001      	b.n	800221a <LoopFillZerobss>

08002216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002218:	3204      	adds	r2, #4

0800221a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800221c:	d3fb      	bcc.n	8002216 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800221e:	f7ff ffd7 	bl	80021d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002222:	f001 f803 	bl	800322c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002226:	f7ff faf3 	bl	8001810 <main>
  bx  lr    
 800222a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800222c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002234:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002238:	080080cc 	.word	0x080080cc
  ldr r2, =_sbss
 800223c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002240:	20000250 	.word	0x20000250

08002244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002244:	e7fe      	b.n	8002244 <ADC_IRQHandler>
	...

08002248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800224c:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_Init+0x40>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0d      	ldr	r2, [pc, #52]	; (8002288 <HAL_Init+0x40>)
 8002252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_Init+0x40>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <HAL_Init+0x40>)
 800225e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_Init+0x40>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <HAL_Init+0x40>)
 800226a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002270:	2003      	movs	r0, #3
 8002272:	f000 f94f 	bl	8002514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002276:	200f      	movs	r0, #15
 8002278:	f000 f808 	bl	800228c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800227c:	f7ff fe3c 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023c00 	.word	0x40023c00

0800228c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_InitTick+0x54>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_InitTick+0x58>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f967 	bl	800257e <HAL_SYSTICK_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00e      	b.n	80022d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b0f      	cmp	r3, #15
 80022be:	d80a      	bhi.n	80022d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c0:	2200      	movs	r2, #0
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295
 80022c8:	f000 f92f 	bl	800252a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <HAL_InitTick+0x5c>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e000      	b.n	80022d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000014 	.word	0x20000014
 80022e4:	2000001c 	.word	0x2000001c
 80022e8:	20000018 	.word	0x20000018

080022ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_IncTick+0x20>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_IncTick+0x24>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <HAL_IncTick+0x24>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	2000001c 	.word	0x2000001c
 8002310:	2000023c 	.word	0x2000023c

08002314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return uwTick;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <HAL_GetTick+0x14>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	2000023c 	.word	0x2000023c

0800232c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002334:	f7ff ffee 	bl	8002314 <HAL_GetTick>
 8002338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d005      	beq.n	8002352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_Delay+0x44>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002352:	bf00      	nop
 8002354:	f7ff ffde 	bl	8002314 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	429a      	cmp	r2, r3
 8002362:	d8f7      	bhi.n	8002354 <HAL_Delay+0x28>
  {
  }
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000001c 	.word	0x2000001c

08002374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002390:	4013      	ands	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800239c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <__NVIC_GetPriorityGrouping+0x18>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	f003 0307 	and.w	r3, r3, #7
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	db0b      	blt.n	8002402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	4907      	ldr	r1, [pc, #28]	; (8002410 <__NVIC_EnableIRQ+0x38>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	2001      	movs	r0, #1
 80023fa:	fa00 f202 	lsl.w	r2, r0, r2
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000e100 	.word	0xe000e100

08002414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	6039      	str	r1, [r7, #0]
 800241e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002424:	2b00      	cmp	r3, #0
 8002426:	db0a      	blt.n	800243e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	b2da      	uxtb	r2, r3
 800242c:	490c      	ldr	r1, [pc, #48]	; (8002460 <__NVIC_SetPriority+0x4c>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	0112      	lsls	r2, r2, #4
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	440b      	add	r3, r1
 8002438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800243c:	e00a      	b.n	8002454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4908      	ldr	r1, [pc, #32]	; (8002464 <__NVIC_SetPriority+0x50>)
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	3b04      	subs	r3, #4
 800244c:	0112      	lsls	r2, r2, #4
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	440b      	add	r3, r1
 8002452:	761a      	strb	r2, [r3, #24]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000e100 	.word	0xe000e100
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f1c3 0307 	rsb	r3, r3, #7
 8002482:	2b04      	cmp	r3, #4
 8002484:	bf28      	it	cs
 8002486:	2304      	movcs	r3, #4
 8002488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3304      	adds	r3, #4
 800248e:	2b06      	cmp	r3, #6
 8002490:	d902      	bls.n	8002498 <NVIC_EncodePriority+0x30>
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3b03      	subs	r3, #3
 8002496:	e000      	b.n	800249a <NVIC_EncodePriority+0x32>
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	f04f 32ff 	mov.w	r2, #4294967295
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43da      	mvns	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	401a      	ands	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b0:	f04f 31ff 	mov.w	r1, #4294967295
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	43d9      	mvns	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	4313      	orrs	r3, r2
         );
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3724      	adds	r7, #36	; 0x24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e0:	d301      	bcc.n	80024e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024e2:	2301      	movs	r3, #1
 80024e4:	e00f      	b.n	8002506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024e6:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <SysTick_Config+0x40>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ee:	210f      	movs	r1, #15
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295
 80024f4:	f7ff ff8e 	bl	8002414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <SysTick_Config+0x40>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024fe:	4b04      	ldr	r3, [pc, #16]	; (8002510 <SysTick_Config+0x40>)
 8002500:	2207      	movs	r2, #7
 8002502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	e000e010 	.word	0xe000e010

08002514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff29 	bl	8002374 <__NVIC_SetPriorityGrouping>
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	4603      	mov	r3, r0
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800253c:	f7ff ff3e 	bl	80023bc <__NVIC_GetPriorityGrouping>
 8002540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	6978      	ldr	r0, [r7, #20]
 8002548:	f7ff ff8e 	bl	8002468 <NVIC_EncodePriority>
 800254c:	4602      	mov	r2, r0
 800254e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff5d 	bl	8002414 <__NVIC_SetPriority>
}
 800255a:	bf00      	nop
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff31 	bl	80023d8 <__NVIC_EnableIRQ>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ffa2 	bl	80024d0 <SysTick_Config>
 800258c:	4603      	mov	r3, r0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	e16b      	b.n	800288c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025b4:	2201      	movs	r2, #1
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4013      	ands	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	f040 815a 	bne.w	8002886 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d005      	beq.n	80025ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d130      	bne.n	800264c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	2203      	movs	r2, #3
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002620:	2201      	movs	r2, #1
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 0201 	and.w	r2, r3, #1
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b03      	cmp	r3, #3
 8002656:	d017      	beq.n	8002688 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	2203      	movs	r2, #3
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d123      	bne.n	80026dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	08da      	lsrs	r2, r3, #3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3208      	adds	r2, #8
 800269c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	220f      	movs	r2, #15
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	08da      	lsrs	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3208      	adds	r2, #8
 80026d6:	69b9      	ldr	r1, [r7, #24]
 80026d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0203 	and.w	r2, r3, #3
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80b4 	beq.w	8002886 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b60      	ldr	r3, [pc, #384]	; (80028a4 <HAL_GPIO_Init+0x30c>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	4a5f      	ldr	r2, [pc, #380]	; (80028a4 <HAL_GPIO_Init+0x30c>)
 8002728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800272c:	6453      	str	r3, [r2, #68]	; 0x44
 800272e:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <HAL_GPIO_Init+0x30c>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800273a:	4a5b      	ldr	r2, [pc, #364]	; (80028a8 <HAL_GPIO_Init+0x310>)
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	089b      	lsrs	r3, r3, #2
 8002740:	3302      	adds	r3, #2
 8002742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	220f      	movs	r2, #15
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a52      	ldr	r2, [pc, #328]	; (80028ac <HAL_GPIO_Init+0x314>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d02b      	beq.n	80027be <HAL_GPIO_Init+0x226>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a51      	ldr	r2, [pc, #324]	; (80028b0 <HAL_GPIO_Init+0x318>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d025      	beq.n	80027ba <HAL_GPIO_Init+0x222>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a50      	ldr	r2, [pc, #320]	; (80028b4 <HAL_GPIO_Init+0x31c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d01f      	beq.n	80027b6 <HAL_GPIO_Init+0x21e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a4f      	ldr	r2, [pc, #316]	; (80028b8 <HAL_GPIO_Init+0x320>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d019      	beq.n	80027b2 <HAL_GPIO_Init+0x21a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a4e      	ldr	r2, [pc, #312]	; (80028bc <HAL_GPIO_Init+0x324>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d013      	beq.n	80027ae <HAL_GPIO_Init+0x216>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a4d      	ldr	r2, [pc, #308]	; (80028c0 <HAL_GPIO_Init+0x328>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d00d      	beq.n	80027aa <HAL_GPIO_Init+0x212>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a4c      	ldr	r2, [pc, #304]	; (80028c4 <HAL_GPIO_Init+0x32c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d007      	beq.n	80027a6 <HAL_GPIO_Init+0x20e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a4b      	ldr	r2, [pc, #300]	; (80028c8 <HAL_GPIO_Init+0x330>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d101      	bne.n	80027a2 <HAL_GPIO_Init+0x20a>
 800279e:	2307      	movs	r3, #7
 80027a0:	e00e      	b.n	80027c0 <HAL_GPIO_Init+0x228>
 80027a2:	2308      	movs	r3, #8
 80027a4:	e00c      	b.n	80027c0 <HAL_GPIO_Init+0x228>
 80027a6:	2306      	movs	r3, #6
 80027a8:	e00a      	b.n	80027c0 <HAL_GPIO_Init+0x228>
 80027aa:	2305      	movs	r3, #5
 80027ac:	e008      	b.n	80027c0 <HAL_GPIO_Init+0x228>
 80027ae:	2304      	movs	r3, #4
 80027b0:	e006      	b.n	80027c0 <HAL_GPIO_Init+0x228>
 80027b2:	2303      	movs	r3, #3
 80027b4:	e004      	b.n	80027c0 <HAL_GPIO_Init+0x228>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e002      	b.n	80027c0 <HAL_GPIO_Init+0x228>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_GPIO_Init+0x228>
 80027be:	2300      	movs	r3, #0
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	f002 0203 	and.w	r2, r2, #3
 80027c6:	0092      	lsls	r2, r2, #2
 80027c8:	4093      	lsls	r3, r2
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d0:	4935      	ldr	r1, [pc, #212]	; (80028a8 <HAL_GPIO_Init+0x310>)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	3302      	adds	r3, #2
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027de:	4b3b      	ldr	r3, [pc, #236]	; (80028cc <HAL_GPIO_Init+0x334>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002802:	4a32      	ldr	r2, [pc, #200]	; (80028cc <HAL_GPIO_Init+0x334>)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002808:	4b30      	ldr	r3, [pc, #192]	; (80028cc <HAL_GPIO_Init+0x334>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800282c:	4a27      	ldr	r2, [pc, #156]	; (80028cc <HAL_GPIO_Init+0x334>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002832:	4b26      	ldr	r3, [pc, #152]	; (80028cc <HAL_GPIO_Init+0x334>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002856:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_GPIO_Init+0x334>)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_GPIO_Init+0x334>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002880:	4a12      	ldr	r2, [pc, #72]	; (80028cc <HAL_GPIO_Init+0x334>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3301      	adds	r3, #1
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b0f      	cmp	r3, #15
 8002890:	f67f ae90 	bls.w	80025b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3724      	adds	r7, #36	; 0x24
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40013800 	.word	0x40013800
 80028ac:	40020000 	.word	0x40020000
 80028b0:	40020400 	.word	0x40020400
 80028b4:	40020800 	.word	0x40020800
 80028b8:	40020c00 	.word	0x40020c00
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40021400 	.word	0x40021400
 80028c4:	40021800 	.word	0x40021800
 80028c8:	40021c00 	.word	0x40021c00
 80028cc:	40013c00 	.word	0x40013c00

080028d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
 80028dc:	4613      	mov	r3, r2
 80028de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e0:	787b      	ldrb	r3, [r7, #1]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028ec:	e003      	b.n	80028f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ee:	887b      	ldrh	r3, [r7, #2]
 80028f0:	041a      	lsls	r2, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	619a      	str	r2, [r3, #24]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d006      	beq.n	8002928 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800291a:	4a05      	ldr	r2, [pc, #20]	; (8002930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fad2 	bl	8001ecc <HAL_GPIO_EXTI_Callback>
  }
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40013c00 	.word	0x40013c00

08002934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e267      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d075      	beq.n	8002a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002952:	4b88      	ldr	r3, [pc, #544]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b04      	cmp	r3, #4
 800295c:	d00c      	beq.n	8002978 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295e:	4b85      	ldr	r3, [pc, #532]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002966:	2b08      	cmp	r3, #8
 8002968:	d112      	bne.n	8002990 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296a:	4b82      	ldr	r3, [pc, #520]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002976:	d10b      	bne.n	8002990 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002978:	4b7e      	ldr	r3, [pc, #504]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d05b      	beq.n	8002a3c <HAL_RCC_OscConfig+0x108>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d157      	bne.n	8002a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e242      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002998:	d106      	bne.n	80029a8 <HAL_RCC_OscConfig+0x74>
 800299a:	4b76      	ldr	r3, [pc, #472]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a75      	ldr	r2, [pc, #468]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e01d      	b.n	80029e4 <HAL_RCC_OscConfig+0xb0>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x98>
 80029b2:	4b70      	ldr	r3, [pc, #448]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a6f      	ldr	r2, [pc, #444]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	4b6d      	ldr	r3, [pc, #436]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a6c      	ldr	r2, [pc, #432]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0xb0>
 80029cc:	4b69      	ldr	r3, [pc, #420]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a68      	ldr	r2, [pc, #416]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b66      	ldr	r3, [pc, #408]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a65      	ldr	r2, [pc, #404]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7ff fc92 	bl	8002314 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f4:	f7ff fc8e 	bl	8002314 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e207      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	4b5b      	ldr	r3, [pc, #364]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0xc0>
 8002a12:	e014      	b.n	8002a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7ff fc7e 	bl	8002314 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7ff fc7a 	bl	8002314 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e1f3      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0xe8>
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d063      	beq.n	8002b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a4a:	4b4a      	ldr	r3, [pc, #296]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a56:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d11c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a62:	4b44      	ldr	r3, [pc, #272]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d116      	bne.n	8002a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_RCC_OscConfig+0x152>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e1c7      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4937      	ldr	r1, [pc, #220]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	e03a      	b.n	8002b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d020      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa4:	4b34      	ldr	r3, [pc, #208]	; (8002b78 <HAL_RCC_OscConfig+0x244>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7ff fc33 	bl	8002314 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab2:	f7ff fc2f 	bl	8002314 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e1a8      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	4b2b      	ldr	r3, [pc, #172]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad0:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4925      	ldr	r1, [pc, #148]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
 8002ae4:	e015      	b.n	8002b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae6:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <HAL_RCC_OscConfig+0x244>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7ff fc12 	bl	8002314 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af4:	f7ff fc0e 	bl	8002314 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e187      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d036      	beq.n	8002b8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d016      	beq.n	8002b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b26:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <HAL_RCC_OscConfig+0x248>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7ff fbf2 	bl	8002314 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b34:	f7ff fbee 	bl	8002314 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e167      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x200>
 8002b52:	e01b      	b.n	8002b8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <HAL_RCC_OscConfig+0x248>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5a:	f7ff fbdb 	bl	8002314 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b60:	e00e      	b.n	8002b80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b62:	f7ff fbd7 	bl	8002314 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d907      	bls.n	8002b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e150      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
 8002b74:	40023800 	.word	0x40023800
 8002b78:	42470000 	.word	0x42470000
 8002b7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b80:	4b88      	ldr	r3, [pc, #544]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1ea      	bne.n	8002b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8097 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9e:	4b81      	ldr	r3, [pc, #516]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	4b7d      	ldr	r3, [pc, #500]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a7c      	ldr	r2, [pc, #496]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b7a      	ldr	r3, [pc, #488]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bca:	4b77      	ldr	r3, [pc, #476]	; (8002da8 <HAL_RCC_OscConfig+0x474>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d118      	bne.n	8002c08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bd6:	4b74      	ldr	r3, [pc, #464]	; (8002da8 <HAL_RCC_OscConfig+0x474>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a73      	ldr	r2, [pc, #460]	; (8002da8 <HAL_RCC_OscConfig+0x474>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be2:	f7ff fb97 	bl	8002314 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bea:	f7ff fb93 	bl	8002314 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e10c      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfc:	4b6a      	ldr	r3, [pc, #424]	; (8002da8 <HAL_RCC_OscConfig+0x474>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x2ea>
 8002c10:	4b64      	ldr	r3, [pc, #400]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	4a63      	ldr	r2, [pc, #396]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1c:	e01c      	b.n	8002c58 <HAL_RCC_OscConfig+0x324>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x30c>
 8002c26:	4b5f      	ldr	r3, [pc, #380]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	4a5e      	ldr	r2, [pc, #376]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	f043 0304 	orr.w	r3, r3, #4
 8002c30:	6713      	str	r3, [r2, #112]	; 0x70
 8002c32:	4b5c      	ldr	r3, [pc, #368]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a5b      	ldr	r2, [pc, #364]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0x324>
 8002c40:	4b58      	ldr	r3, [pc, #352]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	4a57      	ldr	r2, [pc, #348]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c46:	f023 0301 	bic.w	r3, r3, #1
 8002c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4c:	4b55      	ldr	r3, [pc, #340]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	4a54      	ldr	r2, [pc, #336]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c52:	f023 0304 	bic.w	r3, r3, #4
 8002c56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7ff fb58 	bl	8002314 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7ff fb54 	bl	8002314 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0cb      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7e:	4b49      	ldr	r3, [pc, #292]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0ee      	beq.n	8002c68 <HAL_RCC_OscConfig+0x334>
 8002c8a:	e014      	b.n	8002cb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8c:	f7ff fb42 	bl	8002314 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7ff fb3e 	bl	8002314 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0b5      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002caa:	4b3e      	ldr	r3, [pc, #248]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1ee      	bne.n	8002c94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d105      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cbc:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	4a38      	ldr	r2, [pc, #224]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80a1 	beq.w	8002e14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cd2:	4b34      	ldr	r3, [pc, #208]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d05c      	beq.n	8002d98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d141      	bne.n	8002d6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce6:	4b31      	ldr	r3, [pc, #196]	; (8002dac <HAL_RCC_OscConfig+0x478>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7ff fb12 	bl	8002314 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7ff fb0e 	bl	8002314 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e087      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	019b      	lsls	r3, r3, #6
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	085b      	lsrs	r3, r3, #1
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	491b      	ldr	r1, [pc, #108]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <HAL_RCC_OscConfig+0x478>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7ff fae7 	bl	8002314 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4a:	f7ff fae3 	bl	8002314 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e05c      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x416>
 8002d68:	e054      	b.n	8002e14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_RCC_OscConfig+0x478>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7ff fad0 	bl	8002314 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d78:	f7ff facc 	bl	8002314 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e045      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x444>
 8002d96:	e03d      	b.n	8002e14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d107      	bne.n	8002db0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e038      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40007000 	.word	0x40007000
 8002dac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_RCC_OscConfig+0x4ec>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d028      	beq.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d121      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d11a      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002de0:	4013      	ands	r3, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002de6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d111      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df6:	085b      	lsrs	r3, r3, #1
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800

08002e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0cc      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e38:	4b68      	ldr	r3, [pc, #416]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d90c      	bls.n	8002e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b65      	ldr	r3, [pc, #404]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b63      	ldr	r3, [pc, #396]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0b8      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d020      	beq.n	8002eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e78:	4b59      	ldr	r3, [pc, #356]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	4a58      	ldr	r2, [pc, #352]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e90:	4b53      	ldr	r3, [pc, #332]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4a52      	ldr	r2, [pc, #328]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e9c:	4b50      	ldr	r3, [pc, #320]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	494d      	ldr	r1, [pc, #308]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d044      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec2:	4b47      	ldr	r3, [pc, #284]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d119      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e07f      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee2:	4b3f      	ldr	r3, [pc, #252]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e06f      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef2:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e067      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f02:	4b37      	ldr	r3, [pc, #220]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f023 0203 	bic.w	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4934      	ldr	r1, [pc, #208]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f14:	f7ff f9fe 	bl	8002314 <HAL_GetTick>
 8002f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f1c:	f7ff f9fa 	bl	8002314 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e04f      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 020c 	and.w	r2, r3, #12
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d1eb      	bne.n	8002f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f44:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d20c      	bcs.n	8002f6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b20      	ldr	r3, [pc, #128]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e032      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f78:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4916      	ldr	r1, [pc, #88]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f96:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	490e      	ldr	r1, [pc, #56]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002faa:	f000 f821 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	490a      	ldr	r1, [pc, #40]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002fbc:	5ccb      	ldrb	r3, [r1, r3]
 8002fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc2:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff f95e 	bl	800228c <HAL_InitTick>

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40023c00 	.word	0x40023c00
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	08007bf4 	.word	0x08007bf4
 8002fe8:	20000014 	.word	0x20000014
 8002fec:	20000018 	.word	0x20000018

08002ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff4:	b090      	sub	sp, #64	; 0x40
 8002ff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003000:	2300      	movs	r3, #0
 8003002:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003008:	4b59      	ldr	r3, [pc, #356]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b08      	cmp	r3, #8
 8003012:	d00d      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x40>
 8003014:	2b08      	cmp	r3, #8
 8003016:	f200 80a1 	bhi.w	800315c <HAL_RCC_GetSysClockFreq+0x16c>
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x34>
 800301e:	2b04      	cmp	r3, #4
 8003020:	d003      	beq.n	800302a <HAL_RCC_GetSysClockFreq+0x3a>
 8003022:	e09b      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003024:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_RCC_GetSysClockFreq+0x184>)
 8003026:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003028:	e09b      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800302a:	4b53      	ldr	r3, [pc, #332]	; (8003178 <HAL_RCC_GetSysClockFreq+0x188>)
 800302c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800302e:	e098      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003030:	4b4f      	ldr	r3, [pc, #316]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003038:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800303a:	4b4d      	ldr	r3, [pc, #308]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d028      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003046:	4b4a      	ldr	r3, [pc, #296]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	099b      	lsrs	r3, r3, #6
 800304c:	2200      	movs	r2, #0
 800304e:	623b      	str	r3, [r7, #32]
 8003050:	627a      	str	r2, [r7, #36]	; 0x24
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003058:	2100      	movs	r1, #0
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_RCC_GetSysClockFreq+0x188>)
 800305c:	fb03 f201 	mul.w	r2, r3, r1
 8003060:	2300      	movs	r3, #0
 8003062:	fb00 f303 	mul.w	r3, r0, r3
 8003066:	4413      	add	r3, r2
 8003068:	4a43      	ldr	r2, [pc, #268]	; (8003178 <HAL_RCC_GetSysClockFreq+0x188>)
 800306a:	fba0 1202 	umull	r1, r2, r0, r2
 800306e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003070:	460a      	mov	r2, r1
 8003072:	62ba      	str	r2, [r7, #40]	; 0x28
 8003074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003076:	4413      	add	r3, r2
 8003078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800307a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307c:	2200      	movs	r2, #0
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	61fa      	str	r2, [r7, #28]
 8003082:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003086:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800308a:	f7fd fdfd 	bl	8000c88 <__aeabi_uldivmod>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4613      	mov	r3, r2
 8003094:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003096:	e053      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003098:	4b35      	ldr	r3, [pc, #212]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	099b      	lsrs	r3, r3, #6
 800309e:	2200      	movs	r2, #0
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	617a      	str	r2, [r7, #20]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030aa:	f04f 0b00 	mov.w	fp, #0
 80030ae:	4652      	mov	r2, sl
 80030b0:	465b      	mov	r3, fp
 80030b2:	f04f 0000 	mov.w	r0, #0
 80030b6:	f04f 0100 	mov.w	r1, #0
 80030ba:	0159      	lsls	r1, r3, #5
 80030bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c0:	0150      	lsls	r0, r2, #5
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	ebb2 080a 	subs.w	r8, r2, sl
 80030ca:	eb63 090b 	sbc.w	r9, r3, fp
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030e2:	ebb2 0408 	subs.w	r4, r2, r8
 80030e6:	eb63 0509 	sbc.w	r5, r3, r9
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	00eb      	lsls	r3, r5, #3
 80030f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030f8:	00e2      	lsls	r2, r4, #3
 80030fa:	4614      	mov	r4, r2
 80030fc:	461d      	mov	r5, r3
 80030fe:	eb14 030a 	adds.w	r3, r4, sl
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	eb45 030b 	adc.w	r3, r5, fp
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003116:	4629      	mov	r1, r5
 8003118:	028b      	lsls	r3, r1, #10
 800311a:	4621      	mov	r1, r4
 800311c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003120:	4621      	mov	r1, r4
 8003122:	028a      	lsls	r2, r1, #10
 8003124:	4610      	mov	r0, r2
 8003126:	4619      	mov	r1, r3
 8003128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312a:	2200      	movs	r2, #0
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	60fa      	str	r2, [r7, #12]
 8003130:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003134:	f7fd fda8 	bl	8000c88 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4613      	mov	r3, r2
 800313e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	0c1b      	lsrs	r3, r3, #16
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	3301      	adds	r3, #1
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800315a:	e002      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetSysClockFreq+0x184>)
 800315e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003164:	4618      	mov	r0, r3
 8003166:	3740      	adds	r7, #64	; 0x40
 8003168:	46bd      	mov	sp, r7
 800316a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	00f42400 	.word	0x00f42400
 8003178:	017d7840 	.word	0x017d7840

0800317c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003180:	4b03      	ldr	r3, [pc, #12]	; (8003190 <HAL_RCC_GetHCLKFreq+0x14>)
 8003182:	681b      	ldr	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000014 	.word	0x20000014

08003194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003198:	f7ff fff0 	bl	800317c <HAL_RCC_GetHCLKFreq>
 800319c:	4602      	mov	r2, r0
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	0a9b      	lsrs	r3, r3, #10
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	4903      	ldr	r1, [pc, #12]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031aa:	5ccb      	ldrb	r3, [r1, r3]
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40023800 	.word	0x40023800
 80031b8:	08007c04 	.word	0x08007c04

080031bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	220f      	movs	r2, #15
 80031ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031cc:	4b12      	ldr	r3, [pc, #72]	; (8003218 <HAL_RCC_GetClockConfig+0x5c>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 0203 	and.w	r2, r3, #3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <HAL_RCC_GetClockConfig+0x5c>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <HAL_RCC_GetClockConfig+0x5c>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031f0:	4b09      	ldr	r3, [pc, #36]	; (8003218 <HAL_RCC_GetClockConfig+0x5c>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	08db      	lsrs	r3, r3, #3
 80031f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031fe:	4b07      	ldr	r3, [pc, #28]	; (800321c <HAL_RCC_GetClockConfig+0x60>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0207 	and.w	r2, r3, #7
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	601a      	str	r2, [r3, #0]
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800
 800321c:	40023c00 	.word	0x40023c00

08003220 <__errno>:
 8003220:	4b01      	ldr	r3, [pc, #4]	; (8003228 <__errno+0x8>)
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000020 	.word	0x20000020

0800322c <__libc_init_array>:
 800322c:	b570      	push	{r4, r5, r6, lr}
 800322e:	4d0d      	ldr	r5, [pc, #52]	; (8003264 <__libc_init_array+0x38>)
 8003230:	4c0d      	ldr	r4, [pc, #52]	; (8003268 <__libc_init_array+0x3c>)
 8003232:	1b64      	subs	r4, r4, r5
 8003234:	10a4      	asrs	r4, r4, #2
 8003236:	2600      	movs	r6, #0
 8003238:	42a6      	cmp	r6, r4
 800323a:	d109      	bne.n	8003250 <__libc_init_array+0x24>
 800323c:	4d0b      	ldr	r5, [pc, #44]	; (800326c <__libc_init_array+0x40>)
 800323e:	4c0c      	ldr	r4, [pc, #48]	; (8003270 <__libc_init_array+0x44>)
 8003240:	f004 fc92 	bl	8007b68 <_init>
 8003244:	1b64      	subs	r4, r4, r5
 8003246:	10a4      	asrs	r4, r4, #2
 8003248:	2600      	movs	r6, #0
 800324a:	42a6      	cmp	r6, r4
 800324c:	d105      	bne.n	800325a <__libc_init_array+0x2e>
 800324e:	bd70      	pop	{r4, r5, r6, pc}
 8003250:	f855 3b04 	ldr.w	r3, [r5], #4
 8003254:	4798      	blx	r3
 8003256:	3601      	adds	r6, #1
 8003258:	e7ee      	b.n	8003238 <__libc_init_array+0xc>
 800325a:	f855 3b04 	ldr.w	r3, [r5], #4
 800325e:	4798      	blx	r3
 8003260:	3601      	adds	r6, #1
 8003262:	e7f2      	b.n	800324a <__libc_init_array+0x1e>
 8003264:	080080c4 	.word	0x080080c4
 8003268:	080080c4 	.word	0x080080c4
 800326c:	080080c4 	.word	0x080080c4
 8003270:	080080c8 	.word	0x080080c8

08003274 <memset>:
 8003274:	4402      	add	r2, r0
 8003276:	4603      	mov	r3, r0
 8003278:	4293      	cmp	r3, r2
 800327a:	d100      	bne.n	800327e <memset+0xa>
 800327c:	4770      	bx	lr
 800327e:	f803 1b01 	strb.w	r1, [r3], #1
 8003282:	e7f9      	b.n	8003278 <memset+0x4>

08003284 <__cvt>:
 8003284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003288:	ec55 4b10 	vmov	r4, r5, d0
 800328c:	2d00      	cmp	r5, #0
 800328e:	460e      	mov	r6, r1
 8003290:	4619      	mov	r1, r3
 8003292:	462b      	mov	r3, r5
 8003294:	bfbb      	ittet	lt
 8003296:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800329a:	461d      	movlt	r5, r3
 800329c:	2300      	movge	r3, #0
 800329e:	232d      	movlt	r3, #45	; 0x2d
 80032a0:	700b      	strb	r3, [r1, #0]
 80032a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80032a8:	4691      	mov	r9, r2
 80032aa:	f023 0820 	bic.w	r8, r3, #32
 80032ae:	bfbc      	itt	lt
 80032b0:	4622      	movlt	r2, r4
 80032b2:	4614      	movlt	r4, r2
 80032b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032b8:	d005      	beq.n	80032c6 <__cvt+0x42>
 80032ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80032be:	d100      	bne.n	80032c2 <__cvt+0x3e>
 80032c0:	3601      	adds	r6, #1
 80032c2:	2102      	movs	r1, #2
 80032c4:	e000      	b.n	80032c8 <__cvt+0x44>
 80032c6:	2103      	movs	r1, #3
 80032c8:	ab03      	add	r3, sp, #12
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	ab02      	add	r3, sp, #8
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	ec45 4b10 	vmov	d0, r4, r5
 80032d4:	4653      	mov	r3, sl
 80032d6:	4632      	mov	r2, r6
 80032d8:	f001 fdae 	bl	8004e38 <_dtoa_r>
 80032dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80032e0:	4607      	mov	r7, r0
 80032e2:	d102      	bne.n	80032ea <__cvt+0x66>
 80032e4:	f019 0f01 	tst.w	r9, #1
 80032e8:	d022      	beq.n	8003330 <__cvt+0xac>
 80032ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032ee:	eb07 0906 	add.w	r9, r7, r6
 80032f2:	d110      	bne.n	8003316 <__cvt+0x92>
 80032f4:	783b      	ldrb	r3, [r7, #0]
 80032f6:	2b30      	cmp	r3, #48	; 0x30
 80032f8:	d10a      	bne.n	8003310 <__cvt+0x8c>
 80032fa:	2200      	movs	r2, #0
 80032fc:	2300      	movs	r3, #0
 80032fe:	4620      	mov	r0, r4
 8003300:	4629      	mov	r1, r5
 8003302:	f7fd fbe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8003306:	b918      	cbnz	r0, 8003310 <__cvt+0x8c>
 8003308:	f1c6 0601 	rsb	r6, r6, #1
 800330c:	f8ca 6000 	str.w	r6, [sl]
 8003310:	f8da 3000 	ldr.w	r3, [sl]
 8003314:	4499      	add	r9, r3
 8003316:	2200      	movs	r2, #0
 8003318:	2300      	movs	r3, #0
 800331a:	4620      	mov	r0, r4
 800331c:	4629      	mov	r1, r5
 800331e:	f7fd fbd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8003322:	b108      	cbz	r0, 8003328 <__cvt+0xa4>
 8003324:	f8cd 900c 	str.w	r9, [sp, #12]
 8003328:	2230      	movs	r2, #48	; 0x30
 800332a:	9b03      	ldr	r3, [sp, #12]
 800332c:	454b      	cmp	r3, r9
 800332e:	d307      	bcc.n	8003340 <__cvt+0xbc>
 8003330:	9b03      	ldr	r3, [sp, #12]
 8003332:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003334:	1bdb      	subs	r3, r3, r7
 8003336:	4638      	mov	r0, r7
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	b004      	add	sp, #16
 800333c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003340:	1c59      	adds	r1, r3, #1
 8003342:	9103      	str	r1, [sp, #12]
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e7f0      	b.n	800332a <__cvt+0xa6>

08003348 <__exponent>:
 8003348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800334a:	4603      	mov	r3, r0
 800334c:	2900      	cmp	r1, #0
 800334e:	bfb8      	it	lt
 8003350:	4249      	neglt	r1, r1
 8003352:	f803 2b02 	strb.w	r2, [r3], #2
 8003356:	bfb4      	ite	lt
 8003358:	222d      	movlt	r2, #45	; 0x2d
 800335a:	222b      	movge	r2, #43	; 0x2b
 800335c:	2909      	cmp	r1, #9
 800335e:	7042      	strb	r2, [r0, #1]
 8003360:	dd2a      	ble.n	80033b8 <__exponent+0x70>
 8003362:	f10d 0407 	add.w	r4, sp, #7
 8003366:	46a4      	mov	ip, r4
 8003368:	270a      	movs	r7, #10
 800336a:	46a6      	mov	lr, r4
 800336c:	460a      	mov	r2, r1
 800336e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003372:	fb07 1516 	mls	r5, r7, r6, r1
 8003376:	3530      	adds	r5, #48	; 0x30
 8003378:	2a63      	cmp	r2, #99	; 0x63
 800337a:	f104 34ff 	add.w	r4, r4, #4294967295
 800337e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003382:	4631      	mov	r1, r6
 8003384:	dcf1      	bgt.n	800336a <__exponent+0x22>
 8003386:	3130      	adds	r1, #48	; 0x30
 8003388:	f1ae 0502 	sub.w	r5, lr, #2
 800338c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003390:	1c44      	adds	r4, r0, #1
 8003392:	4629      	mov	r1, r5
 8003394:	4561      	cmp	r1, ip
 8003396:	d30a      	bcc.n	80033ae <__exponent+0x66>
 8003398:	f10d 0209 	add.w	r2, sp, #9
 800339c:	eba2 020e 	sub.w	r2, r2, lr
 80033a0:	4565      	cmp	r5, ip
 80033a2:	bf88      	it	hi
 80033a4:	2200      	movhi	r2, #0
 80033a6:	4413      	add	r3, r2
 80033a8:	1a18      	subs	r0, r3, r0
 80033aa:	b003      	add	sp, #12
 80033ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80033b6:	e7ed      	b.n	8003394 <__exponent+0x4c>
 80033b8:	2330      	movs	r3, #48	; 0x30
 80033ba:	3130      	adds	r1, #48	; 0x30
 80033bc:	7083      	strb	r3, [r0, #2]
 80033be:	70c1      	strb	r1, [r0, #3]
 80033c0:	1d03      	adds	r3, r0, #4
 80033c2:	e7f1      	b.n	80033a8 <__exponent+0x60>

080033c4 <_printf_float>:
 80033c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c8:	ed2d 8b02 	vpush	{d8}
 80033cc:	b08d      	sub	sp, #52	; 0x34
 80033ce:	460c      	mov	r4, r1
 80033d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80033d4:	4616      	mov	r6, r2
 80033d6:	461f      	mov	r7, r3
 80033d8:	4605      	mov	r5, r0
 80033da:	f002 ff7f 	bl	80062dc <_localeconv_r>
 80033de:	f8d0 a000 	ldr.w	sl, [r0]
 80033e2:	4650      	mov	r0, sl
 80033e4:	f7fc fef4 	bl	80001d0 <strlen>
 80033e8:	2300      	movs	r3, #0
 80033ea:	930a      	str	r3, [sp, #40]	; 0x28
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	9305      	str	r3, [sp, #20]
 80033f0:	f8d8 3000 	ldr.w	r3, [r8]
 80033f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80033f8:	3307      	adds	r3, #7
 80033fa:	f023 0307 	bic.w	r3, r3, #7
 80033fe:	f103 0208 	add.w	r2, r3, #8
 8003402:	f8c8 2000 	str.w	r2, [r8]
 8003406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800340e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003412:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003416:	9307      	str	r3, [sp, #28]
 8003418:	f8cd 8018 	str.w	r8, [sp, #24]
 800341c:	ee08 0a10 	vmov	s16, r0
 8003420:	4b9f      	ldr	r3, [pc, #636]	; (80036a0 <_printf_float+0x2dc>)
 8003422:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003426:	f04f 32ff 	mov.w	r2, #4294967295
 800342a:	f7fd fb7f 	bl	8000b2c <__aeabi_dcmpun>
 800342e:	bb88      	cbnz	r0, 8003494 <_printf_float+0xd0>
 8003430:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003434:	4b9a      	ldr	r3, [pc, #616]	; (80036a0 <_printf_float+0x2dc>)
 8003436:	f04f 32ff 	mov.w	r2, #4294967295
 800343a:	f7fd fb59 	bl	8000af0 <__aeabi_dcmple>
 800343e:	bb48      	cbnz	r0, 8003494 <_printf_float+0xd0>
 8003440:	2200      	movs	r2, #0
 8003442:	2300      	movs	r3, #0
 8003444:	4640      	mov	r0, r8
 8003446:	4649      	mov	r1, r9
 8003448:	f7fd fb48 	bl	8000adc <__aeabi_dcmplt>
 800344c:	b110      	cbz	r0, 8003454 <_printf_float+0x90>
 800344e:	232d      	movs	r3, #45	; 0x2d
 8003450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003454:	4b93      	ldr	r3, [pc, #588]	; (80036a4 <_printf_float+0x2e0>)
 8003456:	4894      	ldr	r0, [pc, #592]	; (80036a8 <_printf_float+0x2e4>)
 8003458:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800345c:	bf94      	ite	ls
 800345e:	4698      	movls	r8, r3
 8003460:	4680      	movhi	r8, r0
 8003462:	2303      	movs	r3, #3
 8003464:	6123      	str	r3, [r4, #16]
 8003466:	9b05      	ldr	r3, [sp, #20]
 8003468:	f023 0204 	bic.w	r2, r3, #4
 800346c:	6022      	str	r2, [r4, #0]
 800346e:	f04f 0900 	mov.w	r9, #0
 8003472:	9700      	str	r7, [sp, #0]
 8003474:	4633      	mov	r3, r6
 8003476:	aa0b      	add	r2, sp, #44	; 0x2c
 8003478:	4621      	mov	r1, r4
 800347a:	4628      	mov	r0, r5
 800347c:	f000 f9d8 	bl	8003830 <_printf_common>
 8003480:	3001      	adds	r0, #1
 8003482:	f040 8090 	bne.w	80035a6 <_printf_float+0x1e2>
 8003486:	f04f 30ff 	mov.w	r0, #4294967295
 800348a:	b00d      	add	sp, #52	; 0x34
 800348c:	ecbd 8b02 	vpop	{d8}
 8003490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003494:	4642      	mov	r2, r8
 8003496:	464b      	mov	r3, r9
 8003498:	4640      	mov	r0, r8
 800349a:	4649      	mov	r1, r9
 800349c:	f7fd fb46 	bl	8000b2c <__aeabi_dcmpun>
 80034a0:	b140      	cbz	r0, 80034b4 <_printf_float+0xf0>
 80034a2:	464b      	mov	r3, r9
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bfbc      	itt	lt
 80034a8:	232d      	movlt	r3, #45	; 0x2d
 80034aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80034ae:	487f      	ldr	r0, [pc, #508]	; (80036ac <_printf_float+0x2e8>)
 80034b0:	4b7f      	ldr	r3, [pc, #508]	; (80036b0 <_printf_float+0x2ec>)
 80034b2:	e7d1      	b.n	8003458 <_printf_float+0x94>
 80034b4:	6863      	ldr	r3, [r4, #4]
 80034b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80034ba:	9206      	str	r2, [sp, #24]
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	d13f      	bne.n	8003540 <_printf_float+0x17c>
 80034c0:	2306      	movs	r3, #6
 80034c2:	6063      	str	r3, [r4, #4]
 80034c4:	9b05      	ldr	r3, [sp, #20]
 80034c6:	6861      	ldr	r1, [r4, #4]
 80034c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80034cc:	2300      	movs	r3, #0
 80034ce:	9303      	str	r3, [sp, #12]
 80034d0:	ab0a      	add	r3, sp, #40	; 0x28
 80034d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80034d6:	ab09      	add	r3, sp, #36	; 0x24
 80034d8:	ec49 8b10 	vmov	d0, r8, r9
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	6022      	str	r2, [r4, #0]
 80034e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80034e4:	4628      	mov	r0, r5
 80034e6:	f7ff fecd 	bl	8003284 <__cvt>
 80034ea:	9b06      	ldr	r3, [sp, #24]
 80034ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80034ee:	2b47      	cmp	r3, #71	; 0x47
 80034f0:	4680      	mov	r8, r0
 80034f2:	d108      	bne.n	8003506 <_printf_float+0x142>
 80034f4:	1cc8      	adds	r0, r1, #3
 80034f6:	db02      	blt.n	80034fe <_printf_float+0x13a>
 80034f8:	6863      	ldr	r3, [r4, #4]
 80034fa:	4299      	cmp	r1, r3
 80034fc:	dd41      	ble.n	8003582 <_printf_float+0x1be>
 80034fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8003502:	fa5f fb8b 	uxtb.w	fp, fp
 8003506:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800350a:	d820      	bhi.n	800354e <_printf_float+0x18a>
 800350c:	3901      	subs	r1, #1
 800350e:	465a      	mov	r2, fp
 8003510:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003514:	9109      	str	r1, [sp, #36]	; 0x24
 8003516:	f7ff ff17 	bl	8003348 <__exponent>
 800351a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800351c:	1813      	adds	r3, r2, r0
 800351e:	2a01      	cmp	r2, #1
 8003520:	4681      	mov	r9, r0
 8003522:	6123      	str	r3, [r4, #16]
 8003524:	dc02      	bgt.n	800352c <_printf_float+0x168>
 8003526:	6822      	ldr	r2, [r4, #0]
 8003528:	07d2      	lsls	r2, r2, #31
 800352a:	d501      	bpl.n	8003530 <_printf_float+0x16c>
 800352c:	3301      	adds	r3, #1
 800352e:	6123      	str	r3, [r4, #16]
 8003530:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003534:	2b00      	cmp	r3, #0
 8003536:	d09c      	beq.n	8003472 <_printf_float+0xae>
 8003538:	232d      	movs	r3, #45	; 0x2d
 800353a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800353e:	e798      	b.n	8003472 <_printf_float+0xae>
 8003540:	9a06      	ldr	r2, [sp, #24]
 8003542:	2a47      	cmp	r2, #71	; 0x47
 8003544:	d1be      	bne.n	80034c4 <_printf_float+0x100>
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1bc      	bne.n	80034c4 <_printf_float+0x100>
 800354a:	2301      	movs	r3, #1
 800354c:	e7b9      	b.n	80034c2 <_printf_float+0xfe>
 800354e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003552:	d118      	bne.n	8003586 <_printf_float+0x1c2>
 8003554:	2900      	cmp	r1, #0
 8003556:	6863      	ldr	r3, [r4, #4]
 8003558:	dd0b      	ble.n	8003572 <_printf_float+0x1ae>
 800355a:	6121      	str	r1, [r4, #16]
 800355c:	b913      	cbnz	r3, 8003564 <_printf_float+0x1a0>
 800355e:	6822      	ldr	r2, [r4, #0]
 8003560:	07d0      	lsls	r0, r2, #31
 8003562:	d502      	bpl.n	800356a <_printf_float+0x1a6>
 8003564:	3301      	adds	r3, #1
 8003566:	440b      	add	r3, r1
 8003568:	6123      	str	r3, [r4, #16]
 800356a:	65a1      	str	r1, [r4, #88]	; 0x58
 800356c:	f04f 0900 	mov.w	r9, #0
 8003570:	e7de      	b.n	8003530 <_printf_float+0x16c>
 8003572:	b913      	cbnz	r3, 800357a <_printf_float+0x1b6>
 8003574:	6822      	ldr	r2, [r4, #0]
 8003576:	07d2      	lsls	r2, r2, #31
 8003578:	d501      	bpl.n	800357e <_printf_float+0x1ba>
 800357a:	3302      	adds	r3, #2
 800357c:	e7f4      	b.n	8003568 <_printf_float+0x1a4>
 800357e:	2301      	movs	r3, #1
 8003580:	e7f2      	b.n	8003568 <_printf_float+0x1a4>
 8003582:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003588:	4299      	cmp	r1, r3
 800358a:	db05      	blt.n	8003598 <_printf_float+0x1d4>
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	6121      	str	r1, [r4, #16]
 8003590:	07d8      	lsls	r0, r3, #31
 8003592:	d5ea      	bpl.n	800356a <_printf_float+0x1a6>
 8003594:	1c4b      	adds	r3, r1, #1
 8003596:	e7e7      	b.n	8003568 <_printf_float+0x1a4>
 8003598:	2900      	cmp	r1, #0
 800359a:	bfd4      	ite	le
 800359c:	f1c1 0202 	rsble	r2, r1, #2
 80035a0:	2201      	movgt	r2, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	e7e0      	b.n	8003568 <_printf_float+0x1a4>
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	055a      	lsls	r2, r3, #21
 80035aa:	d407      	bmi.n	80035bc <_printf_float+0x1f8>
 80035ac:	6923      	ldr	r3, [r4, #16]
 80035ae:	4642      	mov	r2, r8
 80035b0:	4631      	mov	r1, r6
 80035b2:	4628      	mov	r0, r5
 80035b4:	47b8      	blx	r7
 80035b6:	3001      	adds	r0, #1
 80035b8:	d12c      	bne.n	8003614 <_printf_float+0x250>
 80035ba:	e764      	b.n	8003486 <_printf_float+0xc2>
 80035bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80035c0:	f240 80e0 	bls.w	8003784 <_printf_float+0x3c0>
 80035c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035c8:	2200      	movs	r2, #0
 80035ca:	2300      	movs	r3, #0
 80035cc:	f7fd fa7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80035d0:	2800      	cmp	r0, #0
 80035d2:	d034      	beq.n	800363e <_printf_float+0x27a>
 80035d4:	4a37      	ldr	r2, [pc, #220]	; (80036b4 <_printf_float+0x2f0>)
 80035d6:	2301      	movs	r3, #1
 80035d8:	4631      	mov	r1, r6
 80035da:	4628      	mov	r0, r5
 80035dc:	47b8      	blx	r7
 80035de:	3001      	adds	r0, #1
 80035e0:	f43f af51 	beq.w	8003486 <_printf_float+0xc2>
 80035e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035e8:	429a      	cmp	r2, r3
 80035ea:	db02      	blt.n	80035f2 <_printf_float+0x22e>
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	07d8      	lsls	r0, r3, #31
 80035f0:	d510      	bpl.n	8003614 <_printf_float+0x250>
 80035f2:	ee18 3a10 	vmov	r3, s16
 80035f6:	4652      	mov	r2, sl
 80035f8:	4631      	mov	r1, r6
 80035fa:	4628      	mov	r0, r5
 80035fc:	47b8      	blx	r7
 80035fe:	3001      	adds	r0, #1
 8003600:	f43f af41 	beq.w	8003486 <_printf_float+0xc2>
 8003604:	f04f 0800 	mov.w	r8, #0
 8003608:	f104 091a 	add.w	r9, r4, #26
 800360c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800360e:	3b01      	subs	r3, #1
 8003610:	4543      	cmp	r3, r8
 8003612:	dc09      	bgt.n	8003628 <_printf_float+0x264>
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	079b      	lsls	r3, r3, #30
 8003618:	f100 8105 	bmi.w	8003826 <_printf_float+0x462>
 800361c:	68e0      	ldr	r0, [r4, #12]
 800361e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003620:	4298      	cmp	r0, r3
 8003622:	bfb8      	it	lt
 8003624:	4618      	movlt	r0, r3
 8003626:	e730      	b.n	800348a <_printf_float+0xc6>
 8003628:	2301      	movs	r3, #1
 800362a:	464a      	mov	r2, r9
 800362c:	4631      	mov	r1, r6
 800362e:	4628      	mov	r0, r5
 8003630:	47b8      	blx	r7
 8003632:	3001      	adds	r0, #1
 8003634:	f43f af27 	beq.w	8003486 <_printf_float+0xc2>
 8003638:	f108 0801 	add.w	r8, r8, #1
 800363c:	e7e6      	b.n	800360c <_printf_float+0x248>
 800363e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003640:	2b00      	cmp	r3, #0
 8003642:	dc39      	bgt.n	80036b8 <_printf_float+0x2f4>
 8003644:	4a1b      	ldr	r2, [pc, #108]	; (80036b4 <_printf_float+0x2f0>)
 8003646:	2301      	movs	r3, #1
 8003648:	4631      	mov	r1, r6
 800364a:	4628      	mov	r0, r5
 800364c:	47b8      	blx	r7
 800364e:	3001      	adds	r0, #1
 8003650:	f43f af19 	beq.w	8003486 <_printf_float+0xc2>
 8003654:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003658:	4313      	orrs	r3, r2
 800365a:	d102      	bne.n	8003662 <_printf_float+0x29e>
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	07d9      	lsls	r1, r3, #31
 8003660:	d5d8      	bpl.n	8003614 <_printf_float+0x250>
 8003662:	ee18 3a10 	vmov	r3, s16
 8003666:	4652      	mov	r2, sl
 8003668:	4631      	mov	r1, r6
 800366a:	4628      	mov	r0, r5
 800366c:	47b8      	blx	r7
 800366e:	3001      	adds	r0, #1
 8003670:	f43f af09 	beq.w	8003486 <_printf_float+0xc2>
 8003674:	f04f 0900 	mov.w	r9, #0
 8003678:	f104 0a1a 	add.w	sl, r4, #26
 800367c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800367e:	425b      	negs	r3, r3
 8003680:	454b      	cmp	r3, r9
 8003682:	dc01      	bgt.n	8003688 <_printf_float+0x2c4>
 8003684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003686:	e792      	b.n	80035ae <_printf_float+0x1ea>
 8003688:	2301      	movs	r3, #1
 800368a:	4652      	mov	r2, sl
 800368c:	4631      	mov	r1, r6
 800368e:	4628      	mov	r0, r5
 8003690:	47b8      	blx	r7
 8003692:	3001      	adds	r0, #1
 8003694:	f43f aef7 	beq.w	8003486 <_printf_float+0xc2>
 8003698:	f109 0901 	add.w	r9, r9, #1
 800369c:	e7ee      	b.n	800367c <_printf_float+0x2b8>
 800369e:	bf00      	nop
 80036a0:	7fefffff 	.word	0x7fefffff
 80036a4:	08007c10 	.word	0x08007c10
 80036a8:	08007c14 	.word	0x08007c14
 80036ac:	08007c1c 	.word	0x08007c1c
 80036b0:	08007c18 	.word	0x08007c18
 80036b4:	08007c20 	.word	0x08007c20
 80036b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80036ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036bc:	429a      	cmp	r2, r3
 80036be:	bfa8      	it	ge
 80036c0:	461a      	movge	r2, r3
 80036c2:	2a00      	cmp	r2, #0
 80036c4:	4691      	mov	r9, r2
 80036c6:	dc37      	bgt.n	8003738 <_printf_float+0x374>
 80036c8:	f04f 0b00 	mov.w	fp, #0
 80036cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036d0:	f104 021a 	add.w	r2, r4, #26
 80036d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036d6:	9305      	str	r3, [sp, #20]
 80036d8:	eba3 0309 	sub.w	r3, r3, r9
 80036dc:	455b      	cmp	r3, fp
 80036de:	dc33      	bgt.n	8003748 <_printf_float+0x384>
 80036e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036e4:	429a      	cmp	r2, r3
 80036e6:	db3b      	blt.n	8003760 <_printf_float+0x39c>
 80036e8:	6823      	ldr	r3, [r4, #0]
 80036ea:	07da      	lsls	r2, r3, #31
 80036ec:	d438      	bmi.n	8003760 <_printf_float+0x39c>
 80036ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036f0:	9a05      	ldr	r2, [sp, #20]
 80036f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80036f4:	1a9a      	subs	r2, r3, r2
 80036f6:	eba3 0901 	sub.w	r9, r3, r1
 80036fa:	4591      	cmp	r9, r2
 80036fc:	bfa8      	it	ge
 80036fe:	4691      	movge	r9, r2
 8003700:	f1b9 0f00 	cmp.w	r9, #0
 8003704:	dc35      	bgt.n	8003772 <_printf_float+0x3ae>
 8003706:	f04f 0800 	mov.w	r8, #0
 800370a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800370e:	f104 0a1a 	add.w	sl, r4, #26
 8003712:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	eba3 0309 	sub.w	r3, r3, r9
 800371c:	4543      	cmp	r3, r8
 800371e:	f77f af79 	ble.w	8003614 <_printf_float+0x250>
 8003722:	2301      	movs	r3, #1
 8003724:	4652      	mov	r2, sl
 8003726:	4631      	mov	r1, r6
 8003728:	4628      	mov	r0, r5
 800372a:	47b8      	blx	r7
 800372c:	3001      	adds	r0, #1
 800372e:	f43f aeaa 	beq.w	8003486 <_printf_float+0xc2>
 8003732:	f108 0801 	add.w	r8, r8, #1
 8003736:	e7ec      	b.n	8003712 <_printf_float+0x34e>
 8003738:	4613      	mov	r3, r2
 800373a:	4631      	mov	r1, r6
 800373c:	4642      	mov	r2, r8
 800373e:	4628      	mov	r0, r5
 8003740:	47b8      	blx	r7
 8003742:	3001      	adds	r0, #1
 8003744:	d1c0      	bne.n	80036c8 <_printf_float+0x304>
 8003746:	e69e      	b.n	8003486 <_printf_float+0xc2>
 8003748:	2301      	movs	r3, #1
 800374a:	4631      	mov	r1, r6
 800374c:	4628      	mov	r0, r5
 800374e:	9205      	str	r2, [sp, #20]
 8003750:	47b8      	blx	r7
 8003752:	3001      	adds	r0, #1
 8003754:	f43f ae97 	beq.w	8003486 <_printf_float+0xc2>
 8003758:	9a05      	ldr	r2, [sp, #20]
 800375a:	f10b 0b01 	add.w	fp, fp, #1
 800375e:	e7b9      	b.n	80036d4 <_printf_float+0x310>
 8003760:	ee18 3a10 	vmov	r3, s16
 8003764:	4652      	mov	r2, sl
 8003766:	4631      	mov	r1, r6
 8003768:	4628      	mov	r0, r5
 800376a:	47b8      	blx	r7
 800376c:	3001      	adds	r0, #1
 800376e:	d1be      	bne.n	80036ee <_printf_float+0x32a>
 8003770:	e689      	b.n	8003486 <_printf_float+0xc2>
 8003772:	9a05      	ldr	r2, [sp, #20]
 8003774:	464b      	mov	r3, r9
 8003776:	4442      	add	r2, r8
 8003778:	4631      	mov	r1, r6
 800377a:	4628      	mov	r0, r5
 800377c:	47b8      	blx	r7
 800377e:	3001      	adds	r0, #1
 8003780:	d1c1      	bne.n	8003706 <_printf_float+0x342>
 8003782:	e680      	b.n	8003486 <_printf_float+0xc2>
 8003784:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003786:	2a01      	cmp	r2, #1
 8003788:	dc01      	bgt.n	800378e <_printf_float+0x3ca>
 800378a:	07db      	lsls	r3, r3, #31
 800378c:	d538      	bpl.n	8003800 <_printf_float+0x43c>
 800378e:	2301      	movs	r3, #1
 8003790:	4642      	mov	r2, r8
 8003792:	4631      	mov	r1, r6
 8003794:	4628      	mov	r0, r5
 8003796:	47b8      	blx	r7
 8003798:	3001      	adds	r0, #1
 800379a:	f43f ae74 	beq.w	8003486 <_printf_float+0xc2>
 800379e:	ee18 3a10 	vmov	r3, s16
 80037a2:	4652      	mov	r2, sl
 80037a4:	4631      	mov	r1, r6
 80037a6:	4628      	mov	r0, r5
 80037a8:	47b8      	blx	r7
 80037aa:	3001      	adds	r0, #1
 80037ac:	f43f ae6b 	beq.w	8003486 <_printf_float+0xc2>
 80037b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037b4:	2200      	movs	r2, #0
 80037b6:	2300      	movs	r3, #0
 80037b8:	f7fd f986 	bl	8000ac8 <__aeabi_dcmpeq>
 80037bc:	b9d8      	cbnz	r0, 80037f6 <_printf_float+0x432>
 80037be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037c0:	f108 0201 	add.w	r2, r8, #1
 80037c4:	3b01      	subs	r3, #1
 80037c6:	4631      	mov	r1, r6
 80037c8:	4628      	mov	r0, r5
 80037ca:	47b8      	blx	r7
 80037cc:	3001      	adds	r0, #1
 80037ce:	d10e      	bne.n	80037ee <_printf_float+0x42a>
 80037d0:	e659      	b.n	8003486 <_printf_float+0xc2>
 80037d2:	2301      	movs	r3, #1
 80037d4:	4652      	mov	r2, sl
 80037d6:	4631      	mov	r1, r6
 80037d8:	4628      	mov	r0, r5
 80037da:	47b8      	blx	r7
 80037dc:	3001      	adds	r0, #1
 80037de:	f43f ae52 	beq.w	8003486 <_printf_float+0xc2>
 80037e2:	f108 0801 	add.w	r8, r8, #1
 80037e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037e8:	3b01      	subs	r3, #1
 80037ea:	4543      	cmp	r3, r8
 80037ec:	dcf1      	bgt.n	80037d2 <_printf_float+0x40e>
 80037ee:	464b      	mov	r3, r9
 80037f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80037f4:	e6dc      	b.n	80035b0 <_printf_float+0x1ec>
 80037f6:	f04f 0800 	mov.w	r8, #0
 80037fa:	f104 0a1a 	add.w	sl, r4, #26
 80037fe:	e7f2      	b.n	80037e6 <_printf_float+0x422>
 8003800:	2301      	movs	r3, #1
 8003802:	4642      	mov	r2, r8
 8003804:	e7df      	b.n	80037c6 <_printf_float+0x402>
 8003806:	2301      	movs	r3, #1
 8003808:	464a      	mov	r2, r9
 800380a:	4631      	mov	r1, r6
 800380c:	4628      	mov	r0, r5
 800380e:	47b8      	blx	r7
 8003810:	3001      	adds	r0, #1
 8003812:	f43f ae38 	beq.w	8003486 <_printf_float+0xc2>
 8003816:	f108 0801 	add.w	r8, r8, #1
 800381a:	68e3      	ldr	r3, [r4, #12]
 800381c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800381e:	1a5b      	subs	r3, r3, r1
 8003820:	4543      	cmp	r3, r8
 8003822:	dcf0      	bgt.n	8003806 <_printf_float+0x442>
 8003824:	e6fa      	b.n	800361c <_printf_float+0x258>
 8003826:	f04f 0800 	mov.w	r8, #0
 800382a:	f104 0919 	add.w	r9, r4, #25
 800382e:	e7f4      	b.n	800381a <_printf_float+0x456>

08003830 <_printf_common>:
 8003830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003834:	4616      	mov	r6, r2
 8003836:	4699      	mov	r9, r3
 8003838:	688a      	ldr	r2, [r1, #8]
 800383a:	690b      	ldr	r3, [r1, #16]
 800383c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003840:	4293      	cmp	r3, r2
 8003842:	bfb8      	it	lt
 8003844:	4613      	movlt	r3, r2
 8003846:	6033      	str	r3, [r6, #0]
 8003848:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800384c:	4607      	mov	r7, r0
 800384e:	460c      	mov	r4, r1
 8003850:	b10a      	cbz	r2, 8003856 <_printf_common+0x26>
 8003852:	3301      	adds	r3, #1
 8003854:	6033      	str	r3, [r6, #0]
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	0699      	lsls	r1, r3, #26
 800385a:	bf42      	ittt	mi
 800385c:	6833      	ldrmi	r3, [r6, #0]
 800385e:	3302      	addmi	r3, #2
 8003860:	6033      	strmi	r3, [r6, #0]
 8003862:	6825      	ldr	r5, [r4, #0]
 8003864:	f015 0506 	ands.w	r5, r5, #6
 8003868:	d106      	bne.n	8003878 <_printf_common+0x48>
 800386a:	f104 0a19 	add.w	sl, r4, #25
 800386e:	68e3      	ldr	r3, [r4, #12]
 8003870:	6832      	ldr	r2, [r6, #0]
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	42ab      	cmp	r3, r5
 8003876:	dc26      	bgt.n	80038c6 <_printf_common+0x96>
 8003878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800387c:	1e13      	subs	r3, r2, #0
 800387e:	6822      	ldr	r2, [r4, #0]
 8003880:	bf18      	it	ne
 8003882:	2301      	movne	r3, #1
 8003884:	0692      	lsls	r2, r2, #26
 8003886:	d42b      	bmi.n	80038e0 <_printf_common+0xb0>
 8003888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800388c:	4649      	mov	r1, r9
 800388e:	4638      	mov	r0, r7
 8003890:	47c0      	blx	r8
 8003892:	3001      	adds	r0, #1
 8003894:	d01e      	beq.n	80038d4 <_printf_common+0xa4>
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	68e5      	ldr	r5, [r4, #12]
 800389a:	6832      	ldr	r2, [r6, #0]
 800389c:	f003 0306 	and.w	r3, r3, #6
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	bf08      	it	eq
 80038a4:	1aad      	subeq	r5, r5, r2
 80038a6:	68a3      	ldr	r3, [r4, #8]
 80038a8:	6922      	ldr	r2, [r4, #16]
 80038aa:	bf0c      	ite	eq
 80038ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038b0:	2500      	movne	r5, #0
 80038b2:	4293      	cmp	r3, r2
 80038b4:	bfc4      	itt	gt
 80038b6:	1a9b      	subgt	r3, r3, r2
 80038b8:	18ed      	addgt	r5, r5, r3
 80038ba:	2600      	movs	r6, #0
 80038bc:	341a      	adds	r4, #26
 80038be:	42b5      	cmp	r5, r6
 80038c0:	d11a      	bne.n	80038f8 <_printf_common+0xc8>
 80038c2:	2000      	movs	r0, #0
 80038c4:	e008      	b.n	80038d8 <_printf_common+0xa8>
 80038c6:	2301      	movs	r3, #1
 80038c8:	4652      	mov	r2, sl
 80038ca:	4649      	mov	r1, r9
 80038cc:	4638      	mov	r0, r7
 80038ce:	47c0      	blx	r8
 80038d0:	3001      	adds	r0, #1
 80038d2:	d103      	bne.n	80038dc <_printf_common+0xac>
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295
 80038d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038dc:	3501      	adds	r5, #1
 80038de:	e7c6      	b.n	800386e <_printf_common+0x3e>
 80038e0:	18e1      	adds	r1, r4, r3
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	2030      	movs	r0, #48	; 0x30
 80038e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038ea:	4422      	add	r2, r4
 80038ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038f4:	3302      	adds	r3, #2
 80038f6:	e7c7      	b.n	8003888 <_printf_common+0x58>
 80038f8:	2301      	movs	r3, #1
 80038fa:	4622      	mov	r2, r4
 80038fc:	4649      	mov	r1, r9
 80038fe:	4638      	mov	r0, r7
 8003900:	47c0      	blx	r8
 8003902:	3001      	adds	r0, #1
 8003904:	d0e6      	beq.n	80038d4 <_printf_common+0xa4>
 8003906:	3601      	adds	r6, #1
 8003908:	e7d9      	b.n	80038be <_printf_common+0x8e>
	...

0800390c <_printf_i>:
 800390c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003910:	7e0f      	ldrb	r7, [r1, #24]
 8003912:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003914:	2f78      	cmp	r7, #120	; 0x78
 8003916:	4691      	mov	r9, r2
 8003918:	4680      	mov	r8, r0
 800391a:	460c      	mov	r4, r1
 800391c:	469a      	mov	sl, r3
 800391e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003922:	d807      	bhi.n	8003934 <_printf_i+0x28>
 8003924:	2f62      	cmp	r7, #98	; 0x62
 8003926:	d80a      	bhi.n	800393e <_printf_i+0x32>
 8003928:	2f00      	cmp	r7, #0
 800392a:	f000 80d8 	beq.w	8003ade <_printf_i+0x1d2>
 800392e:	2f58      	cmp	r7, #88	; 0x58
 8003930:	f000 80a3 	beq.w	8003a7a <_printf_i+0x16e>
 8003934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800393c:	e03a      	b.n	80039b4 <_printf_i+0xa8>
 800393e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003942:	2b15      	cmp	r3, #21
 8003944:	d8f6      	bhi.n	8003934 <_printf_i+0x28>
 8003946:	a101      	add	r1, pc, #4	; (adr r1, 800394c <_printf_i+0x40>)
 8003948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800394c:	080039a5 	.word	0x080039a5
 8003950:	080039b9 	.word	0x080039b9
 8003954:	08003935 	.word	0x08003935
 8003958:	08003935 	.word	0x08003935
 800395c:	08003935 	.word	0x08003935
 8003960:	08003935 	.word	0x08003935
 8003964:	080039b9 	.word	0x080039b9
 8003968:	08003935 	.word	0x08003935
 800396c:	08003935 	.word	0x08003935
 8003970:	08003935 	.word	0x08003935
 8003974:	08003935 	.word	0x08003935
 8003978:	08003ac5 	.word	0x08003ac5
 800397c:	080039e9 	.word	0x080039e9
 8003980:	08003aa7 	.word	0x08003aa7
 8003984:	08003935 	.word	0x08003935
 8003988:	08003935 	.word	0x08003935
 800398c:	08003ae7 	.word	0x08003ae7
 8003990:	08003935 	.word	0x08003935
 8003994:	080039e9 	.word	0x080039e9
 8003998:	08003935 	.word	0x08003935
 800399c:	08003935 	.word	0x08003935
 80039a0:	08003aaf 	.word	0x08003aaf
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	1d1a      	adds	r2, r3, #4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	602a      	str	r2, [r5, #0]
 80039ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0a3      	b.n	8003b00 <_printf_i+0x1f4>
 80039b8:	6820      	ldr	r0, [r4, #0]
 80039ba:	6829      	ldr	r1, [r5, #0]
 80039bc:	0606      	lsls	r6, r0, #24
 80039be:	f101 0304 	add.w	r3, r1, #4
 80039c2:	d50a      	bpl.n	80039da <_printf_i+0xce>
 80039c4:	680e      	ldr	r6, [r1, #0]
 80039c6:	602b      	str	r3, [r5, #0]
 80039c8:	2e00      	cmp	r6, #0
 80039ca:	da03      	bge.n	80039d4 <_printf_i+0xc8>
 80039cc:	232d      	movs	r3, #45	; 0x2d
 80039ce:	4276      	negs	r6, r6
 80039d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d4:	485e      	ldr	r0, [pc, #376]	; (8003b50 <_printf_i+0x244>)
 80039d6:	230a      	movs	r3, #10
 80039d8:	e019      	b.n	8003a0e <_printf_i+0x102>
 80039da:	680e      	ldr	r6, [r1, #0]
 80039dc:	602b      	str	r3, [r5, #0]
 80039de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039e2:	bf18      	it	ne
 80039e4:	b236      	sxthne	r6, r6
 80039e6:	e7ef      	b.n	80039c8 <_printf_i+0xbc>
 80039e8:	682b      	ldr	r3, [r5, #0]
 80039ea:	6820      	ldr	r0, [r4, #0]
 80039ec:	1d19      	adds	r1, r3, #4
 80039ee:	6029      	str	r1, [r5, #0]
 80039f0:	0601      	lsls	r1, r0, #24
 80039f2:	d501      	bpl.n	80039f8 <_printf_i+0xec>
 80039f4:	681e      	ldr	r6, [r3, #0]
 80039f6:	e002      	b.n	80039fe <_printf_i+0xf2>
 80039f8:	0646      	lsls	r6, r0, #25
 80039fa:	d5fb      	bpl.n	80039f4 <_printf_i+0xe8>
 80039fc:	881e      	ldrh	r6, [r3, #0]
 80039fe:	4854      	ldr	r0, [pc, #336]	; (8003b50 <_printf_i+0x244>)
 8003a00:	2f6f      	cmp	r7, #111	; 0x6f
 8003a02:	bf0c      	ite	eq
 8003a04:	2308      	moveq	r3, #8
 8003a06:	230a      	movne	r3, #10
 8003a08:	2100      	movs	r1, #0
 8003a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a0e:	6865      	ldr	r5, [r4, #4]
 8003a10:	60a5      	str	r5, [r4, #8]
 8003a12:	2d00      	cmp	r5, #0
 8003a14:	bfa2      	ittt	ge
 8003a16:	6821      	ldrge	r1, [r4, #0]
 8003a18:	f021 0104 	bicge.w	r1, r1, #4
 8003a1c:	6021      	strge	r1, [r4, #0]
 8003a1e:	b90e      	cbnz	r6, 8003a24 <_printf_i+0x118>
 8003a20:	2d00      	cmp	r5, #0
 8003a22:	d04d      	beq.n	8003ac0 <_printf_i+0x1b4>
 8003a24:	4615      	mov	r5, r2
 8003a26:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a2a:	fb03 6711 	mls	r7, r3, r1, r6
 8003a2e:	5dc7      	ldrb	r7, [r0, r7]
 8003a30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a34:	4637      	mov	r7, r6
 8003a36:	42bb      	cmp	r3, r7
 8003a38:	460e      	mov	r6, r1
 8003a3a:	d9f4      	bls.n	8003a26 <_printf_i+0x11a>
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d10b      	bne.n	8003a58 <_printf_i+0x14c>
 8003a40:	6823      	ldr	r3, [r4, #0]
 8003a42:	07de      	lsls	r6, r3, #31
 8003a44:	d508      	bpl.n	8003a58 <_printf_i+0x14c>
 8003a46:	6923      	ldr	r3, [r4, #16]
 8003a48:	6861      	ldr	r1, [r4, #4]
 8003a4a:	4299      	cmp	r1, r3
 8003a4c:	bfde      	ittt	le
 8003a4e:	2330      	movle	r3, #48	; 0x30
 8003a50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a58:	1b52      	subs	r2, r2, r5
 8003a5a:	6122      	str	r2, [r4, #16]
 8003a5c:	f8cd a000 	str.w	sl, [sp]
 8003a60:	464b      	mov	r3, r9
 8003a62:	aa03      	add	r2, sp, #12
 8003a64:	4621      	mov	r1, r4
 8003a66:	4640      	mov	r0, r8
 8003a68:	f7ff fee2 	bl	8003830 <_printf_common>
 8003a6c:	3001      	adds	r0, #1
 8003a6e:	d14c      	bne.n	8003b0a <_printf_i+0x1fe>
 8003a70:	f04f 30ff 	mov.w	r0, #4294967295
 8003a74:	b004      	add	sp, #16
 8003a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a7a:	4835      	ldr	r0, [pc, #212]	; (8003b50 <_printf_i+0x244>)
 8003a7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a80:	6829      	ldr	r1, [r5, #0]
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a88:	6029      	str	r1, [r5, #0]
 8003a8a:	061d      	lsls	r5, r3, #24
 8003a8c:	d514      	bpl.n	8003ab8 <_printf_i+0x1ac>
 8003a8e:	07df      	lsls	r7, r3, #31
 8003a90:	bf44      	itt	mi
 8003a92:	f043 0320 	orrmi.w	r3, r3, #32
 8003a96:	6023      	strmi	r3, [r4, #0]
 8003a98:	b91e      	cbnz	r6, 8003aa2 <_printf_i+0x196>
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	f023 0320 	bic.w	r3, r3, #32
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	2310      	movs	r3, #16
 8003aa4:	e7b0      	b.n	8003a08 <_printf_i+0xfc>
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	f043 0320 	orr.w	r3, r3, #32
 8003aac:	6023      	str	r3, [r4, #0]
 8003aae:	2378      	movs	r3, #120	; 0x78
 8003ab0:	4828      	ldr	r0, [pc, #160]	; (8003b54 <_printf_i+0x248>)
 8003ab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ab6:	e7e3      	b.n	8003a80 <_printf_i+0x174>
 8003ab8:	0659      	lsls	r1, r3, #25
 8003aba:	bf48      	it	mi
 8003abc:	b2b6      	uxthmi	r6, r6
 8003abe:	e7e6      	b.n	8003a8e <_printf_i+0x182>
 8003ac0:	4615      	mov	r5, r2
 8003ac2:	e7bb      	b.n	8003a3c <_printf_i+0x130>
 8003ac4:	682b      	ldr	r3, [r5, #0]
 8003ac6:	6826      	ldr	r6, [r4, #0]
 8003ac8:	6961      	ldr	r1, [r4, #20]
 8003aca:	1d18      	adds	r0, r3, #4
 8003acc:	6028      	str	r0, [r5, #0]
 8003ace:	0635      	lsls	r5, r6, #24
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	d501      	bpl.n	8003ad8 <_printf_i+0x1cc>
 8003ad4:	6019      	str	r1, [r3, #0]
 8003ad6:	e002      	b.n	8003ade <_printf_i+0x1d2>
 8003ad8:	0670      	lsls	r0, r6, #25
 8003ada:	d5fb      	bpl.n	8003ad4 <_printf_i+0x1c8>
 8003adc:	8019      	strh	r1, [r3, #0]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	6123      	str	r3, [r4, #16]
 8003ae2:	4615      	mov	r5, r2
 8003ae4:	e7ba      	b.n	8003a5c <_printf_i+0x150>
 8003ae6:	682b      	ldr	r3, [r5, #0]
 8003ae8:	1d1a      	adds	r2, r3, #4
 8003aea:	602a      	str	r2, [r5, #0]
 8003aec:	681d      	ldr	r5, [r3, #0]
 8003aee:	6862      	ldr	r2, [r4, #4]
 8003af0:	2100      	movs	r1, #0
 8003af2:	4628      	mov	r0, r5
 8003af4:	f7fc fb74 	bl	80001e0 <memchr>
 8003af8:	b108      	cbz	r0, 8003afe <_printf_i+0x1f2>
 8003afa:	1b40      	subs	r0, r0, r5
 8003afc:	6060      	str	r0, [r4, #4]
 8003afe:	6863      	ldr	r3, [r4, #4]
 8003b00:	6123      	str	r3, [r4, #16]
 8003b02:	2300      	movs	r3, #0
 8003b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b08:	e7a8      	b.n	8003a5c <_printf_i+0x150>
 8003b0a:	6923      	ldr	r3, [r4, #16]
 8003b0c:	462a      	mov	r2, r5
 8003b0e:	4649      	mov	r1, r9
 8003b10:	4640      	mov	r0, r8
 8003b12:	47d0      	blx	sl
 8003b14:	3001      	adds	r0, #1
 8003b16:	d0ab      	beq.n	8003a70 <_printf_i+0x164>
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	079b      	lsls	r3, r3, #30
 8003b1c:	d413      	bmi.n	8003b46 <_printf_i+0x23a>
 8003b1e:	68e0      	ldr	r0, [r4, #12]
 8003b20:	9b03      	ldr	r3, [sp, #12]
 8003b22:	4298      	cmp	r0, r3
 8003b24:	bfb8      	it	lt
 8003b26:	4618      	movlt	r0, r3
 8003b28:	e7a4      	b.n	8003a74 <_printf_i+0x168>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	4632      	mov	r2, r6
 8003b2e:	4649      	mov	r1, r9
 8003b30:	4640      	mov	r0, r8
 8003b32:	47d0      	blx	sl
 8003b34:	3001      	adds	r0, #1
 8003b36:	d09b      	beq.n	8003a70 <_printf_i+0x164>
 8003b38:	3501      	adds	r5, #1
 8003b3a:	68e3      	ldr	r3, [r4, #12]
 8003b3c:	9903      	ldr	r1, [sp, #12]
 8003b3e:	1a5b      	subs	r3, r3, r1
 8003b40:	42ab      	cmp	r3, r5
 8003b42:	dcf2      	bgt.n	8003b2a <_printf_i+0x21e>
 8003b44:	e7eb      	b.n	8003b1e <_printf_i+0x212>
 8003b46:	2500      	movs	r5, #0
 8003b48:	f104 0619 	add.w	r6, r4, #25
 8003b4c:	e7f5      	b.n	8003b3a <_printf_i+0x22e>
 8003b4e:	bf00      	nop
 8003b50:	08007c22 	.word	0x08007c22
 8003b54:	08007c33 	.word	0x08007c33

08003b58 <_scanf_float>:
 8003b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b5c:	b087      	sub	sp, #28
 8003b5e:	4617      	mov	r7, r2
 8003b60:	9303      	str	r3, [sp, #12]
 8003b62:	688b      	ldr	r3, [r1, #8]
 8003b64:	1e5a      	subs	r2, r3, #1
 8003b66:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003b6a:	bf83      	ittte	hi
 8003b6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003b70:	195b      	addhi	r3, r3, r5
 8003b72:	9302      	strhi	r3, [sp, #8]
 8003b74:	2300      	movls	r3, #0
 8003b76:	bf86      	itte	hi
 8003b78:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003b7c:	608b      	strhi	r3, [r1, #8]
 8003b7e:	9302      	strls	r3, [sp, #8]
 8003b80:	680b      	ldr	r3, [r1, #0]
 8003b82:	468b      	mov	fp, r1
 8003b84:	2500      	movs	r5, #0
 8003b86:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003b8a:	f84b 3b1c 	str.w	r3, [fp], #28
 8003b8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003b92:	4680      	mov	r8, r0
 8003b94:	460c      	mov	r4, r1
 8003b96:	465e      	mov	r6, fp
 8003b98:	46aa      	mov	sl, r5
 8003b9a:	46a9      	mov	r9, r5
 8003b9c:	9501      	str	r5, [sp, #4]
 8003b9e:	68a2      	ldr	r2, [r4, #8]
 8003ba0:	b152      	cbz	r2, 8003bb8 <_scanf_float+0x60>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b4e      	cmp	r3, #78	; 0x4e
 8003ba8:	d864      	bhi.n	8003c74 <_scanf_float+0x11c>
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d83c      	bhi.n	8003c28 <_scanf_float+0xd0>
 8003bae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003bb2:	b2c8      	uxtb	r0, r1
 8003bb4:	280e      	cmp	r0, #14
 8003bb6:	d93a      	bls.n	8003c2e <_scanf_float+0xd6>
 8003bb8:	f1b9 0f00 	cmp.w	r9, #0
 8003bbc:	d003      	beq.n	8003bc6 <_scanf_float+0x6e>
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bc4:	6023      	str	r3, [r4, #0]
 8003bc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003bca:	f1ba 0f01 	cmp.w	sl, #1
 8003bce:	f200 8113 	bhi.w	8003df8 <_scanf_float+0x2a0>
 8003bd2:	455e      	cmp	r6, fp
 8003bd4:	f200 8105 	bhi.w	8003de2 <_scanf_float+0x28a>
 8003bd8:	2501      	movs	r5, #1
 8003bda:	4628      	mov	r0, r5
 8003bdc:	b007      	add	sp, #28
 8003bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003be6:	2a0d      	cmp	r2, #13
 8003be8:	d8e6      	bhi.n	8003bb8 <_scanf_float+0x60>
 8003bea:	a101      	add	r1, pc, #4	; (adr r1, 8003bf0 <_scanf_float+0x98>)
 8003bec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003bf0:	08003d2f 	.word	0x08003d2f
 8003bf4:	08003bb9 	.word	0x08003bb9
 8003bf8:	08003bb9 	.word	0x08003bb9
 8003bfc:	08003bb9 	.word	0x08003bb9
 8003c00:	08003d8f 	.word	0x08003d8f
 8003c04:	08003d67 	.word	0x08003d67
 8003c08:	08003bb9 	.word	0x08003bb9
 8003c0c:	08003bb9 	.word	0x08003bb9
 8003c10:	08003d3d 	.word	0x08003d3d
 8003c14:	08003bb9 	.word	0x08003bb9
 8003c18:	08003bb9 	.word	0x08003bb9
 8003c1c:	08003bb9 	.word	0x08003bb9
 8003c20:	08003bb9 	.word	0x08003bb9
 8003c24:	08003cf5 	.word	0x08003cf5
 8003c28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003c2c:	e7db      	b.n	8003be6 <_scanf_float+0x8e>
 8003c2e:	290e      	cmp	r1, #14
 8003c30:	d8c2      	bhi.n	8003bb8 <_scanf_float+0x60>
 8003c32:	a001      	add	r0, pc, #4	; (adr r0, 8003c38 <_scanf_float+0xe0>)
 8003c34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003c38:	08003ce7 	.word	0x08003ce7
 8003c3c:	08003bb9 	.word	0x08003bb9
 8003c40:	08003ce7 	.word	0x08003ce7
 8003c44:	08003d7b 	.word	0x08003d7b
 8003c48:	08003bb9 	.word	0x08003bb9
 8003c4c:	08003c95 	.word	0x08003c95
 8003c50:	08003cd1 	.word	0x08003cd1
 8003c54:	08003cd1 	.word	0x08003cd1
 8003c58:	08003cd1 	.word	0x08003cd1
 8003c5c:	08003cd1 	.word	0x08003cd1
 8003c60:	08003cd1 	.word	0x08003cd1
 8003c64:	08003cd1 	.word	0x08003cd1
 8003c68:	08003cd1 	.word	0x08003cd1
 8003c6c:	08003cd1 	.word	0x08003cd1
 8003c70:	08003cd1 	.word	0x08003cd1
 8003c74:	2b6e      	cmp	r3, #110	; 0x6e
 8003c76:	d809      	bhi.n	8003c8c <_scanf_float+0x134>
 8003c78:	2b60      	cmp	r3, #96	; 0x60
 8003c7a:	d8b2      	bhi.n	8003be2 <_scanf_float+0x8a>
 8003c7c:	2b54      	cmp	r3, #84	; 0x54
 8003c7e:	d077      	beq.n	8003d70 <_scanf_float+0x218>
 8003c80:	2b59      	cmp	r3, #89	; 0x59
 8003c82:	d199      	bne.n	8003bb8 <_scanf_float+0x60>
 8003c84:	2d07      	cmp	r5, #7
 8003c86:	d197      	bne.n	8003bb8 <_scanf_float+0x60>
 8003c88:	2508      	movs	r5, #8
 8003c8a:	e029      	b.n	8003ce0 <_scanf_float+0x188>
 8003c8c:	2b74      	cmp	r3, #116	; 0x74
 8003c8e:	d06f      	beq.n	8003d70 <_scanf_float+0x218>
 8003c90:	2b79      	cmp	r3, #121	; 0x79
 8003c92:	e7f6      	b.n	8003c82 <_scanf_float+0x12a>
 8003c94:	6821      	ldr	r1, [r4, #0]
 8003c96:	05c8      	lsls	r0, r1, #23
 8003c98:	d51a      	bpl.n	8003cd0 <_scanf_float+0x178>
 8003c9a:	9b02      	ldr	r3, [sp, #8]
 8003c9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003ca0:	6021      	str	r1, [r4, #0]
 8003ca2:	f109 0901 	add.w	r9, r9, #1
 8003ca6:	b11b      	cbz	r3, 8003cb0 <_scanf_float+0x158>
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	3201      	adds	r2, #1
 8003cac:	9302      	str	r3, [sp, #8]
 8003cae:	60a2      	str	r2, [r4, #8]
 8003cb0:	68a3      	ldr	r3, [r4, #8]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	60a3      	str	r3, [r4, #8]
 8003cb6:	6923      	ldr	r3, [r4, #16]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	6123      	str	r3, [r4, #16]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	f340 8084 	ble.w	8003dd0 <_scanf_float+0x278>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	603b      	str	r3, [r7, #0]
 8003cce:	e766      	b.n	8003b9e <_scanf_float+0x46>
 8003cd0:	eb1a 0f05 	cmn.w	sl, r5
 8003cd4:	f47f af70 	bne.w	8003bb8 <_scanf_float+0x60>
 8003cd8:	6822      	ldr	r2, [r4, #0]
 8003cda:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003cde:	6022      	str	r2, [r4, #0]
 8003ce0:	f806 3b01 	strb.w	r3, [r6], #1
 8003ce4:	e7e4      	b.n	8003cb0 <_scanf_float+0x158>
 8003ce6:	6822      	ldr	r2, [r4, #0]
 8003ce8:	0610      	lsls	r0, r2, #24
 8003cea:	f57f af65 	bpl.w	8003bb8 <_scanf_float+0x60>
 8003cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cf2:	e7f4      	b.n	8003cde <_scanf_float+0x186>
 8003cf4:	f1ba 0f00 	cmp.w	sl, #0
 8003cf8:	d10e      	bne.n	8003d18 <_scanf_float+0x1c0>
 8003cfa:	f1b9 0f00 	cmp.w	r9, #0
 8003cfe:	d10e      	bne.n	8003d1e <_scanf_float+0x1c6>
 8003d00:	6822      	ldr	r2, [r4, #0]
 8003d02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003d06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003d0a:	d108      	bne.n	8003d1e <_scanf_float+0x1c6>
 8003d0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003d10:	6022      	str	r2, [r4, #0]
 8003d12:	f04f 0a01 	mov.w	sl, #1
 8003d16:	e7e3      	b.n	8003ce0 <_scanf_float+0x188>
 8003d18:	f1ba 0f02 	cmp.w	sl, #2
 8003d1c:	d055      	beq.n	8003dca <_scanf_float+0x272>
 8003d1e:	2d01      	cmp	r5, #1
 8003d20:	d002      	beq.n	8003d28 <_scanf_float+0x1d0>
 8003d22:	2d04      	cmp	r5, #4
 8003d24:	f47f af48 	bne.w	8003bb8 <_scanf_float+0x60>
 8003d28:	3501      	adds	r5, #1
 8003d2a:	b2ed      	uxtb	r5, r5
 8003d2c:	e7d8      	b.n	8003ce0 <_scanf_float+0x188>
 8003d2e:	f1ba 0f01 	cmp.w	sl, #1
 8003d32:	f47f af41 	bne.w	8003bb8 <_scanf_float+0x60>
 8003d36:	f04f 0a02 	mov.w	sl, #2
 8003d3a:	e7d1      	b.n	8003ce0 <_scanf_float+0x188>
 8003d3c:	b97d      	cbnz	r5, 8003d5e <_scanf_float+0x206>
 8003d3e:	f1b9 0f00 	cmp.w	r9, #0
 8003d42:	f47f af3c 	bne.w	8003bbe <_scanf_float+0x66>
 8003d46:	6822      	ldr	r2, [r4, #0]
 8003d48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003d4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003d50:	f47f af39 	bne.w	8003bc6 <_scanf_float+0x6e>
 8003d54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003d58:	6022      	str	r2, [r4, #0]
 8003d5a:	2501      	movs	r5, #1
 8003d5c:	e7c0      	b.n	8003ce0 <_scanf_float+0x188>
 8003d5e:	2d03      	cmp	r5, #3
 8003d60:	d0e2      	beq.n	8003d28 <_scanf_float+0x1d0>
 8003d62:	2d05      	cmp	r5, #5
 8003d64:	e7de      	b.n	8003d24 <_scanf_float+0x1cc>
 8003d66:	2d02      	cmp	r5, #2
 8003d68:	f47f af26 	bne.w	8003bb8 <_scanf_float+0x60>
 8003d6c:	2503      	movs	r5, #3
 8003d6e:	e7b7      	b.n	8003ce0 <_scanf_float+0x188>
 8003d70:	2d06      	cmp	r5, #6
 8003d72:	f47f af21 	bne.w	8003bb8 <_scanf_float+0x60>
 8003d76:	2507      	movs	r5, #7
 8003d78:	e7b2      	b.n	8003ce0 <_scanf_float+0x188>
 8003d7a:	6822      	ldr	r2, [r4, #0]
 8003d7c:	0591      	lsls	r1, r2, #22
 8003d7e:	f57f af1b 	bpl.w	8003bb8 <_scanf_float+0x60>
 8003d82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003d86:	6022      	str	r2, [r4, #0]
 8003d88:	f8cd 9004 	str.w	r9, [sp, #4]
 8003d8c:	e7a8      	b.n	8003ce0 <_scanf_float+0x188>
 8003d8e:	6822      	ldr	r2, [r4, #0]
 8003d90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003d94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003d98:	d006      	beq.n	8003da8 <_scanf_float+0x250>
 8003d9a:	0550      	lsls	r0, r2, #21
 8003d9c:	f57f af0c 	bpl.w	8003bb8 <_scanf_float+0x60>
 8003da0:	f1b9 0f00 	cmp.w	r9, #0
 8003da4:	f43f af0f 	beq.w	8003bc6 <_scanf_float+0x6e>
 8003da8:	0591      	lsls	r1, r2, #22
 8003daa:	bf58      	it	pl
 8003dac:	9901      	ldrpl	r1, [sp, #4]
 8003dae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003db2:	bf58      	it	pl
 8003db4:	eba9 0101 	subpl.w	r1, r9, r1
 8003db8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003dbc:	bf58      	it	pl
 8003dbe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003dc2:	6022      	str	r2, [r4, #0]
 8003dc4:	f04f 0900 	mov.w	r9, #0
 8003dc8:	e78a      	b.n	8003ce0 <_scanf_float+0x188>
 8003dca:	f04f 0a03 	mov.w	sl, #3
 8003dce:	e787      	b.n	8003ce0 <_scanf_float+0x188>
 8003dd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003dd4:	4639      	mov	r1, r7
 8003dd6:	4640      	mov	r0, r8
 8003dd8:	4798      	blx	r3
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	f43f aedf 	beq.w	8003b9e <_scanf_float+0x46>
 8003de0:	e6ea      	b.n	8003bb8 <_scanf_float+0x60>
 8003de2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003de6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003dea:	463a      	mov	r2, r7
 8003dec:	4640      	mov	r0, r8
 8003dee:	4798      	blx	r3
 8003df0:	6923      	ldr	r3, [r4, #16]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	6123      	str	r3, [r4, #16]
 8003df6:	e6ec      	b.n	8003bd2 <_scanf_float+0x7a>
 8003df8:	1e6b      	subs	r3, r5, #1
 8003dfa:	2b06      	cmp	r3, #6
 8003dfc:	d825      	bhi.n	8003e4a <_scanf_float+0x2f2>
 8003dfe:	2d02      	cmp	r5, #2
 8003e00:	d836      	bhi.n	8003e70 <_scanf_float+0x318>
 8003e02:	455e      	cmp	r6, fp
 8003e04:	f67f aee8 	bls.w	8003bd8 <_scanf_float+0x80>
 8003e08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003e10:	463a      	mov	r2, r7
 8003e12:	4640      	mov	r0, r8
 8003e14:	4798      	blx	r3
 8003e16:	6923      	ldr	r3, [r4, #16]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	6123      	str	r3, [r4, #16]
 8003e1c:	e7f1      	b.n	8003e02 <_scanf_float+0x2aa>
 8003e1e:	9802      	ldr	r0, [sp, #8]
 8003e20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003e28:	9002      	str	r0, [sp, #8]
 8003e2a:	463a      	mov	r2, r7
 8003e2c:	4640      	mov	r0, r8
 8003e2e:	4798      	blx	r3
 8003e30:	6923      	ldr	r3, [r4, #16]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	6123      	str	r3, [r4, #16]
 8003e36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e3a:	fa5f fa8a 	uxtb.w	sl, sl
 8003e3e:	f1ba 0f02 	cmp.w	sl, #2
 8003e42:	d1ec      	bne.n	8003e1e <_scanf_float+0x2c6>
 8003e44:	3d03      	subs	r5, #3
 8003e46:	b2ed      	uxtb	r5, r5
 8003e48:	1b76      	subs	r6, r6, r5
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	05da      	lsls	r2, r3, #23
 8003e4e:	d52f      	bpl.n	8003eb0 <_scanf_float+0x358>
 8003e50:	055b      	lsls	r3, r3, #21
 8003e52:	d510      	bpl.n	8003e76 <_scanf_float+0x31e>
 8003e54:	455e      	cmp	r6, fp
 8003e56:	f67f aebf 	bls.w	8003bd8 <_scanf_float+0x80>
 8003e5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003e62:	463a      	mov	r2, r7
 8003e64:	4640      	mov	r0, r8
 8003e66:	4798      	blx	r3
 8003e68:	6923      	ldr	r3, [r4, #16]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	6123      	str	r3, [r4, #16]
 8003e6e:	e7f1      	b.n	8003e54 <_scanf_float+0x2fc>
 8003e70:	46aa      	mov	sl, r5
 8003e72:	9602      	str	r6, [sp, #8]
 8003e74:	e7df      	b.n	8003e36 <_scanf_float+0x2de>
 8003e76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003e7a:	6923      	ldr	r3, [r4, #16]
 8003e7c:	2965      	cmp	r1, #101	; 0x65
 8003e7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003e82:	f106 35ff 	add.w	r5, r6, #4294967295
 8003e86:	6123      	str	r3, [r4, #16]
 8003e88:	d00c      	beq.n	8003ea4 <_scanf_float+0x34c>
 8003e8a:	2945      	cmp	r1, #69	; 0x45
 8003e8c:	d00a      	beq.n	8003ea4 <_scanf_float+0x34c>
 8003e8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e92:	463a      	mov	r2, r7
 8003e94:	4640      	mov	r0, r8
 8003e96:	4798      	blx	r3
 8003e98:	6923      	ldr	r3, [r4, #16]
 8003e9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	1eb5      	subs	r5, r6, #2
 8003ea2:	6123      	str	r3, [r4, #16]
 8003ea4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ea8:	463a      	mov	r2, r7
 8003eaa:	4640      	mov	r0, r8
 8003eac:	4798      	blx	r3
 8003eae:	462e      	mov	r6, r5
 8003eb0:	6825      	ldr	r5, [r4, #0]
 8003eb2:	f015 0510 	ands.w	r5, r5, #16
 8003eb6:	d159      	bne.n	8003f6c <_scanf_float+0x414>
 8003eb8:	7035      	strb	r5, [r6, #0]
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec4:	d11b      	bne.n	8003efe <_scanf_float+0x3a6>
 8003ec6:	9b01      	ldr	r3, [sp, #4]
 8003ec8:	454b      	cmp	r3, r9
 8003eca:	eba3 0209 	sub.w	r2, r3, r9
 8003ece:	d123      	bne.n	8003f18 <_scanf_float+0x3c0>
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	4659      	mov	r1, fp
 8003ed4:	4640      	mov	r0, r8
 8003ed6:	f000 fe99 	bl	8004c0c <_strtod_r>
 8003eda:	6822      	ldr	r2, [r4, #0]
 8003edc:	9b03      	ldr	r3, [sp, #12]
 8003ede:	f012 0f02 	tst.w	r2, #2
 8003ee2:	ec57 6b10 	vmov	r6, r7, d0
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	d021      	beq.n	8003f2e <_scanf_float+0x3d6>
 8003eea:	9903      	ldr	r1, [sp, #12]
 8003eec:	1d1a      	adds	r2, r3, #4
 8003eee:	600a      	str	r2, [r1, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	e9c3 6700 	strd	r6, r7, [r3]
 8003ef6:	68e3      	ldr	r3, [r4, #12]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	60e3      	str	r3, [r4, #12]
 8003efc:	e66d      	b.n	8003bda <_scanf_float+0x82>
 8003efe:	9b04      	ldr	r3, [sp, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0e5      	beq.n	8003ed0 <_scanf_float+0x378>
 8003f04:	9905      	ldr	r1, [sp, #20]
 8003f06:	230a      	movs	r3, #10
 8003f08:	462a      	mov	r2, r5
 8003f0a:	3101      	adds	r1, #1
 8003f0c:	4640      	mov	r0, r8
 8003f0e:	f000 ff05 	bl	8004d1c <_strtol_r>
 8003f12:	9b04      	ldr	r3, [sp, #16]
 8003f14:	9e05      	ldr	r6, [sp, #20]
 8003f16:	1ac2      	subs	r2, r0, r3
 8003f18:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003f1c:	429e      	cmp	r6, r3
 8003f1e:	bf28      	it	cs
 8003f20:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003f24:	4912      	ldr	r1, [pc, #72]	; (8003f70 <_scanf_float+0x418>)
 8003f26:	4630      	mov	r0, r6
 8003f28:	f000 f82c 	bl	8003f84 <siprintf>
 8003f2c:	e7d0      	b.n	8003ed0 <_scanf_float+0x378>
 8003f2e:	9903      	ldr	r1, [sp, #12]
 8003f30:	f012 0f04 	tst.w	r2, #4
 8003f34:	f103 0204 	add.w	r2, r3, #4
 8003f38:	600a      	str	r2, [r1, #0]
 8003f3a:	d1d9      	bne.n	8003ef0 <_scanf_float+0x398>
 8003f3c:	f8d3 8000 	ldr.w	r8, [r3]
 8003f40:	ee10 2a10 	vmov	r2, s0
 8003f44:	ee10 0a10 	vmov	r0, s0
 8003f48:	463b      	mov	r3, r7
 8003f4a:	4639      	mov	r1, r7
 8003f4c:	f7fc fdee 	bl	8000b2c <__aeabi_dcmpun>
 8003f50:	b128      	cbz	r0, 8003f5e <_scanf_float+0x406>
 8003f52:	4808      	ldr	r0, [pc, #32]	; (8003f74 <_scanf_float+0x41c>)
 8003f54:	f000 f810 	bl	8003f78 <nanf>
 8003f58:	ed88 0a00 	vstr	s0, [r8]
 8003f5c:	e7cb      	b.n	8003ef6 <_scanf_float+0x39e>
 8003f5e:	4630      	mov	r0, r6
 8003f60:	4639      	mov	r1, r7
 8003f62:	f7fc fe41 	bl	8000be8 <__aeabi_d2f>
 8003f66:	f8c8 0000 	str.w	r0, [r8]
 8003f6a:	e7c4      	b.n	8003ef6 <_scanf_float+0x39e>
 8003f6c:	2500      	movs	r5, #0
 8003f6e:	e634      	b.n	8003bda <_scanf_float+0x82>
 8003f70:	08007c44 	.word	0x08007c44
 8003f74:	080080b8 	.word	0x080080b8

08003f78 <nanf>:
 8003f78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003f80 <nanf+0x8>
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	7fc00000 	.word	0x7fc00000

08003f84 <siprintf>:
 8003f84:	b40e      	push	{r1, r2, r3}
 8003f86:	b500      	push	{lr}
 8003f88:	b09c      	sub	sp, #112	; 0x70
 8003f8a:	ab1d      	add	r3, sp, #116	; 0x74
 8003f8c:	9002      	str	r0, [sp, #8]
 8003f8e:	9006      	str	r0, [sp, #24]
 8003f90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f94:	4809      	ldr	r0, [pc, #36]	; (8003fbc <siprintf+0x38>)
 8003f96:	9107      	str	r1, [sp, #28]
 8003f98:	9104      	str	r1, [sp, #16]
 8003f9a:	4909      	ldr	r1, [pc, #36]	; (8003fc0 <siprintf+0x3c>)
 8003f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fa0:	9105      	str	r1, [sp, #20]
 8003fa2:	6800      	ldr	r0, [r0, #0]
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	a902      	add	r1, sp, #8
 8003fa8:	f002 ffdc 	bl	8006f64 <_svfiprintf_r>
 8003fac:	9b02      	ldr	r3, [sp, #8]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
 8003fb2:	b01c      	add	sp, #112	; 0x70
 8003fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fb8:	b003      	add	sp, #12
 8003fba:	4770      	bx	lr
 8003fbc:	20000020 	.word	0x20000020
 8003fc0:	ffff0208 	.word	0xffff0208

08003fc4 <sulp>:
 8003fc4:	b570      	push	{r4, r5, r6, lr}
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	460d      	mov	r5, r1
 8003fca:	ec45 4b10 	vmov	d0, r4, r5
 8003fce:	4616      	mov	r6, r2
 8003fd0:	f002 fd26 	bl	8006a20 <__ulp>
 8003fd4:	ec51 0b10 	vmov	r0, r1, d0
 8003fd8:	b17e      	cbz	r6, 8003ffa <sulp+0x36>
 8003fda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003fde:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	dd09      	ble.n	8003ffa <sulp+0x36>
 8003fe6:	051b      	lsls	r3, r3, #20
 8003fe8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003fec:	2400      	movs	r4, #0
 8003fee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003ff2:	4622      	mov	r2, r4
 8003ff4:	462b      	mov	r3, r5
 8003ff6:	f7fc faff 	bl	80005f8 <__aeabi_dmul>
 8003ffa:	bd70      	pop	{r4, r5, r6, pc}
 8003ffc:	0000      	movs	r0, r0
	...

08004000 <_strtod_l>:
 8004000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004004:	ed2d 8b02 	vpush	{d8}
 8004008:	b09d      	sub	sp, #116	; 0x74
 800400a:	461f      	mov	r7, r3
 800400c:	2300      	movs	r3, #0
 800400e:	9318      	str	r3, [sp, #96]	; 0x60
 8004010:	4ba2      	ldr	r3, [pc, #648]	; (800429c <_strtod_l+0x29c>)
 8004012:	9213      	str	r2, [sp, #76]	; 0x4c
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	9305      	str	r3, [sp, #20]
 8004018:	4604      	mov	r4, r0
 800401a:	4618      	mov	r0, r3
 800401c:	4688      	mov	r8, r1
 800401e:	f7fc f8d7 	bl	80001d0 <strlen>
 8004022:	f04f 0a00 	mov.w	sl, #0
 8004026:	4605      	mov	r5, r0
 8004028:	f04f 0b00 	mov.w	fp, #0
 800402c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004030:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004032:	781a      	ldrb	r2, [r3, #0]
 8004034:	2a2b      	cmp	r2, #43	; 0x2b
 8004036:	d04e      	beq.n	80040d6 <_strtod_l+0xd6>
 8004038:	d83b      	bhi.n	80040b2 <_strtod_l+0xb2>
 800403a:	2a0d      	cmp	r2, #13
 800403c:	d834      	bhi.n	80040a8 <_strtod_l+0xa8>
 800403e:	2a08      	cmp	r2, #8
 8004040:	d834      	bhi.n	80040ac <_strtod_l+0xac>
 8004042:	2a00      	cmp	r2, #0
 8004044:	d03e      	beq.n	80040c4 <_strtod_l+0xc4>
 8004046:	2300      	movs	r3, #0
 8004048:	930a      	str	r3, [sp, #40]	; 0x28
 800404a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800404c:	7833      	ldrb	r3, [r6, #0]
 800404e:	2b30      	cmp	r3, #48	; 0x30
 8004050:	f040 80b0 	bne.w	80041b4 <_strtod_l+0x1b4>
 8004054:	7873      	ldrb	r3, [r6, #1]
 8004056:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800405a:	2b58      	cmp	r3, #88	; 0x58
 800405c:	d168      	bne.n	8004130 <_strtod_l+0x130>
 800405e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	ab18      	add	r3, sp, #96	; 0x60
 8004064:	9702      	str	r7, [sp, #8]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	4a8d      	ldr	r2, [pc, #564]	; (80042a0 <_strtod_l+0x2a0>)
 800406a:	ab19      	add	r3, sp, #100	; 0x64
 800406c:	a917      	add	r1, sp, #92	; 0x5c
 800406e:	4620      	mov	r0, r4
 8004070:	f001 fe2c 	bl	8005ccc <__gethex>
 8004074:	f010 0707 	ands.w	r7, r0, #7
 8004078:	4605      	mov	r5, r0
 800407a:	d005      	beq.n	8004088 <_strtod_l+0x88>
 800407c:	2f06      	cmp	r7, #6
 800407e:	d12c      	bne.n	80040da <_strtod_l+0xda>
 8004080:	3601      	adds	r6, #1
 8004082:	2300      	movs	r3, #0
 8004084:	9617      	str	r6, [sp, #92]	; 0x5c
 8004086:	930a      	str	r3, [sp, #40]	; 0x28
 8004088:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800408a:	2b00      	cmp	r3, #0
 800408c:	f040 8590 	bne.w	8004bb0 <_strtod_l+0xbb0>
 8004090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004092:	b1eb      	cbz	r3, 80040d0 <_strtod_l+0xd0>
 8004094:	4652      	mov	r2, sl
 8004096:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800409a:	ec43 2b10 	vmov	d0, r2, r3
 800409e:	b01d      	add	sp, #116	; 0x74
 80040a0:	ecbd 8b02 	vpop	{d8}
 80040a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a8:	2a20      	cmp	r2, #32
 80040aa:	d1cc      	bne.n	8004046 <_strtod_l+0x46>
 80040ac:	3301      	adds	r3, #1
 80040ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80040b0:	e7be      	b.n	8004030 <_strtod_l+0x30>
 80040b2:	2a2d      	cmp	r2, #45	; 0x2d
 80040b4:	d1c7      	bne.n	8004046 <_strtod_l+0x46>
 80040b6:	2201      	movs	r2, #1
 80040b8:	920a      	str	r2, [sp, #40]	; 0x28
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80040be:	785b      	ldrb	r3, [r3, #1]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1c2      	bne.n	800404a <_strtod_l+0x4a>
 80040c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80040c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f040 856e 	bne.w	8004bac <_strtod_l+0xbac>
 80040d0:	4652      	mov	r2, sl
 80040d2:	465b      	mov	r3, fp
 80040d4:	e7e1      	b.n	800409a <_strtod_l+0x9a>
 80040d6:	2200      	movs	r2, #0
 80040d8:	e7ee      	b.n	80040b8 <_strtod_l+0xb8>
 80040da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80040dc:	b13a      	cbz	r2, 80040ee <_strtod_l+0xee>
 80040de:	2135      	movs	r1, #53	; 0x35
 80040e0:	a81a      	add	r0, sp, #104	; 0x68
 80040e2:	f002 fda8 	bl	8006c36 <__copybits>
 80040e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80040e8:	4620      	mov	r0, r4
 80040ea:	f002 f967 	bl	80063bc <_Bfree>
 80040ee:	3f01      	subs	r7, #1
 80040f0:	2f04      	cmp	r7, #4
 80040f2:	d806      	bhi.n	8004102 <_strtod_l+0x102>
 80040f4:	e8df f007 	tbb	[pc, r7]
 80040f8:	1714030a 	.word	0x1714030a
 80040fc:	0a          	.byte	0x0a
 80040fd:	00          	.byte	0x00
 80040fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004102:	0728      	lsls	r0, r5, #28
 8004104:	d5c0      	bpl.n	8004088 <_strtod_l+0x88>
 8004106:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800410a:	e7bd      	b.n	8004088 <_strtod_l+0x88>
 800410c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004110:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004112:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004116:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800411a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800411e:	e7f0      	b.n	8004102 <_strtod_l+0x102>
 8004120:	f8df b180 	ldr.w	fp, [pc, #384]	; 80042a4 <_strtod_l+0x2a4>
 8004124:	e7ed      	b.n	8004102 <_strtod_l+0x102>
 8004126:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800412a:	f04f 3aff 	mov.w	sl, #4294967295
 800412e:	e7e8      	b.n	8004102 <_strtod_l+0x102>
 8004130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	9217      	str	r2, [sp, #92]	; 0x5c
 8004136:	785b      	ldrb	r3, [r3, #1]
 8004138:	2b30      	cmp	r3, #48	; 0x30
 800413a:	d0f9      	beq.n	8004130 <_strtod_l+0x130>
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0a3      	beq.n	8004088 <_strtod_l+0x88>
 8004140:	2301      	movs	r3, #1
 8004142:	f04f 0900 	mov.w	r9, #0
 8004146:	9304      	str	r3, [sp, #16]
 8004148:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800414a:	9308      	str	r3, [sp, #32]
 800414c:	f8cd 901c 	str.w	r9, [sp, #28]
 8004150:	464f      	mov	r7, r9
 8004152:	220a      	movs	r2, #10
 8004154:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004156:	7806      	ldrb	r6, [r0, #0]
 8004158:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800415c:	b2d9      	uxtb	r1, r3
 800415e:	2909      	cmp	r1, #9
 8004160:	d92a      	bls.n	80041b8 <_strtod_l+0x1b8>
 8004162:	9905      	ldr	r1, [sp, #20]
 8004164:	462a      	mov	r2, r5
 8004166:	f003 f9b2 	bl	80074ce <strncmp>
 800416a:	b398      	cbz	r0, 80041d4 <_strtod_l+0x1d4>
 800416c:	2000      	movs	r0, #0
 800416e:	4632      	mov	r2, r6
 8004170:	463d      	mov	r5, r7
 8004172:	9005      	str	r0, [sp, #20]
 8004174:	4603      	mov	r3, r0
 8004176:	2a65      	cmp	r2, #101	; 0x65
 8004178:	d001      	beq.n	800417e <_strtod_l+0x17e>
 800417a:	2a45      	cmp	r2, #69	; 0x45
 800417c:	d118      	bne.n	80041b0 <_strtod_l+0x1b0>
 800417e:	b91d      	cbnz	r5, 8004188 <_strtod_l+0x188>
 8004180:	9a04      	ldr	r2, [sp, #16]
 8004182:	4302      	orrs	r2, r0
 8004184:	d09e      	beq.n	80040c4 <_strtod_l+0xc4>
 8004186:	2500      	movs	r5, #0
 8004188:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800418c:	f108 0201 	add.w	r2, r8, #1
 8004190:	9217      	str	r2, [sp, #92]	; 0x5c
 8004192:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004196:	2a2b      	cmp	r2, #43	; 0x2b
 8004198:	d075      	beq.n	8004286 <_strtod_l+0x286>
 800419a:	2a2d      	cmp	r2, #45	; 0x2d
 800419c:	d07b      	beq.n	8004296 <_strtod_l+0x296>
 800419e:	f04f 0c00 	mov.w	ip, #0
 80041a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80041a6:	2909      	cmp	r1, #9
 80041a8:	f240 8082 	bls.w	80042b0 <_strtod_l+0x2b0>
 80041ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80041b0:	2600      	movs	r6, #0
 80041b2:	e09d      	b.n	80042f0 <_strtod_l+0x2f0>
 80041b4:	2300      	movs	r3, #0
 80041b6:	e7c4      	b.n	8004142 <_strtod_l+0x142>
 80041b8:	2f08      	cmp	r7, #8
 80041ba:	bfd8      	it	le
 80041bc:	9907      	ldrle	r1, [sp, #28]
 80041be:	f100 0001 	add.w	r0, r0, #1
 80041c2:	bfda      	itte	le
 80041c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80041c8:	9307      	strle	r3, [sp, #28]
 80041ca:	fb02 3909 	mlagt	r9, r2, r9, r3
 80041ce:	3701      	adds	r7, #1
 80041d0:	9017      	str	r0, [sp, #92]	; 0x5c
 80041d2:	e7bf      	b.n	8004154 <_strtod_l+0x154>
 80041d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80041d6:	195a      	adds	r2, r3, r5
 80041d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80041da:	5d5a      	ldrb	r2, [r3, r5]
 80041dc:	2f00      	cmp	r7, #0
 80041de:	d037      	beq.n	8004250 <_strtod_l+0x250>
 80041e0:	9005      	str	r0, [sp, #20]
 80041e2:	463d      	mov	r5, r7
 80041e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80041e8:	2b09      	cmp	r3, #9
 80041ea:	d912      	bls.n	8004212 <_strtod_l+0x212>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e7c2      	b.n	8004176 <_strtod_l+0x176>
 80041f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80041f6:	785a      	ldrb	r2, [r3, #1]
 80041f8:	3001      	adds	r0, #1
 80041fa:	2a30      	cmp	r2, #48	; 0x30
 80041fc:	d0f8      	beq.n	80041f0 <_strtod_l+0x1f0>
 80041fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004202:	2b08      	cmp	r3, #8
 8004204:	f200 84d9 	bhi.w	8004bba <_strtod_l+0xbba>
 8004208:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800420a:	9005      	str	r0, [sp, #20]
 800420c:	2000      	movs	r0, #0
 800420e:	9308      	str	r3, [sp, #32]
 8004210:	4605      	mov	r5, r0
 8004212:	3a30      	subs	r2, #48	; 0x30
 8004214:	f100 0301 	add.w	r3, r0, #1
 8004218:	d014      	beq.n	8004244 <_strtod_l+0x244>
 800421a:	9905      	ldr	r1, [sp, #20]
 800421c:	4419      	add	r1, r3
 800421e:	9105      	str	r1, [sp, #20]
 8004220:	462b      	mov	r3, r5
 8004222:	eb00 0e05 	add.w	lr, r0, r5
 8004226:	210a      	movs	r1, #10
 8004228:	4573      	cmp	r3, lr
 800422a:	d113      	bne.n	8004254 <_strtod_l+0x254>
 800422c:	182b      	adds	r3, r5, r0
 800422e:	2b08      	cmp	r3, #8
 8004230:	f105 0501 	add.w	r5, r5, #1
 8004234:	4405      	add	r5, r0
 8004236:	dc1c      	bgt.n	8004272 <_strtod_l+0x272>
 8004238:	9907      	ldr	r1, [sp, #28]
 800423a:	230a      	movs	r3, #10
 800423c:	fb03 2301 	mla	r3, r3, r1, r2
 8004240:	9307      	str	r3, [sp, #28]
 8004242:	2300      	movs	r3, #0
 8004244:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004246:	1c51      	adds	r1, r2, #1
 8004248:	9117      	str	r1, [sp, #92]	; 0x5c
 800424a:	7852      	ldrb	r2, [r2, #1]
 800424c:	4618      	mov	r0, r3
 800424e:	e7c9      	b.n	80041e4 <_strtod_l+0x1e4>
 8004250:	4638      	mov	r0, r7
 8004252:	e7d2      	b.n	80041fa <_strtod_l+0x1fa>
 8004254:	2b08      	cmp	r3, #8
 8004256:	dc04      	bgt.n	8004262 <_strtod_l+0x262>
 8004258:	9e07      	ldr	r6, [sp, #28]
 800425a:	434e      	muls	r6, r1
 800425c:	9607      	str	r6, [sp, #28]
 800425e:	3301      	adds	r3, #1
 8004260:	e7e2      	b.n	8004228 <_strtod_l+0x228>
 8004262:	f103 0c01 	add.w	ip, r3, #1
 8004266:	f1bc 0f10 	cmp.w	ip, #16
 800426a:	bfd8      	it	le
 800426c:	fb01 f909 	mulle.w	r9, r1, r9
 8004270:	e7f5      	b.n	800425e <_strtod_l+0x25e>
 8004272:	2d10      	cmp	r5, #16
 8004274:	bfdc      	itt	le
 8004276:	230a      	movle	r3, #10
 8004278:	fb03 2909 	mlale	r9, r3, r9, r2
 800427c:	e7e1      	b.n	8004242 <_strtod_l+0x242>
 800427e:	2300      	movs	r3, #0
 8004280:	9305      	str	r3, [sp, #20]
 8004282:	2301      	movs	r3, #1
 8004284:	e77c      	b.n	8004180 <_strtod_l+0x180>
 8004286:	f04f 0c00 	mov.w	ip, #0
 800428a:	f108 0202 	add.w	r2, r8, #2
 800428e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004290:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004294:	e785      	b.n	80041a2 <_strtod_l+0x1a2>
 8004296:	f04f 0c01 	mov.w	ip, #1
 800429a:	e7f6      	b.n	800428a <_strtod_l+0x28a>
 800429c:	08007efc 	.word	0x08007efc
 80042a0:	08007c4c 	.word	0x08007c4c
 80042a4:	7ff00000 	.word	0x7ff00000
 80042a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80042aa:	1c51      	adds	r1, r2, #1
 80042ac:	9117      	str	r1, [sp, #92]	; 0x5c
 80042ae:	7852      	ldrb	r2, [r2, #1]
 80042b0:	2a30      	cmp	r2, #48	; 0x30
 80042b2:	d0f9      	beq.n	80042a8 <_strtod_l+0x2a8>
 80042b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80042b8:	2908      	cmp	r1, #8
 80042ba:	f63f af79 	bhi.w	80041b0 <_strtod_l+0x1b0>
 80042be:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80042c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80042c4:	9206      	str	r2, [sp, #24]
 80042c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80042c8:	1c51      	adds	r1, r2, #1
 80042ca:	9117      	str	r1, [sp, #92]	; 0x5c
 80042cc:	7852      	ldrb	r2, [r2, #1]
 80042ce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80042d2:	2e09      	cmp	r6, #9
 80042d4:	d937      	bls.n	8004346 <_strtod_l+0x346>
 80042d6:	9e06      	ldr	r6, [sp, #24]
 80042d8:	1b89      	subs	r1, r1, r6
 80042da:	2908      	cmp	r1, #8
 80042dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80042e0:	dc02      	bgt.n	80042e8 <_strtod_l+0x2e8>
 80042e2:	4576      	cmp	r6, lr
 80042e4:	bfa8      	it	ge
 80042e6:	4676      	movge	r6, lr
 80042e8:	f1bc 0f00 	cmp.w	ip, #0
 80042ec:	d000      	beq.n	80042f0 <_strtod_l+0x2f0>
 80042ee:	4276      	negs	r6, r6
 80042f0:	2d00      	cmp	r5, #0
 80042f2:	d14d      	bne.n	8004390 <_strtod_l+0x390>
 80042f4:	9904      	ldr	r1, [sp, #16]
 80042f6:	4301      	orrs	r1, r0
 80042f8:	f47f aec6 	bne.w	8004088 <_strtod_l+0x88>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f47f aee1 	bne.w	80040c4 <_strtod_l+0xc4>
 8004302:	2a69      	cmp	r2, #105	; 0x69
 8004304:	d027      	beq.n	8004356 <_strtod_l+0x356>
 8004306:	dc24      	bgt.n	8004352 <_strtod_l+0x352>
 8004308:	2a49      	cmp	r2, #73	; 0x49
 800430a:	d024      	beq.n	8004356 <_strtod_l+0x356>
 800430c:	2a4e      	cmp	r2, #78	; 0x4e
 800430e:	f47f aed9 	bne.w	80040c4 <_strtod_l+0xc4>
 8004312:	499f      	ldr	r1, [pc, #636]	; (8004590 <_strtod_l+0x590>)
 8004314:	a817      	add	r0, sp, #92	; 0x5c
 8004316:	f001 ff31 	bl	800617c <__match>
 800431a:	2800      	cmp	r0, #0
 800431c:	f43f aed2 	beq.w	80040c4 <_strtod_l+0xc4>
 8004320:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b28      	cmp	r3, #40	; 0x28
 8004326:	d12d      	bne.n	8004384 <_strtod_l+0x384>
 8004328:	499a      	ldr	r1, [pc, #616]	; (8004594 <_strtod_l+0x594>)
 800432a:	aa1a      	add	r2, sp, #104	; 0x68
 800432c:	a817      	add	r0, sp, #92	; 0x5c
 800432e:	f001 ff39 	bl	80061a4 <__hexnan>
 8004332:	2805      	cmp	r0, #5
 8004334:	d126      	bne.n	8004384 <_strtod_l+0x384>
 8004336:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004338:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800433c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004340:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004344:	e6a0      	b.n	8004088 <_strtod_l+0x88>
 8004346:	210a      	movs	r1, #10
 8004348:	fb01 2e0e 	mla	lr, r1, lr, r2
 800434c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004350:	e7b9      	b.n	80042c6 <_strtod_l+0x2c6>
 8004352:	2a6e      	cmp	r2, #110	; 0x6e
 8004354:	e7db      	b.n	800430e <_strtod_l+0x30e>
 8004356:	4990      	ldr	r1, [pc, #576]	; (8004598 <_strtod_l+0x598>)
 8004358:	a817      	add	r0, sp, #92	; 0x5c
 800435a:	f001 ff0f 	bl	800617c <__match>
 800435e:	2800      	cmp	r0, #0
 8004360:	f43f aeb0 	beq.w	80040c4 <_strtod_l+0xc4>
 8004364:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004366:	498d      	ldr	r1, [pc, #564]	; (800459c <_strtod_l+0x59c>)
 8004368:	3b01      	subs	r3, #1
 800436a:	a817      	add	r0, sp, #92	; 0x5c
 800436c:	9317      	str	r3, [sp, #92]	; 0x5c
 800436e:	f001 ff05 	bl	800617c <__match>
 8004372:	b910      	cbnz	r0, 800437a <_strtod_l+0x37a>
 8004374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004376:	3301      	adds	r3, #1
 8004378:	9317      	str	r3, [sp, #92]	; 0x5c
 800437a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80045ac <_strtod_l+0x5ac>
 800437e:	f04f 0a00 	mov.w	sl, #0
 8004382:	e681      	b.n	8004088 <_strtod_l+0x88>
 8004384:	4886      	ldr	r0, [pc, #536]	; (80045a0 <_strtod_l+0x5a0>)
 8004386:	f003 f847 	bl	8007418 <nan>
 800438a:	ec5b ab10 	vmov	sl, fp, d0
 800438e:	e67b      	b.n	8004088 <_strtod_l+0x88>
 8004390:	9b05      	ldr	r3, [sp, #20]
 8004392:	9807      	ldr	r0, [sp, #28]
 8004394:	1af3      	subs	r3, r6, r3
 8004396:	2f00      	cmp	r7, #0
 8004398:	bf08      	it	eq
 800439a:	462f      	moveq	r7, r5
 800439c:	2d10      	cmp	r5, #16
 800439e:	9306      	str	r3, [sp, #24]
 80043a0:	46a8      	mov	r8, r5
 80043a2:	bfa8      	it	ge
 80043a4:	f04f 0810 	movge.w	r8, #16
 80043a8:	f7fc f8ac 	bl	8000504 <__aeabi_ui2d>
 80043ac:	2d09      	cmp	r5, #9
 80043ae:	4682      	mov	sl, r0
 80043b0:	468b      	mov	fp, r1
 80043b2:	dd13      	ble.n	80043dc <_strtod_l+0x3dc>
 80043b4:	4b7b      	ldr	r3, [pc, #492]	; (80045a4 <_strtod_l+0x5a4>)
 80043b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80043ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80043be:	f7fc f91b 	bl	80005f8 <__aeabi_dmul>
 80043c2:	4682      	mov	sl, r0
 80043c4:	4648      	mov	r0, r9
 80043c6:	468b      	mov	fp, r1
 80043c8:	f7fc f89c 	bl	8000504 <__aeabi_ui2d>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4650      	mov	r0, sl
 80043d2:	4659      	mov	r1, fp
 80043d4:	f7fb ff5a 	bl	800028c <__adddf3>
 80043d8:	4682      	mov	sl, r0
 80043da:	468b      	mov	fp, r1
 80043dc:	2d0f      	cmp	r5, #15
 80043de:	dc38      	bgt.n	8004452 <_strtod_l+0x452>
 80043e0:	9b06      	ldr	r3, [sp, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f43f ae50 	beq.w	8004088 <_strtod_l+0x88>
 80043e8:	dd24      	ble.n	8004434 <_strtod_l+0x434>
 80043ea:	2b16      	cmp	r3, #22
 80043ec:	dc0b      	bgt.n	8004406 <_strtod_l+0x406>
 80043ee:	496d      	ldr	r1, [pc, #436]	; (80045a4 <_strtod_l+0x5a4>)
 80043f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80043f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043f8:	4652      	mov	r2, sl
 80043fa:	465b      	mov	r3, fp
 80043fc:	f7fc f8fc 	bl	80005f8 <__aeabi_dmul>
 8004400:	4682      	mov	sl, r0
 8004402:	468b      	mov	fp, r1
 8004404:	e640      	b.n	8004088 <_strtod_l+0x88>
 8004406:	9a06      	ldr	r2, [sp, #24]
 8004408:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800440c:	4293      	cmp	r3, r2
 800440e:	db20      	blt.n	8004452 <_strtod_l+0x452>
 8004410:	4c64      	ldr	r4, [pc, #400]	; (80045a4 <_strtod_l+0x5a4>)
 8004412:	f1c5 050f 	rsb	r5, r5, #15
 8004416:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800441a:	4652      	mov	r2, sl
 800441c:	465b      	mov	r3, fp
 800441e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004422:	f7fc f8e9 	bl	80005f8 <__aeabi_dmul>
 8004426:	9b06      	ldr	r3, [sp, #24]
 8004428:	1b5d      	subs	r5, r3, r5
 800442a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800442e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004432:	e7e3      	b.n	80043fc <_strtod_l+0x3fc>
 8004434:	9b06      	ldr	r3, [sp, #24]
 8004436:	3316      	adds	r3, #22
 8004438:	db0b      	blt.n	8004452 <_strtod_l+0x452>
 800443a:	9b05      	ldr	r3, [sp, #20]
 800443c:	1b9e      	subs	r6, r3, r6
 800443e:	4b59      	ldr	r3, [pc, #356]	; (80045a4 <_strtod_l+0x5a4>)
 8004440:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004444:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004448:	4650      	mov	r0, sl
 800444a:	4659      	mov	r1, fp
 800444c:	f7fc f9fe 	bl	800084c <__aeabi_ddiv>
 8004450:	e7d6      	b.n	8004400 <_strtod_l+0x400>
 8004452:	9b06      	ldr	r3, [sp, #24]
 8004454:	eba5 0808 	sub.w	r8, r5, r8
 8004458:	4498      	add	r8, r3
 800445a:	f1b8 0f00 	cmp.w	r8, #0
 800445e:	dd74      	ble.n	800454a <_strtod_l+0x54a>
 8004460:	f018 030f 	ands.w	r3, r8, #15
 8004464:	d00a      	beq.n	800447c <_strtod_l+0x47c>
 8004466:	494f      	ldr	r1, [pc, #316]	; (80045a4 <_strtod_l+0x5a4>)
 8004468:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800446c:	4652      	mov	r2, sl
 800446e:	465b      	mov	r3, fp
 8004470:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004474:	f7fc f8c0 	bl	80005f8 <__aeabi_dmul>
 8004478:	4682      	mov	sl, r0
 800447a:	468b      	mov	fp, r1
 800447c:	f038 080f 	bics.w	r8, r8, #15
 8004480:	d04f      	beq.n	8004522 <_strtod_l+0x522>
 8004482:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004486:	dd22      	ble.n	80044ce <_strtod_l+0x4ce>
 8004488:	2500      	movs	r5, #0
 800448a:	462e      	mov	r6, r5
 800448c:	9507      	str	r5, [sp, #28]
 800448e:	9505      	str	r5, [sp, #20]
 8004490:	2322      	movs	r3, #34	; 0x22
 8004492:	f8df b118 	ldr.w	fp, [pc, #280]	; 80045ac <_strtod_l+0x5ac>
 8004496:	6023      	str	r3, [r4, #0]
 8004498:	f04f 0a00 	mov.w	sl, #0
 800449c:	9b07      	ldr	r3, [sp, #28]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f43f adf2 	beq.w	8004088 <_strtod_l+0x88>
 80044a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80044a6:	4620      	mov	r0, r4
 80044a8:	f001 ff88 	bl	80063bc <_Bfree>
 80044ac:	9905      	ldr	r1, [sp, #20]
 80044ae:	4620      	mov	r0, r4
 80044b0:	f001 ff84 	bl	80063bc <_Bfree>
 80044b4:	4631      	mov	r1, r6
 80044b6:	4620      	mov	r0, r4
 80044b8:	f001 ff80 	bl	80063bc <_Bfree>
 80044bc:	9907      	ldr	r1, [sp, #28]
 80044be:	4620      	mov	r0, r4
 80044c0:	f001 ff7c 	bl	80063bc <_Bfree>
 80044c4:	4629      	mov	r1, r5
 80044c6:	4620      	mov	r0, r4
 80044c8:	f001 ff78 	bl	80063bc <_Bfree>
 80044cc:	e5dc      	b.n	8004088 <_strtod_l+0x88>
 80044ce:	4b36      	ldr	r3, [pc, #216]	; (80045a8 <_strtod_l+0x5a8>)
 80044d0:	9304      	str	r3, [sp, #16]
 80044d2:	2300      	movs	r3, #0
 80044d4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80044d8:	4650      	mov	r0, sl
 80044da:	4659      	mov	r1, fp
 80044dc:	4699      	mov	r9, r3
 80044de:	f1b8 0f01 	cmp.w	r8, #1
 80044e2:	dc21      	bgt.n	8004528 <_strtod_l+0x528>
 80044e4:	b10b      	cbz	r3, 80044ea <_strtod_l+0x4ea>
 80044e6:	4682      	mov	sl, r0
 80044e8:	468b      	mov	fp, r1
 80044ea:	4b2f      	ldr	r3, [pc, #188]	; (80045a8 <_strtod_l+0x5a8>)
 80044ec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80044f0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80044f4:	4652      	mov	r2, sl
 80044f6:	465b      	mov	r3, fp
 80044f8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80044fc:	f7fc f87c 	bl	80005f8 <__aeabi_dmul>
 8004500:	4b2a      	ldr	r3, [pc, #168]	; (80045ac <_strtod_l+0x5ac>)
 8004502:	460a      	mov	r2, r1
 8004504:	400b      	ands	r3, r1
 8004506:	492a      	ldr	r1, [pc, #168]	; (80045b0 <_strtod_l+0x5b0>)
 8004508:	428b      	cmp	r3, r1
 800450a:	4682      	mov	sl, r0
 800450c:	d8bc      	bhi.n	8004488 <_strtod_l+0x488>
 800450e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004512:	428b      	cmp	r3, r1
 8004514:	bf86      	itte	hi
 8004516:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80045b4 <_strtod_l+0x5b4>
 800451a:	f04f 3aff 	movhi.w	sl, #4294967295
 800451e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004522:	2300      	movs	r3, #0
 8004524:	9304      	str	r3, [sp, #16]
 8004526:	e084      	b.n	8004632 <_strtod_l+0x632>
 8004528:	f018 0f01 	tst.w	r8, #1
 800452c:	d005      	beq.n	800453a <_strtod_l+0x53a>
 800452e:	9b04      	ldr	r3, [sp, #16]
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f7fc f860 	bl	80005f8 <__aeabi_dmul>
 8004538:	2301      	movs	r3, #1
 800453a:	9a04      	ldr	r2, [sp, #16]
 800453c:	3208      	adds	r2, #8
 800453e:	f109 0901 	add.w	r9, r9, #1
 8004542:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004546:	9204      	str	r2, [sp, #16]
 8004548:	e7c9      	b.n	80044de <_strtod_l+0x4de>
 800454a:	d0ea      	beq.n	8004522 <_strtod_l+0x522>
 800454c:	f1c8 0800 	rsb	r8, r8, #0
 8004550:	f018 020f 	ands.w	r2, r8, #15
 8004554:	d00a      	beq.n	800456c <_strtod_l+0x56c>
 8004556:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <_strtod_l+0x5a4>)
 8004558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800455c:	4650      	mov	r0, sl
 800455e:	4659      	mov	r1, fp
 8004560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004564:	f7fc f972 	bl	800084c <__aeabi_ddiv>
 8004568:	4682      	mov	sl, r0
 800456a:	468b      	mov	fp, r1
 800456c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004570:	d0d7      	beq.n	8004522 <_strtod_l+0x522>
 8004572:	f1b8 0f1f 	cmp.w	r8, #31
 8004576:	dd1f      	ble.n	80045b8 <_strtod_l+0x5b8>
 8004578:	2500      	movs	r5, #0
 800457a:	462e      	mov	r6, r5
 800457c:	9507      	str	r5, [sp, #28]
 800457e:	9505      	str	r5, [sp, #20]
 8004580:	2322      	movs	r3, #34	; 0x22
 8004582:	f04f 0a00 	mov.w	sl, #0
 8004586:	f04f 0b00 	mov.w	fp, #0
 800458a:	6023      	str	r3, [r4, #0]
 800458c:	e786      	b.n	800449c <_strtod_l+0x49c>
 800458e:	bf00      	nop
 8004590:	08007c1d 	.word	0x08007c1d
 8004594:	08007c60 	.word	0x08007c60
 8004598:	08007c15 	.word	0x08007c15
 800459c:	08007da4 	.word	0x08007da4
 80045a0:	080080b8 	.word	0x080080b8
 80045a4:	08007f98 	.word	0x08007f98
 80045a8:	08007f70 	.word	0x08007f70
 80045ac:	7ff00000 	.word	0x7ff00000
 80045b0:	7ca00000 	.word	0x7ca00000
 80045b4:	7fefffff 	.word	0x7fefffff
 80045b8:	f018 0310 	ands.w	r3, r8, #16
 80045bc:	bf18      	it	ne
 80045be:	236a      	movne	r3, #106	; 0x6a
 80045c0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8004970 <_strtod_l+0x970>
 80045c4:	9304      	str	r3, [sp, #16]
 80045c6:	4650      	mov	r0, sl
 80045c8:	4659      	mov	r1, fp
 80045ca:	2300      	movs	r3, #0
 80045cc:	f018 0f01 	tst.w	r8, #1
 80045d0:	d004      	beq.n	80045dc <_strtod_l+0x5dc>
 80045d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80045d6:	f7fc f80f 	bl	80005f8 <__aeabi_dmul>
 80045da:	2301      	movs	r3, #1
 80045dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80045e0:	f109 0908 	add.w	r9, r9, #8
 80045e4:	d1f2      	bne.n	80045cc <_strtod_l+0x5cc>
 80045e6:	b10b      	cbz	r3, 80045ec <_strtod_l+0x5ec>
 80045e8:	4682      	mov	sl, r0
 80045ea:	468b      	mov	fp, r1
 80045ec:	9b04      	ldr	r3, [sp, #16]
 80045ee:	b1c3      	cbz	r3, 8004622 <_strtod_l+0x622>
 80045f0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80045f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	4659      	mov	r1, fp
 80045fc:	dd11      	ble.n	8004622 <_strtod_l+0x622>
 80045fe:	2b1f      	cmp	r3, #31
 8004600:	f340 8124 	ble.w	800484c <_strtod_l+0x84c>
 8004604:	2b34      	cmp	r3, #52	; 0x34
 8004606:	bfde      	ittt	le
 8004608:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800460c:	f04f 33ff 	movle.w	r3, #4294967295
 8004610:	fa03 f202 	lslle.w	r2, r3, r2
 8004614:	f04f 0a00 	mov.w	sl, #0
 8004618:	bfcc      	ite	gt
 800461a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800461e:	ea02 0b01 	andle.w	fp, r2, r1
 8004622:	2200      	movs	r2, #0
 8004624:	2300      	movs	r3, #0
 8004626:	4650      	mov	r0, sl
 8004628:	4659      	mov	r1, fp
 800462a:	f7fc fa4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800462e:	2800      	cmp	r0, #0
 8004630:	d1a2      	bne.n	8004578 <_strtod_l+0x578>
 8004632:	9b07      	ldr	r3, [sp, #28]
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	9908      	ldr	r1, [sp, #32]
 8004638:	462b      	mov	r3, r5
 800463a:	463a      	mov	r2, r7
 800463c:	4620      	mov	r0, r4
 800463e:	f001 ff25 	bl	800648c <__s2b>
 8004642:	9007      	str	r0, [sp, #28]
 8004644:	2800      	cmp	r0, #0
 8004646:	f43f af1f 	beq.w	8004488 <_strtod_l+0x488>
 800464a:	9b05      	ldr	r3, [sp, #20]
 800464c:	1b9e      	subs	r6, r3, r6
 800464e:	9b06      	ldr	r3, [sp, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	bfb4      	ite	lt
 8004654:	4633      	movlt	r3, r6
 8004656:	2300      	movge	r3, #0
 8004658:	930c      	str	r3, [sp, #48]	; 0x30
 800465a:	9b06      	ldr	r3, [sp, #24]
 800465c:	2500      	movs	r5, #0
 800465e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004662:	9312      	str	r3, [sp, #72]	; 0x48
 8004664:	462e      	mov	r6, r5
 8004666:	9b07      	ldr	r3, [sp, #28]
 8004668:	4620      	mov	r0, r4
 800466a:	6859      	ldr	r1, [r3, #4]
 800466c:	f001 fe66 	bl	800633c <_Balloc>
 8004670:	9005      	str	r0, [sp, #20]
 8004672:	2800      	cmp	r0, #0
 8004674:	f43f af0c 	beq.w	8004490 <_strtod_l+0x490>
 8004678:	9b07      	ldr	r3, [sp, #28]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	3202      	adds	r2, #2
 800467e:	f103 010c 	add.w	r1, r3, #12
 8004682:	0092      	lsls	r2, r2, #2
 8004684:	300c      	adds	r0, #12
 8004686:	f001 fe4b 	bl	8006320 <memcpy>
 800468a:	ec4b ab10 	vmov	d0, sl, fp
 800468e:	aa1a      	add	r2, sp, #104	; 0x68
 8004690:	a919      	add	r1, sp, #100	; 0x64
 8004692:	4620      	mov	r0, r4
 8004694:	f002 fa40 	bl	8006b18 <__d2b>
 8004698:	ec4b ab18 	vmov	d8, sl, fp
 800469c:	9018      	str	r0, [sp, #96]	; 0x60
 800469e:	2800      	cmp	r0, #0
 80046a0:	f43f aef6 	beq.w	8004490 <_strtod_l+0x490>
 80046a4:	2101      	movs	r1, #1
 80046a6:	4620      	mov	r0, r4
 80046a8:	f001 ff8a 	bl	80065c0 <__i2b>
 80046ac:	4606      	mov	r6, r0
 80046ae:	2800      	cmp	r0, #0
 80046b0:	f43f aeee 	beq.w	8004490 <_strtod_l+0x490>
 80046b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046b6:	9904      	ldr	r1, [sp, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bfab      	itete	ge
 80046bc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80046be:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80046c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80046c2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80046c6:	bfac      	ite	ge
 80046c8:	eb03 0902 	addge.w	r9, r3, r2
 80046cc:	1ad7      	sublt	r7, r2, r3
 80046ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80046d0:	eba3 0801 	sub.w	r8, r3, r1
 80046d4:	4490      	add	r8, r2
 80046d6:	4ba1      	ldr	r3, [pc, #644]	; (800495c <_strtod_l+0x95c>)
 80046d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80046dc:	4598      	cmp	r8, r3
 80046de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80046e2:	f280 80c7 	bge.w	8004874 <_strtod_l+0x874>
 80046e6:	eba3 0308 	sub.w	r3, r3, r8
 80046ea:	2b1f      	cmp	r3, #31
 80046ec:	eba2 0203 	sub.w	r2, r2, r3
 80046f0:	f04f 0101 	mov.w	r1, #1
 80046f4:	f300 80b1 	bgt.w	800485a <_strtod_l+0x85a>
 80046f8:	fa01 f303 	lsl.w	r3, r1, r3
 80046fc:	930d      	str	r3, [sp, #52]	; 0x34
 80046fe:	2300      	movs	r3, #0
 8004700:	9308      	str	r3, [sp, #32]
 8004702:	eb09 0802 	add.w	r8, r9, r2
 8004706:	9b04      	ldr	r3, [sp, #16]
 8004708:	45c1      	cmp	r9, r8
 800470a:	4417      	add	r7, r2
 800470c:	441f      	add	r7, r3
 800470e:	464b      	mov	r3, r9
 8004710:	bfa8      	it	ge
 8004712:	4643      	movge	r3, r8
 8004714:	42bb      	cmp	r3, r7
 8004716:	bfa8      	it	ge
 8004718:	463b      	movge	r3, r7
 800471a:	2b00      	cmp	r3, #0
 800471c:	bfc2      	ittt	gt
 800471e:	eba8 0803 	subgt.w	r8, r8, r3
 8004722:	1aff      	subgt	r7, r7, r3
 8004724:	eba9 0903 	subgt.w	r9, r9, r3
 8004728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800472a:	2b00      	cmp	r3, #0
 800472c:	dd17      	ble.n	800475e <_strtod_l+0x75e>
 800472e:	4631      	mov	r1, r6
 8004730:	461a      	mov	r2, r3
 8004732:	4620      	mov	r0, r4
 8004734:	f002 f804 	bl	8006740 <__pow5mult>
 8004738:	4606      	mov	r6, r0
 800473a:	2800      	cmp	r0, #0
 800473c:	f43f aea8 	beq.w	8004490 <_strtod_l+0x490>
 8004740:	4601      	mov	r1, r0
 8004742:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004744:	4620      	mov	r0, r4
 8004746:	f001 ff51 	bl	80065ec <__multiply>
 800474a:	900b      	str	r0, [sp, #44]	; 0x2c
 800474c:	2800      	cmp	r0, #0
 800474e:	f43f ae9f 	beq.w	8004490 <_strtod_l+0x490>
 8004752:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004754:	4620      	mov	r0, r4
 8004756:	f001 fe31 	bl	80063bc <_Bfree>
 800475a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800475c:	9318      	str	r3, [sp, #96]	; 0x60
 800475e:	f1b8 0f00 	cmp.w	r8, #0
 8004762:	f300 808c 	bgt.w	800487e <_strtod_l+0x87e>
 8004766:	9b06      	ldr	r3, [sp, #24]
 8004768:	2b00      	cmp	r3, #0
 800476a:	dd08      	ble.n	800477e <_strtod_l+0x77e>
 800476c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800476e:	9905      	ldr	r1, [sp, #20]
 8004770:	4620      	mov	r0, r4
 8004772:	f001 ffe5 	bl	8006740 <__pow5mult>
 8004776:	9005      	str	r0, [sp, #20]
 8004778:	2800      	cmp	r0, #0
 800477a:	f43f ae89 	beq.w	8004490 <_strtod_l+0x490>
 800477e:	2f00      	cmp	r7, #0
 8004780:	dd08      	ble.n	8004794 <_strtod_l+0x794>
 8004782:	9905      	ldr	r1, [sp, #20]
 8004784:	463a      	mov	r2, r7
 8004786:	4620      	mov	r0, r4
 8004788:	f002 f834 	bl	80067f4 <__lshift>
 800478c:	9005      	str	r0, [sp, #20]
 800478e:	2800      	cmp	r0, #0
 8004790:	f43f ae7e 	beq.w	8004490 <_strtod_l+0x490>
 8004794:	f1b9 0f00 	cmp.w	r9, #0
 8004798:	dd08      	ble.n	80047ac <_strtod_l+0x7ac>
 800479a:	4631      	mov	r1, r6
 800479c:	464a      	mov	r2, r9
 800479e:	4620      	mov	r0, r4
 80047a0:	f002 f828 	bl	80067f4 <__lshift>
 80047a4:	4606      	mov	r6, r0
 80047a6:	2800      	cmp	r0, #0
 80047a8:	f43f ae72 	beq.w	8004490 <_strtod_l+0x490>
 80047ac:	9a05      	ldr	r2, [sp, #20]
 80047ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80047b0:	4620      	mov	r0, r4
 80047b2:	f002 f8ab 	bl	800690c <__mdiff>
 80047b6:	4605      	mov	r5, r0
 80047b8:	2800      	cmp	r0, #0
 80047ba:	f43f ae69 	beq.w	8004490 <_strtod_l+0x490>
 80047be:	68c3      	ldr	r3, [r0, #12]
 80047c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80047c2:	2300      	movs	r3, #0
 80047c4:	60c3      	str	r3, [r0, #12]
 80047c6:	4631      	mov	r1, r6
 80047c8:	f002 f884 	bl	80068d4 <__mcmp>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	da60      	bge.n	8004892 <_strtod_l+0x892>
 80047d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047d2:	ea53 030a 	orrs.w	r3, r3, sl
 80047d6:	f040 8082 	bne.w	80048de <_strtod_l+0x8de>
 80047da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d17d      	bne.n	80048de <_strtod_l+0x8de>
 80047e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80047e6:	0d1b      	lsrs	r3, r3, #20
 80047e8:	051b      	lsls	r3, r3, #20
 80047ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80047ee:	d976      	bls.n	80048de <_strtod_l+0x8de>
 80047f0:	696b      	ldr	r3, [r5, #20]
 80047f2:	b913      	cbnz	r3, 80047fa <_strtod_l+0x7fa>
 80047f4:	692b      	ldr	r3, [r5, #16]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	dd71      	ble.n	80048de <_strtod_l+0x8de>
 80047fa:	4629      	mov	r1, r5
 80047fc:	2201      	movs	r2, #1
 80047fe:	4620      	mov	r0, r4
 8004800:	f001 fff8 	bl	80067f4 <__lshift>
 8004804:	4631      	mov	r1, r6
 8004806:	4605      	mov	r5, r0
 8004808:	f002 f864 	bl	80068d4 <__mcmp>
 800480c:	2800      	cmp	r0, #0
 800480e:	dd66      	ble.n	80048de <_strtod_l+0x8de>
 8004810:	9904      	ldr	r1, [sp, #16]
 8004812:	4a53      	ldr	r2, [pc, #332]	; (8004960 <_strtod_l+0x960>)
 8004814:	465b      	mov	r3, fp
 8004816:	2900      	cmp	r1, #0
 8004818:	f000 8081 	beq.w	800491e <_strtod_l+0x91e>
 800481c:	ea02 010b 	and.w	r1, r2, fp
 8004820:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004824:	dc7b      	bgt.n	800491e <_strtod_l+0x91e>
 8004826:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800482a:	f77f aea9 	ble.w	8004580 <_strtod_l+0x580>
 800482e:	4b4d      	ldr	r3, [pc, #308]	; (8004964 <_strtod_l+0x964>)
 8004830:	4650      	mov	r0, sl
 8004832:	4659      	mov	r1, fp
 8004834:	2200      	movs	r2, #0
 8004836:	f7fb fedf 	bl	80005f8 <__aeabi_dmul>
 800483a:	460b      	mov	r3, r1
 800483c:	4303      	orrs	r3, r0
 800483e:	bf08      	it	eq
 8004840:	2322      	moveq	r3, #34	; 0x22
 8004842:	4682      	mov	sl, r0
 8004844:	468b      	mov	fp, r1
 8004846:	bf08      	it	eq
 8004848:	6023      	streq	r3, [r4, #0]
 800484a:	e62b      	b.n	80044a4 <_strtod_l+0x4a4>
 800484c:	f04f 32ff 	mov.w	r2, #4294967295
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	ea03 0a0a 	and.w	sl, r3, sl
 8004858:	e6e3      	b.n	8004622 <_strtod_l+0x622>
 800485a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800485e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004862:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004866:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800486a:	fa01 f308 	lsl.w	r3, r1, r8
 800486e:	9308      	str	r3, [sp, #32]
 8004870:	910d      	str	r1, [sp, #52]	; 0x34
 8004872:	e746      	b.n	8004702 <_strtod_l+0x702>
 8004874:	2300      	movs	r3, #0
 8004876:	9308      	str	r3, [sp, #32]
 8004878:	2301      	movs	r3, #1
 800487a:	930d      	str	r3, [sp, #52]	; 0x34
 800487c:	e741      	b.n	8004702 <_strtod_l+0x702>
 800487e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004880:	4642      	mov	r2, r8
 8004882:	4620      	mov	r0, r4
 8004884:	f001 ffb6 	bl	80067f4 <__lshift>
 8004888:	9018      	str	r0, [sp, #96]	; 0x60
 800488a:	2800      	cmp	r0, #0
 800488c:	f47f af6b 	bne.w	8004766 <_strtod_l+0x766>
 8004890:	e5fe      	b.n	8004490 <_strtod_l+0x490>
 8004892:	465f      	mov	r7, fp
 8004894:	d16e      	bne.n	8004974 <_strtod_l+0x974>
 8004896:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004898:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800489c:	b342      	cbz	r2, 80048f0 <_strtod_l+0x8f0>
 800489e:	4a32      	ldr	r2, [pc, #200]	; (8004968 <_strtod_l+0x968>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d128      	bne.n	80048f6 <_strtod_l+0x8f6>
 80048a4:	9b04      	ldr	r3, [sp, #16]
 80048a6:	4651      	mov	r1, sl
 80048a8:	b1eb      	cbz	r3, 80048e6 <_strtod_l+0x8e6>
 80048aa:	4b2d      	ldr	r3, [pc, #180]	; (8004960 <_strtod_l+0x960>)
 80048ac:	403b      	ands	r3, r7
 80048ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80048b2:	f04f 32ff 	mov.w	r2, #4294967295
 80048b6:	d819      	bhi.n	80048ec <_strtod_l+0x8ec>
 80048b8:	0d1b      	lsrs	r3, r3, #20
 80048ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	4299      	cmp	r1, r3
 80048c4:	d117      	bne.n	80048f6 <_strtod_l+0x8f6>
 80048c6:	4b29      	ldr	r3, [pc, #164]	; (800496c <_strtod_l+0x96c>)
 80048c8:	429f      	cmp	r7, r3
 80048ca:	d102      	bne.n	80048d2 <_strtod_l+0x8d2>
 80048cc:	3101      	adds	r1, #1
 80048ce:	f43f addf 	beq.w	8004490 <_strtod_l+0x490>
 80048d2:	4b23      	ldr	r3, [pc, #140]	; (8004960 <_strtod_l+0x960>)
 80048d4:	403b      	ands	r3, r7
 80048d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80048da:	f04f 0a00 	mov.w	sl, #0
 80048de:	9b04      	ldr	r3, [sp, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1a4      	bne.n	800482e <_strtod_l+0x82e>
 80048e4:	e5de      	b.n	80044a4 <_strtod_l+0x4a4>
 80048e6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ea:	e7ea      	b.n	80048c2 <_strtod_l+0x8c2>
 80048ec:	4613      	mov	r3, r2
 80048ee:	e7e8      	b.n	80048c2 <_strtod_l+0x8c2>
 80048f0:	ea53 030a 	orrs.w	r3, r3, sl
 80048f4:	d08c      	beq.n	8004810 <_strtod_l+0x810>
 80048f6:	9b08      	ldr	r3, [sp, #32]
 80048f8:	b1db      	cbz	r3, 8004932 <_strtod_l+0x932>
 80048fa:	423b      	tst	r3, r7
 80048fc:	d0ef      	beq.n	80048de <_strtod_l+0x8de>
 80048fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004900:	9a04      	ldr	r2, [sp, #16]
 8004902:	4650      	mov	r0, sl
 8004904:	4659      	mov	r1, fp
 8004906:	b1c3      	cbz	r3, 800493a <_strtod_l+0x93a>
 8004908:	f7ff fb5c 	bl	8003fc4 <sulp>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	ec51 0b18 	vmov	r0, r1, d8
 8004914:	f7fb fcba 	bl	800028c <__adddf3>
 8004918:	4682      	mov	sl, r0
 800491a:	468b      	mov	fp, r1
 800491c:	e7df      	b.n	80048de <_strtod_l+0x8de>
 800491e:	4013      	ands	r3, r2
 8004920:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004924:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004928:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800492c:	f04f 3aff 	mov.w	sl, #4294967295
 8004930:	e7d5      	b.n	80048de <_strtod_l+0x8de>
 8004932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004934:	ea13 0f0a 	tst.w	r3, sl
 8004938:	e7e0      	b.n	80048fc <_strtod_l+0x8fc>
 800493a:	f7ff fb43 	bl	8003fc4 <sulp>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	ec51 0b18 	vmov	r0, r1, d8
 8004946:	f7fb fc9f 	bl	8000288 <__aeabi_dsub>
 800494a:	2200      	movs	r2, #0
 800494c:	2300      	movs	r3, #0
 800494e:	4682      	mov	sl, r0
 8004950:	468b      	mov	fp, r1
 8004952:	f7fc f8b9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004956:	2800      	cmp	r0, #0
 8004958:	d0c1      	beq.n	80048de <_strtod_l+0x8de>
 800495a:	e611      	b.n	8004580 <_strtod_l+0x580>
 800495c:	fffffc02 	.word	0xfffffc02
 8004960:	7ff00000 	.word	0x7ff00000
 8004964:	39500000 	.word	0x39500000
 8004968:	000fffff 	.word	0x000fffff
 800496c:	7fefffff 	.word	0x7fefffff
 8004970:	08007c78 	.word	0x08007c78
 8004974:	4631      	mov	r1, r6
 8004976:	4628      	mov	r0, r5
 8004978:	f002 f92a 	bl	8006bd0 <__ratio>
 800497c:	ec59 8b10 	vmov	r8, r9, d0
 8004980:	ee10 0a10 	vmov	r0, s0
 8004984:	2200      	movs	r2, #0
 8004986:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800498a:	4649      	mov	r1, r9
 800498c:	f7fc f8b0 	bl	8000af0 <__aeabi_dcmple>
 8004990:	2800      	cmp	r0, #0
 8004992:	d07a      	beq.n	8004a8a <_strtod_l+0xa8a>
 8004994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d04a      	beq.n	8004a30 <_strtod_l+0xa30>
 800499a:	4b95      	ldr	r3, [pc, #596]	; (8004bf0 <_strtod_l+0xbf0>)
 800499c:	2200      	movs	r2, #0
 800499e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80049a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004bf0 <_strtod_l+0xbf0>
 80049a6:	f04f 0800 	mov.w	r8, #0
 80049aa:	4b92      	ldr	r3, [pc, #584]	; (8004bf4 <_strtod_l+0xbf4>)
 80049ac:	403b      	ands	r3, r7
 80049ae:	930d      	str	r3, [sp, #52]	; 0x34
 80049b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80049b2:	4b91      	ldr	r3, [pc, #580]	; (8004bf8 <_strtod_l+0xbf8>)
 80049b4:	429a      	cmp	r2, r3
 80049b6:	f040 80b0 	bne.w	8004b1a <_strtod_l+0xb1a>
 80049ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80049be:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80049c2:	ec4b ab10 	vmov	d0, sl, fp
 80049c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80049ca:	f002 f829 	bl	8006a20 <__ulp>
 80049ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80049d2:	ec53 2b10 	vmov	r2, r3, d0
 80049d6:	f7fb fe0f 	bl	80005f8 <__aeabi_dmul>
 80049da:	4652      	mov	r2, sl
 80049dc:	465b      	mov	r3, fp
 80049de:	f7fb fc55 	bl	800028c <__adddf3>
 80049e2:	460b      	mov	r3, r1
 80049e4:	4983      	ldr	r1, [pc, #524]	; (8004bf4 <_strtod_l+0xbf4>)
 80049e6:	4a85      	ldr	r2, [pc, #532]	; (8004bfc <_strtod_l+0xbfc>)
 80049e8:	4019      	ands	r1, r3
 80049ea:	4291      	cmp	r1, r2
 80049ec:	4682      	mov	sl, r0
 80049ee:	d960      	bls.n	8004ab2 <_strtod_l+0xab2>
 80049f0:	ee18 3a90 	vmov	r3, s17
 80049f4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d104      	bne.n	8004a06 <_strtod_l+0xa06>
 80049fc:	ee18 3a10 	vmov	r3, s16
 8004a00:	3301      	adds	r3, #1
 8004a02:	f43f ad45 	beq.w	8004490 <_strtod_l+0x490>
 8004a06:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004c08 <_strtod_l+0xc08>
 8004a0a:	f04f 3aff 	mov.w	sl, #4294967295
 8004a0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004a10:	4620      	mov	r0, r4
 8004a12:	f001 fcd3 	bl	80063bc <_Bfree>
 8004a16:	9905      	ldr	r1, [sp, #20]
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f001 fccf 	bl	80063bc <_Bfree>
 8004a1e:	4631      	mov	r1, r6
 8004a20:	4620      	mov	r0, r4
 8004a22:	f001 fccb 	bl	80063bc <_Bfree>
 8004a26:	4629      	mov	r1, r5
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f001 fcc7 	bl	80063bc <_Bfree>
 8004a2e:	e61a      	b.n	8004666 <_strtod_l+0x666>
 8004a30:	f1ba 0f00 	cmp.w	sl, #0
 8004a34:	d11b      	bne.n	8004a6e <_strtod_l+0xa6e>
 8004a36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a3a:	b9f3      	cbnz	r3, 8004a7a <_strtod_l+0xa7a>
 8004a3c:	4b6c      	ldr	r3, [pc, #432]	; (8004bf0 <_strtod_l+0xbf0>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	4640      	mov	r0, r8
 8004a42:	4649      	mov	r1, r9
 8004a44:	f7fc f84a 	bl	8000adc <__aeabi_dcmplt>
 8004a48:	b9d0      	cbnz	r0, 8004a80 <_strtod_l+0xa80>
 8004a4a:	4640      	mov	r0, r8
 8004a4c:	4649      	mov	r1, r9
 8004a4e:	4b6c      	ldr	r3, [pc, #432]	; (8004c00 <_strtod_l+0xc00>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	f7fb fdd1 	bl	80005f8 <__aeabi_dmul>
 8004a56:	4680      	mov	r8, r0
 8004a58:	4689      	mov	r9, r1
 8004a5a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004a5e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8004a62:	9315      	str	r3, [sp, #84]	; 0x54
 8004a64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004a68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004a6c:	e79d      	b.n	80049aa <_strtod_l+0x9aa>
 8004a6e:	f1ba 0f01 	cmp.w	sl, #1
 8004a72:	d102      	bne.n	8004a7a <_strtod_l+0xa7a>
 8004a74:	2f00      	cmp	r7, #0
 8004a76:	f43f ad83 	beq.w	8004580 <_strtod_l+0x580>
 8004a7a:	4b62      	ldr	r3, [pc, #392]	; (8004c04 <_strtod_l+0xc04>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	e78e      	b.n	800499e <_strtod_l+0x99e>
 8004a80:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004c00 <_strtod_l+0xc00>
 8004a84:	f04f 0800 	mov.w	r8, #0
 8004a88:	e7e7      	b.n	8004a5a <_strtod_l+0xa5a>
 8004a8a:	4b5d      	ldr	r3, [pc, #372]	; (8004c00 <_strtod_l+0xc00>)
 8004a8c:	4640      	mov	r0, r8
 8004a8e:	4649      	mov	r1, r9
 8004a90:	2200      	movs	r2, #0
 8004a92:	f7fb fdb1 	bl	80005f8 <__aeabi_dmul>
 8004a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a98:	4680      	mov	r8, r0
 8004a9a:	4689      	mov	r9, r1
 8004a9c:	b933      	cbnz	r3, 8004aac <_strtod_l+0xaac>
 8004a9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004aa2:	900e      	str	r0, [sp, #56]	; 0x38
 8004aa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004aa6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004aaa:	e7dd      	b.n	8004a68 <_strtod_l+0xa68>
 8004aac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004ab0:	e7f9      	b.n	8004aa6 <_strtod_l+0xaa6>
 8004ab2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004ab6:	9b04      	ldr	r3, [sp, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1a8      	bne.n	8004a0e <_strtod_l+0xa0e>
 8004abc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004ac0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ac2:	0d1b      	lsrs	r3, r3, #20
 8004ac4:	051b      	lsls	r3, r3, #20
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d1a1      	bne.n	8004a0e <_strtod_l+0xa0e>
 8004aca:	4640      	mov	r0, r8
 8004acc:	4649      	mov	r1, r9
 8004ace:	f7fc f8f3 	bl	8000cb8 <__aeabi_d2lz>
 8004ad2:	f7fb fd63 	bl	800059c <__aeabi_l2d>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4640      	mov	r0, r8
 8004adc:	4649      	mov	r1, r9
 8004ade:	f7fb fbd3 	bl	8000288 <__aeabi_dsub>
 8004ae2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ae4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ae8:	ea43 030a 	orr.w	r3, r3, sl
 8004aec:	4313      	orrs	r3, r2
 8004aee:	4680      	mov	r8, r0
 8004af0:	4689      	mov	r9, r1
 8004af2:	d055      	beq.n	8004ba0 <_strtod_l+0xba0>
 8004af4:	a336      	add	r3, pc, #216	; (adr r3, 8004bd0 <_strtod_l+0xbd0>)
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	f7fb ffef 	bl	8000adc <__aeabi_dcmplt>
 8004afe:	2800      	cmp	r0, #0
 8004b00:	f47f acd0 	bne.w	80044a4 <_strtod_l+0x4a4>
 8004b04:	a334      	add	r3, pc, #208	; (adr r3, 8004bd8 <_strtod_l+0xbd8>)
 8004b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	f7fc f803 	bl	8000b18 <__aeabi_dcmpgt>
 8004b12:	2800      	cmp	r0, #0
 8004b14:	f43f af7b 	beq.w	8004a0e <_strtod_l+0xa0e>
 8004b18:	e4c4      	b.n	80044a4 <_strtod_l+0x4a4>
 8004b1a:	9b04      	ldr	r3, [sp, #16]
 8004b1c:	b333      	cbz	r3, 8004b6c <_strtod_l+0xb6c>
 8004b1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b20:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004b24:	d822      	bhi.n	8004b6c <_strtod_l+0xb6c>
 8004b26:	a32e      	add	r3, pc, #184	; (adr r3, 8004be0 <_strtod_l+0xbe0>)
 8004b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2c:	4640      	mov	r0, r8
 8004b2e:	4649      	mov	r1, r9
 8004b30:	f7fb ffde 	bl	8000af0 <__aeabi_dcmple>
 8004b34:	b1a0      	cbz	r0, 8004b60 <_strtod_l+0xb60>
 8004b36:	4649      	mov	r1, r9
 8004b38:	4640      	mov	r0, r8
 8004b3a:	f7fc f835 	bl	8000ba8 <__aeabi_d2uiz>
 8004b3e:	2801      	cmp	r0, #1
 8004b40:	bf38      	it	cc
 8004b42:	2001      	movcc	r0, #1
 8004b44:	f7fb fcde 	bl	8000504 <__aeabi_ui2d>
 8004b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b4a:	4680      	mov	r8, r0
 8004b4c:	4689      	mov	r9, r1
 8004b4e:	bb23      	cbnz	r3, 8004b9a <_strtod_l+0xb9a>
 8004b50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b54:	9010      	str	r0, [sp, #64]	; 0x40
 8004b56:	9311      	str	r3, [sp, #68]	; 0x44
 8004b58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b64:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004b68:	1a9b      	subs	r3, r3, r2
 8004b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004b70:	eeb0 0a48 	vmov.f32	s0, s16
 8004b74:	eef0 0a68 	vmov.f32	s1, s17
 8004b78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004b7c:	f001 ff50 	bl	8006a20 <__ulp>
 8004b80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004b84:	ec53 2b10 	vmov	r2, r3, d0
 8004b88:	f7fb fd36 	bl	80005f8 <__aeabi_dmul>
 8004b8c:	ec53 2b18 	vmov	r2, r3, d8
 8004b90:	f7fb fb7c 	bl	800028c <__adddf3>
 8004b94:	4682      	mov	sl, r0
 8004b96:	468b      	mov	fp, r1
 8004b98:	e78d      	b.n	8004ab6 <_strtod_l+0xab6>
 8004b9a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8004b9e:	e7db      	b.n	8004b58 <_strtod_l+0xb58>
 8004ba0:	a311      	add	r3, pc, #68	; (adr r3, 8004be8 <_strtod_l+0xbe8>)
 8004ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba6:	f7fb ff99 	bl	8000adc <__aeabi_dcmplt>
 8004baa:	e7b2      	b.n	8004b12 <_strtod_l+0xb12>
 8004bac:	2300      	movs	r3, #0
 8004bae:	930a      	str	r3, [sp, #40]	; 0x28
 8004bb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004bb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	f7ff ba6b 	b.w	8004090 <_strtod_l+0x90>
 8004bba:	2a65      	cmp	r2, #101	; 0x65
 8004bbc:	f43f ab5f 	beq.w	800427e <_strtod_l+0x27e>
 8004bc0:	2a45      	cmp	r2, #69	; 0x45
 8004bc2:	f43f ab5c 	beq.w	800427e <_strtod_l+0x27e>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f7ff bb94 	b.w	80042f4 <_strtod_l+0x2f4>
 8004bcc:	f3af 8000 	nop.w
 8004bd0:	94a03595 	.word	0x94a03595
 8004bd4:	3fdfffff 	.word	0x3fdfffff
 8004bd8:	35afe535 	.word	0x35afe535
 8004bdc:	3fe00000 	.word	0x3fe00000
 8004be0:	ffc00000 	.word	0xffc00000
 8004be4:	41dfffff 	.word	0x41dfffff
 8004be8:	94a03595 	.word	0x94a03595
 8004bec:	3fcfffff 	.word	0x3fcfffff
 8004bf0:	3ff00000 	.word	0x3ff00000
 8004bf4:	7ff00000 	.word	0x7ff00000
 8004bf8:	7fe00000 	.word	0x7fe00000
 8004bfc:	7c9fffff 	.word	0x7c9fffff
 8004c00:	3fe00000 	.word	0x3fe00000
 8004c04:	bff00000 	.word	0xbff00000
 8004c08:	7fefffff 	.word	0x7fefffff

08004c0c <_strtod_r>:
 8004c0c:	4b01      	ldr	r3, [pc, #4]	; (8004c14 <_strtod_r+0x8>)
 8004c0e:	f7ff b9f7 	b.w	8004000 <_strtod_l>
 8004c12:	bf00      	nop
 8004c14:	20000088 	.word	0x20000088

08004c18 <_strtol_l.constprop.0>:
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c1e:	d001      	beq.n	8004c24 <_strtol_l.constprop.0+0xc>
 8004c20:	2b24      	cmp	r3, #36	; 0x24
 8004c22:	d906      	bls.n	8004c32 <_strtol_l.constprop.0+0x1a>
 8004c24:	f7fe fafc 	bl	8003220 <__errno>
 8004c28:	2316      	movs	r3, #22
 8004c2a:	6003      	str	r3, [r0, #0]
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004d18 <_strtol_l.constprop.0+0x100>
 8004c36:	460d      	mov	r5, r1
 8004c38:	462e      	mov	r6, r5
 8004c3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c3e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004c42:	f017 0708 	ands.w	r7, r7, #8
 8004c46:	d1f7      	bne.n	8004c38 <_strtol_l.constprop.0+0x20>
 8004c48:	2c2d      	cmp	r4, #45	; 0x2d
 8004c4a:	d132      	bne.n	8004cb2 <_strtol_l.constprop.0+0x9a>
 8004c4c:	782c      	ldrb	r4, [r5, #0]
 8004c4e:	2701      	movs	r7, #1
 8004c50:	1cb5      	adds	r5, r6, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d05b      	beq.n	8004d0e <_strtol_l.constprop.0+0xf6>
 8004c56:	2b10      	cmp	r3, #16
 8004c58:	d109      	bne.n	8004c6e <_strtol_l.constprop.0+0x56>
 8004c5a:	2c30      	cmp	r4, #48	; 0x30
 8004c5c:	d107      	bne.n	8004c6e <_strtol_l.constprop.0+0x56>
 8004c5e:	782c      	ldrb	r4, [r5, #0]
 8004c60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004c64:	2c58      	cmp	r4, #88	; 0x58
 8004c66:	d14d      	bne.n	8004d04 <_strtol_l.constprop.0+0xec>
 8004c68:	786c      	ldrb	r4, [r5, #1]
 8004c6a:	2310      	movs	r3, #16
 8004c6c:	3502      	adds	r5, #2
 8004c6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004c72:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c76:	f04f 0c00 	mov.w	ip, #0
 8004c7a:	fbb8 f9f3 	udiv	r9, r8, r3
 8004c7e:	4666      	mov	r6, ip
 8004c80:	fb03 8a19 	mls	sl, r3, r9, r8
 8004c84:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004c88:	f1be 0f09 	cmp.w	lr, #9
 8004c8c:	d816      	bhi.n	8004cbc <_strtol_l.constprop.0+0xa4>
 8004c8e:	4674      	mov	r4, lr
 8004c90:	42a3      	cmp	r3, r4
 8004c92:	dd24      	ble.n	8004cde <_strtol_l.constprop.0+0xc6>
 8004c94:	f1bc 0f00 	cmp.w	ip, #0
 8004c98:	db1e      	blt.n	8004cd8 <_strtol_l.constprop.0+0xc0>
 8004c9a:	45b1      	cmp	r9, r6
 8004c9c:	d31c      	bcc.n	8004cd8 <_strtol_l.constprop.0+0xc0>
 8004c9e:	d101      	bne.n	8004ca4 <_strtol_l.constprop.0+0x8c>
 8004ca0:	45a2      	cmp	sl, r4
 8004ca2:	db19      	blt.n	8004cd8 <_strtol_l.constprop.0+0xc0>
 8004ca4:	fb06 4603 	mla	r6, r6, r3, r4
 8004ca8:	f04f 0c01 	mov.w	ip, #1
 8004cac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cb0:	e7e8      	b.n	8004c84 <_strtol_l.constprop.0+0x6c>
 8004cb2:	2c2b      	cmp	r4, #43	; 0x2b
 8004cb4:	bf04      	itt	eq
 8004cb6:	782c      	ldrbeq	r4, [r5, #0]
 8004cb8:	1cb5      	addeq	r5, r6, #2
 8004cba:	e7ca      	b.n	8004c52 <_strtol_l.constprop.0+0x3a>
 8004cbc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004cc0:	f1be 0f19 	cmp.w	lr, #25
 8004cc4:	d801      	bhi.n	8004cca <_strtol_l.constprop.0+0xb2>
 8004cc6:	3c37      	subs	r4, #55	; 0x37
 8004cc8:	e7e2      	b.n	8004c90 <_strtol_l.constprop.0+0x78>
 8004cca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004cce:	f1be 0f19 	cmp.w	lr, #25
 8004cd2:	d804      	bhi.n	8004cde <_strtol_l.constprop.0+0xc6>
 8004cd4:	3c57      	subs	r4, #87	; 0x57
 8004cd6:	e7db      	b.n	8004c90 <_strtol_l.constprop.0+0x78>
 8004cd8:	f04f 3cff 	mov.w	ip, #4294967295
 8004cdc:	e7e6      	b.n	8004cac <_strtol_l.constprop.0+0x94>
 8004cde:	f1bc 0f00 	cmp.w	ip, #0
 8004ce2:	da05      	bge.n	8004cf0 <_strtol_l.constprop.0+0xd8>
 8004ce4:	2322      	movs	r3, #34	; 0x22
 8004ce6:	6003      	str	r3, [r0, #0]
 8004ce8:	4646      	mov	r6, r8
 8004cea:	b942      	cbnz	r2, 8004cfe <_strtol_l.constprop.0+0xe6>
 8004cec:	4630      	mov	r0, r6
 8004cee:	e79e      	b.n	8004c2e <_strtol_l.constprop.0+0x16>
 8004cf0:	b107      	cbz	r7, 8004cf4 <_strtol_l.constprop.0+0xdc>
 8004cf2:	4276      	negs	r6, r6
 8004cf4:	2a00      	cmp	r2, #0
 8004cf6:	d0f9      	beq.n	8004cec <_strtol_l.constprop.0+0xd4>
 8004cf8:	f1bc 0f00 	cmp.w	ip, #0
 8004cfc:	d000      	beq.n	8004d00 <_strtol_l.constprop.0+0xe8>
 8004cfe:	1e69      	subs	r1, r5, #1
 8004d00:	6011      	str	r1, [r2, #0]
 8004d02:	e7f3      	b.n	8004cec <_strtol_l.constprop.0+0xd4>
 8004d04:	2430      	movs	r4, #48	; 0x30
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1b1      	bne.n	8004c6e <_strtol_l.constprop.0+0x56>
 8004d0a:	2308      	movs	r3, #8
 8004d0c:	e7af      	b.n	8004c6e <_strtol_l.constprop.0+0x56>
 8004d0e:	2c30      	cmp	r4, #48	; 0x30
 8004d10:	d0a5      	beq.n	8004c5e <_strtol_l.constprop.0+0x46>
 8004d12:	230a      	movs	r3, #10
 8004d14:	e7ab      	b.n	8004c6e <_strtol_l.constprop.0+0x56>
 8004d16:	bf00      	nop
 8004d18:	08007ca1 	.word	0x08007ca1

08004d1c <_strtol_r>:
 8004d1c:	f7ff bf7c 	b.w	8004c18 <_strtol_l.constprop.0>

08004d20 <quorem>:
 8004d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d24:	6903      	ldr	r3, [r0, #16]
 8004d26:	690c      	ldr	r4, [r1, #16]
 8004d28:	42a3      	cmp	r3, r4
 8004d2a:	4607      	mov	r7, r0
 8004d2c:	f2c0 8081 	blt.w	8004e32 <quorem+0x112>
 8004d30:	3c01      	subs	r4, #1
 8004d32:	f101 0814 	add.w	r8, r1, #20
 8004d36:	f100 0514 	add.w	r5, r0, #20
 8004d3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d54:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d58:	d331      	bcc.n	8004dbe <quorem+0x9e>
 8004d5a:	f04f 0e00 	mov.w	lr, #0
 8004d5e:	4640      	mov	r0, r8
 8004d60:	46ac      	mov	ip, r5
 8004d62:	46f2      	mov	sl, lr
 8004d64:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d68:	b293      	uxth	r3, r2
 8004d6a:	fb06 e303 	mla	r3, r6, r3, lr
 8004d6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	ebaa 0303 	sub.w	r3, sl, r3
 8004d78:	f8dc a000 	ldr.w	sl, [ip]
 8004d7c:	0c12      	lsrs	r2, r2, #16
 8004d7e:	fa13 f38a 	uxtah	r3, r3, sl
 8004d82:	fb06 e202 	mla	r2, r6, r2, lr
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	9b00      	ldr	r3, [sp, #0]
 8004d8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d8e:	b292      	uxth	r2, r2
 8004d90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004d94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d98:	f8bd 3000 	ldrh.w	r3, [sp]
 8004d9c:	4581      	cmp	r9, r0
 8004d9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004da2:	f84c 3b04 	str.w	r3, [ip], #4
 8004da6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004daa:	d2db      	bcs.n	8004d64 <quorem+0x44>
 8004dac:	f855 300b 	ldr.w	r3, [r5, fp]
 8004db0:	b92b      	cbnz	r3, 8004dbe <quorem+0x9e>
 8004db2:	9b01      	ldr	r3, [sp, #4]
 8004db4:	3b04      	subs	r3, #4
 8004db6:	429d      	cmp	r5, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	d32e      	bcc.n	8004e1a <quorem+0xfa>
 8004dbc:	613c      	str	r4, [r7, #16]
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	f001 fd88 	bl	80068d4 <__mcmp>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	db24      	blt.n	8004e12 <quorem+0xf2>
 8004dc8:	3601      	adds	r6, #1
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f04f 0c00 	mov.w	ip, #0
 8004dd0:	f858 2b04 	ldr.w	r2, [r8], #4
 8004dd4:	f8d0 e000 	ldr.w	lr, [r0]
 8004dd8:	b293      	uxth	r3, r2
 8004dda:	ebac 0303 	sub.w	r3, ip, r3
 8004dde:	0c12      	lsrs	r2, r2, #16
 8004de0:	fa13 f38e 	uxtah	r3, r3, lr
 8004de4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004de8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004df2:	45c1      	cmp	r9, r8
 8004df4:	f840 3b04 	str.w	r3, [r0], #4
 8004df8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004dfc:	d2e8      	bcs.n	8004dd0 <quorem+0xb0>
 8004dfe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e06:	b922      	cbnz	r2, 8004e12 <quorem+0xf2>
 8004e08:	3b04      	subs	r3, #4
 8004e0a:	429d      	cmp	r5, r3
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	d30a      	bcc.n	8004e26 <quorem+0x106>
 8004e10:	613c      	str	r4, [r7, #16]
 8004e12:	4630      	mov	r0, r6
 8004e14:	b003      	add	sp, #12
 8004e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	3b04      	subs	r3, #4
 8004e1e:	2a00      	cmp	r2, #0
 8004e20:	d1cc      	bne.n	8004dbc <quorem+0x9c>
 8004e22:	3c01      	subs	r4, #1
 8004e24:	e7c7      	b.n	8004db6 <quorem+0x96>
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	3b04      	subs	r3, #4
 8004e2a:	2a00      	cmp	r2, #0
 8004e2c:	d1f0      	bne.n	8004e10 <quorem+0xf0>
 8004e2e:	3c01      	subs	r4, #1
 8004e30:	e7eb      	b.n	8004e0a <quorem+0xea>
 8004e32:	2000      	movs	r0, #0
 8004e34:	e7ee      	b.n	8004e14 <quorem+0xf4>
	...

08004e38 <_dtoa_r>:
 8004e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	ed2d 8b04 	vpush	{d8-d9}
 8004e40:	ec57 6b10 	vmov	r6, r7, d0
 8004e44:	b093      	sub	sp, #76	; 0x4c
 8004e46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004e4c:	9106      	str	r1, [sp, #24]
 8004e4e:	ee10 aa10 	vmov	sl, s0
 8004e52:	4604      	mov	r4, r0
 8004e54:	9209      	str	r2, [sp, #36]	; 0x24
 8004e56:	930c      	str	r3, [sp, #48]	; 0x30
 8004e58:	46bb      	mov	fp, r7
 8004e5a:	b975      	cbnz	r5, 8004e7a <_dtoa_r+0x42>
 8004e5c:	2010      	movs	r0, #16
 8004e5e:	f001 fa45 	bl	80062ec <malloc>
 8004e62:	4602      	mov	r2, r0
 8004e64:	6260      	str	r0, [r4, #36]	; 0x24
 8004e66:	b920      	cbnz	r0, 8004e72 <_dtoa_r+0x3a>
 8004e68:	4ba7      	ldr	r3, [pc, #668]	; (8005108 <_dtoa_r+0x2d0>)
 8004e6a:	21ea      	movs	r1, #234	; 0xea
 8004e6c:	48a7      	ldr	r0, [pc, #668]	; (800510c <_dtoa_r+0x2d4>)
 8004e6e:	f002 fc23 	bl	80076b8 <__assert_func>
 8004e72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e76:	6005      	str	r5, [r0, #0]
 8004e78:	60c5      	str	r5, [r0, #12]
 8004e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e7c:	6819      	ldr	r1, [r3, #0]
 8004e7e:	b151      	cbz	r1, 8004e96 <_dtoa_r+0x5e>
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	604a      	str	r2, [r1, #4]
 8004e84:	2301      	movs	r3, #1
 8004e86:	4093      	lsls	r3, r2
 8004e88:	608b      	str	r3, [r1, #8]
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	f001 fa96 	bl	80063bc <_Bfree>
 8004e90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	1e3b      	subs	r3, r7, #0
 8004e98:	bfaa      	itet	ge
 8004e9a:	2300      	movge	r3, #0
 8004e9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004ea0:	f8c8 3000 	strge.w	r3, [r8]
 8004ea4:	4b9a      	ldr	r3, [pc, #616]	; (8005110 <_dtoa_r+0x2d8>)
 8004ea6:	bfbc      	itt	lt
 8004ea8:	2201      	movlt	r2, #1
 8004eaa:	f8c8 2000 	strlt.w	r2, [r8]
 8004eae:	ea33 030b 	bics.w	r3, r3, fp
 8004eb2:	d11b      	bne.n	8004eec <_dtoa_r+0xb4>
 8004eb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004eb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ec0:	4333      	orrs	r3, r6
 8004ec2:	f000 8592 	beq.w	80059ea <_dtoa_r+0xbb2>
 8004ec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ec8:	b963      	cbnz	r3, 8004ee4 <_dtoa_r+0xac>
 8004eca:	4b92      	ldr	r3, [pc, #584]	; (8005114 <_dtoa_r+0x2dc>)
 8004ecc:	e022      	b.n	8004f14 <_dtoa_r+0xdc>
 8004ece:	4b92      	ldr	r3, [pc, #584]	; (8005118 <_dtoa_r+0x2e0>)
 8004ed0:	9301      	str	r3, [sp, #4]
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	9801      	ldr	r0, [sp, #4]
 8004eda:	b013      	add	sp, #76	; 0x4c
 8004edc:	ecbd 8b04 	vpop	{d8-d9}
 8004ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee4:	4b8b      	ldr	r3, [pc, #556]	; (8005114 <_dtoa_r+0x2dc>)
 8004ee6:	9301      	str	r3, [sp, #4]
 8004ee8:	3303      	adds	r3, #3
 8004eea:	e7f3      	b.n	8004ed4 <_dtoa_r+0x9c>
 8004eec:	2200      	movs	r2, #0
 8004eee:	2300      	movs	r3, #0
 8004ef0:	4650      	mov	r0, sl
 8004ef2:	4659      	mov	r1, fp
 8004ef4:	f7fb fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ef8:	ec4b ab19 	vmov	d9, sl, fp
 8004efc:	4680      	mov	r8, r0
 8004efe:	b158      	cbz	r0, 8004f18 <_dtoa_r+0xe0>
 8004f00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f02:	2301      	movs	r3, #1
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 856b 	beq.w	80059e4 <_dtoa_r+0xbac>
 8004f0e:	4883      	ldr	r0, [pc, #524]	; (800511c <_dtoa_r+0x2e4>)
 8004f10:	6018      	str	r0, [r3, #0]
 8004f12:	1e43      	subs	r3, r0, #1
 8004f14:	9301      	str	r3, [sp, #4]
 8004f16:	e7df      	b.n	8004ed8 <_dtoa_r+0xa0>
 8004f18:	ec4b ab10 	vmov	d0, sl, fp
 8004f1c:	aa10      	add	r2, sp, #64	; 0x40
 8004f1e:	a911      	add	r1, sp, #68	; 0x44
 8004f20:	4620      	mov	r0, r4
 8004f22:	f001 fdf9 	bl	8006b18 <__d2b>
 8004f26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004f2a:	ee08 0a10 	vmov	s16, r0
 8004f2e:	2d00      	cmp	r5, #0
 8004f30:	f000 8084 	beq.w	800503c <_dtoa_r+0x204>
 8004f34:	ee19 3a90 	vmov	r3, s19
 8004f38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004f40:	4656      	mov	r6, sl
 8004f42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004f46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004f4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004f4e:	4b74      	ldr	r3, [pc, #464]	; (8005120 <_dtoa_r+0x2e8>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	4630      	mov	r0, r6
 8004f54:	4639      	mov	r1, r7
 8004f56:	f7fb f997 	bl	8000288 <__aeabi_dsub>
 8004f5a:	a365      	add	r3, pc, #404	; (adr r3, 80050f0 <_dtoa_r+0x2b8>)
 8004f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f60:	f7fb fb4a 	bl	80005f8 <__aeabi_dmul>
 8004f64:	a364      	add	r3, pc, #400	; (adr r3, 80050f8 <_dtoa_r+0x2c0>)
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	f7fb f98f 	bl	800028c <__adddf3>
 8004f6e:	4606      	mov	r6, r0
 8004f70:	4628      	mov	r0, r5
 8004f72:	460f      	mov	r7, r1
 8004f74:	f7fb fad6 	bl	8000524 <__aeabi_i2d>
 8004f78:	a361      	add	r3, pc, #388	; (adr r3, 8005100 <_dtoa_r+0x2c8>)
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	f7fb fb3b 	bl	80005f8 <__aeabi_dmul>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4630      	mov	r0, r6
 8004f88:	4639      	mov	r1, r7
 8004f8a:	f7fb f97f 	bl	800028c <__adddf3>
 8004f8e:	4606      	mov	r6, r0
 8004f90:	460f      	mov	r7, r1
 8004f92:	f7fb fde1 	bl	8000b58 <__aeabi_d2iz>
 8004f96:	2200      	movs	r2, #0
 8004f98:	9000      	str	r0, [sp, #0]
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	4639      	mov	r1, r7
 8004fa0:	f7fb fd9c 	bl	8000adc <__aeabi_dcmplt>
 8004fa4:	b150      	cbz	r0, 8004fbc <_dtoa_r+0x184>
 8004fa6:	9800      	ldr	r0, [sp, #0]
 8004fa8:	f7fb fabc 	bl	8000524 <__aeabi_i2d>
 8004fac:	4632      	mov	r2, r6
 8004fae:	463b      	mov	r3, r7
 8004fb0:	f7fb fd8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fb4:	b910      	cbnz	r0, 8004fbc <_dtoa_r+0x184>
 8004fb6:	9b00      	ldr	r3, [sp, #0]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	9b00      	ldr	r3, [sp, #0]
 8004fbe:	2b16      	cmp	r3, #22
 8004fc0:	d85a      	bhi.n	8005078 <_dtoa_r+0x240>
 8004fc2:	9a00      	ldr	r2, [sp, #0]
 8004fc4:	4b57      	ldr	r3, [pc, #348]	; (8005124 <_dtoa_r+0x2ec>)
 8004fc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	ec51 0b19 	vmov	r0, r1, d9
 8004fd2:	f7fb fd83 	bl	8000adc <__aeabi_dcmplt>
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	d050      	beq.n	800507c <_dtoa_r+0x244>
 8004fda:	9b00      	ldr	r3, [sp, #0]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004fe6:	1b5d      	subs	r5, r3, r5
 8004fe8:	1e6b      	subs	r3, r5, #1
 8004fea:	9305      	str	r3, [sp, #20]
 8004fec:	bf45      	ittet	mi
 8004fee:	f1c5 0301 	rsbmi	r3, r5, #1
 8004ff2:	9304      	strmi	r3, [sp, #16]
 8004ff4:	2300      	movpl	r3, #0
 8004ff6:	2300      	movmi	r3, #0
 8004ff8:	bf4c      	ite	mi
 8004ffa:	9305      	strmi	r3, [sp, #20]
 8004ffc:	9304      	strpl	r3, [sp, #16]
 8004ffe:	9b00      	ldr	r3, [sp, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	db3d      	blt.n	8005080 <_dtoa_r+0x248>
 8005004:	9b05      	ldr	r3, [sp, #20]
 8005006:	9a00      	ldr	r2, [sp, #0]
 8005008:	920a      	str	r2, [sp, #40]	; 0x28
 800500a:	4413      	add	r3, r2
 800500c:	9305      	str	r3, [sp, #20]
 800500e:	2300      	movs	r3, #0
 8005010:	9307      	str	r3, [sp, #28]
 8005012:	9b06      	ldr	r3, [sp, #24]
 8005014:	2b09      	cmp	r3, #9
 8005016:	f200 8089 	bhi.w	800512c <_dtoa_r+0x2f4>
 800501a:	2b05      	cmp	r3, #5
 800501c:	bfc4      	itt	gt
 800501e:	3b04      	subgt	r3, #4
 8005020:	9306      	strgt	r3, [sp, #24]
 8005022:	9b06      	ldr	r3, [sp, #24]
 8005024:	f1a3 0302 	sub.w	r3, r3, #2
 8005028:	bfcc      	ite	gt
 800502a:	2500      	movgt	r5, #0
 800502c:	2501      	movle	r5, #1
 800502e:	2b03      	cmp	r3, #3
 8005030:	f200 8087 	bhi.w	8005142 <_dtoa_r+0x30a>
 8005034:	e8df f003 	tbb	[pc, r3]
 8005038:	59383a2d 	.word	0x59383a2d
 800503c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005040:	441d      	add	r5, r3
 8005042:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005046:	2b20      	cmp	r3, #32
 8005048:	bfc1      	itttt	gt
 800504a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800504e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005052:	fa0b f303 	lslgt.w	r3, fp, r3
 8005056:	fa26 f000 	lsrgt.w	r0, r6, r0
 800505a:	bfda      	itte	le
 800505c:	f1c3 0320 	rsble	r3, r3, #32
 8005060:	fa06 f003 	lslle.w	r0, r6, r3
 8005064:	4318      	orrgt	r0, r3
 8005066:	f7fb fa4d 	bl	8000504 <__aeabi_ui2d>
 800506a:	2301      	movs	r3, #1
 800506c:	4606      	mov	r6, r0
 800506e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005072:	3d01      	subs	r5, #1
 8005074:	930e      	str	r3, [sp, #56]	; 0x38
 8005076:	e76a      	b.n	8004f4e <_dtoa_r+0x116>
 8005078:	2301      	movs	r3, #1
 800507a:	e7b2      	b.n	8004fe2 <_dtoa_r+0x1aa>
 800507c:	900b      	str	r0, [sp, #44]	; 0x2c
 800507e:	e7b1      	b.n	8004fe4 <_dtoa_r+0x1ac>
 8005080:	9b04      	ldr	r3, [sp, #16]
 8005082:	9a00      	ldr	r2, [sp, #0]
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	9304      	str	r3, [sp, #16]
 8005088:	4253      	negs	r3, r2
 800508a:	9307      	str	r3, [sp, #28]
 800508c:	2300      	movs	r3, #0
 800508e:	930a      	str	r3, [sp, #40]	; 0x28
 8005090:	e7bf      	b.n	8005012 <_dtoa_r+0x1da>
 8005092:	2300      	movs	r3, #0
 8005094:	9308      	str	r3, [sp, #32]
 8005096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005098:	2b00      	cmp	r3, #0
 800509a:	dc55      	bgt.n	8005148 <_dtoa_r+0x310>
 800509c:	2301      	movs	r3, #1
 800509e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80050a2:	461a      	mov	r2, r3
 80050a4:	9209      	str	r2, [sp, #36]	; 0x24
 80050a6:	e00c      	b.n	80050c2 <_dtoa_r+0x28a>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e7f3      	b.n	8005094 <_dtoa_r+0x25c>
 80050ac:	2300      	movs	r3, #0
 80050ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050b0:	9308      	str	r3, [sp, #32]
 80050b2:	9b00      	ldr	r3, [sp, #0]
 80050b4:	4413      	add	r3, r2
 80050b6:	9302      	str	r3, [sp, #8]
 80050b8:	3301      	adds	r3, #1
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	9303      	str	r3, [sp, #12]
 80050be:	bfb8      	it	lt
 80050c0:	2301      	movlt	r3, #1
 80050c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80050c4:	2200      	movs	r2, #0
 80050c6:	6042      	str	r2, [r0, #4]
 80050c8:	2204      	movs	r2, #4
 80050ca:	f102 0614 	add.w	r6, r2, #20
 80050ce:	429e      	cmp	r6, r3
 80050d0:	6841      	ldr	r1, [r0, #4]
 80050d2:	d93d      	bls.n	8005150 <_dtoa_r+0x318>
 80050d4:	4620      	mov	r0, r4
 80050d6:	f001 f931 	bl	800633c <_Balloc>
 80050da:	9001      	str	r0, [sp, #4]
 80050dc:	2800      	cmp	r0, #0
 80050de:	d13b      	bne.n	8005158 <_dtoa_r+0x320>
 80050e0:	4b11      	ldr	r3, [pc, #68]	; (8005128 <_dtoa_r+0x2f0>)
 80050e2:	4602      	mov	r2, r0
 80050e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80050e8:	e6c0      	b.n	8004e6c <_dtoa_r+0x34>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e7df      	b.n	80050ae <_dtoa_r+0x276>
 80050ee:	bf00      	nop
 80050f0:	636f4361 	.word	0x636f4361
 80050f4:	3fd287a7 	.word	0x3fd287a7
 80050f8:	8b60c8b3 	.word	0x8b60c8b3
 80050fc:	3fc68a28 	.word	0x3fc68a28
 8005100:	509f79fb 	.word	0x509f79fb
 8005104:	3fd34413 	.word	0x3fd34413
 8005108:	08007dae 	.word	0x08007dae
 800510c:	08007dc5 	.word	0x08007dc5
 8005110:	7ff00000 	.word	0x7ff00000
 8005114:	08007daa 	.word	0x08007daa
 8005118:	08007da1 	.word	0x08007da1
 800511c:	08007c21 	.word	0x08007c21
 8005120:	3ff80000 	.word	0x3ff80000
 8005124:	08007f98 	.word	0x08007f98
 8005128:	08007e20 	.word	0x08007e20
 800512c:	2501      	movs	r5, #1
 800512e:	2300      	movs	r3, #0
 8005130:	9306      	str	r3, [sp, #24]
 8005132:	9508      	str	r5, [sp, #32]
 8005134:	f04f 33ff 	mov.w	r3, #4294967295
 8005138:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800513c:	2200      	movs	r2, #0
 800513e:	2312      	movs	r3, #18
 8005140:	e7b0      	b.n	80050a4 <_dtoa_r+0x26c>
 8005142:	2301      	movs	r3, #1
 8005144:	9308      	str	r3, [sp, #32]
 8005146:	e7f5      	b.n	8005134 <_dtoa_r+0x2fc>
 8005148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800514a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800514e:	e7b8      	b.n	80050c2 <_dtoa_r+0x28a>
 8005150:	3101      	adds	r1, #1
 8005152:	6041      	str	r1, [r0, #4]
 8005154:	0052      	lsls	r2, r2, #1
 8005156:	e7b8      	b.n	80050ca <_dtoa_r+0x292>
 8005158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800515a:	9a01      	ldr	r2, [sp, #4]
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	9b03      	ldr	r3, [sp, #12]
 8005160:	2b0e      	cmp	r3, #14
 8005162:	f200 809d 	bhi.w	80052a0 <_dtoa_r+0x468>
 8005166:	2d00      	cmp	r5, #0
 8005168:	f000 809a 	beq.w	80052a0 <_dtoa_r+0x468>
 800516c:	9b00      	ldr	r3, [sp, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	dd32      	ble.n	80051d8 <_dtoa_r+0x3a0>
 8005172:	4ab7      	ldr	r2, [pc, #732]	; (8005450 <_dtoa_r+0x618>)
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800517c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005180:	9b00      	ldr	r3, [sp, #0]
 8005182:	05d8      	lsls	r0, r3, #23
 8005184:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005188:	d516      	bpl.n	80051b8 <_dtoa_r+0x380>
 800518a:	4bb2      	ldr	r3, [pc, #712]	; (8005454 <_dtoa_r+0x61c>)
 800518c:	ec51 0b19 	vmov	r0, r1, d9
 8005190:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005194:	f7fb fb5a 	bl	800084c <__aeabi_ddiv>
 8005198:	f007 070f 	and.w	r7, r7, #15
 800519c:	4682      	mov	sl, r0
 800519e:	468b      	mov	fp, r1
 80051a0:	2503      	movs	r5, #3
 80051a2:	4eac      	ldr	r6, [pc, #688]	; (8005454 <_dtoa_r+0x61c>)
 80051a4:	b957      	cbnz	r7, 80051bc <_dtoa_r+0x384>
 80051a6:	4642      	mov	r2, r8
 80051a8:	464b      	mov	r3, r9
 80051aa:	4650      	mov	r0, sl
 80051ac:	4659      	mov	r1, fp
 80051ae:	f7fb fb4d 	bl	800084c <__aeabi_ddiv>
 80051b2:	4682      	mov	sl, r0
 80051b4:	468b      	mov	fp, r1
 80051b6:	e028      	b.n	800520a <_dtoa_r+0x3d2>
 80051b8:	2502      	movs	r5, #2
 80051ba:	e7f2      	b.n	80051a2 <_dtoa_r+0x36a>
 80051bc:	07f9      	lsls	r1, r7, #31
 80051be:	d508      	bpl.n	80051d2 <_dtoa_r+0x39a>
 80051c0:	4640      	mov	r0, r8
 80051c2:	4649      	mov	r1, r9
 80051c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051c8:	f7fb fa16 	bl	80005f8 <__aeabi_dmul>
 80051cc:	3501      	adds	r5, #1
 80051ce:	4680      	mov	r8, r0
 80051d0:	4689      	mov	r9, r1
 80051d2:	107f      	asrs	r7, r7, #1
 80051d4:	3608      	adds	r6, #8
 80051d6:	e7e5      	b.n	80051a4 <_dtoa_r+0x36c>
 80051d8:	f000 809b 	beq.w	8005312 <_dtoa_r+0x4da>
 80051dc:	9b00      	ldr	r3, [sp, #0]
 80051de:	4f9d      	ldr	r7, [pc, #628]	; (8005454 <_dtoa_r+0x61c>)
 80051e0:	425e      	negs	r6, r3
 80051e2:	4b9b      	ldr	r3, [pc, #620]	; (8005450 <_dtoa_r+0x618>)
 80051e4:	f006 020f 	and.w	r2, r6, #15
 80051e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f0:	ec51 0b19 	vmov	r0, r1, d9
 80051f4:	f7fb fa00 	bl	80005f8 <__aeabi_dmul>
 80051f8:	1136      	asrs	r6, r6, #4
 80051fa:	4682      	mov	sl, r0
 80051fc:	468b      	mov	fp, r1
 80051fe:	2300      	movs	r3, #0
 8005200:	2502      	movs	r5, #2
 8005202:	2e00      	cmp	r6, #0
 8005204:	d17a      	bne.n	80052fc <_dtoa_r+0x4c4>
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1d3      	bne.n	80051b2 <_dtoa_r+0x37a>
 800520a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8082 	beq.w	8005316 <_dtoa_r+0x4de>
 8005212:	4b91      	ldr	r3, [pc, #580]	; (8005458 <_dtoa_r+0x620>)
 8005214:	2200      	movs	r2, #0
 8005216:	4650      	mov	r0, sl
 8005218:	4659      	mov	r1, fp
 800521a:	f7fb fc5f 	bl	8000adc <__aeabi_dcmplt>
 800521e:	2800      	cmp	r0, #0
 8005220:	d079      	beq.n	8005316 <_dtoa_r+0x4de>
 8005222:	9b03      	ldr	r3, [sp, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d076      	beq.n	8005316 <_dtoa_r+0x4de>
 8005228:	9b02      	ldr	r3, [sp, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	dd36      	ble.n	800529c <_dtoa_r+0x464>
 800522e:	9b00      	ldr	r3, [sp, #0]
 8005230:	4650      	mov	r0, sl
 8005232:	4659      	mov	r1, fp
 8005234:	1e5f      	subs	r7, r3, #1
 8005236:	2200      	movs	r2, #0
 8005238:	4b88      	ldr	r3, [pc, #544]	; (800545c <_dtoa_r+0x624>)
 800523a:	f7fb f9dd 	bl	80005f8 <__aeabi_dmul>
 800523e:	9e02      	ldr	r6, [sp, #8]
 8005240:	4682      	mov	sl, r0
 8005242:	468b      	mov	fp, r1
 8005244:	3501      	adds	r5, #1
 8005246:	4628      	mov	r0, r5
 8005248:	f7fb f96c 	bl	8000524 <__aeabi_i2d>
 800524c:	4652      	mov	r2, sl
 800524e:	465b      	mov	r3, fp
 8005250:	f7fb f9d2 	bl	80005f8 <__aeabi_dmul>
 8005254:	4b82      	ldr	r3, [pc, #520]	; (8005460 <_dtoa_r+0x628>)
 8005256:	2200      	movs	r2, #0
 8005258:	f7fb f818 	bl	800028c <__adddf3>
 800525c:	46d0      	mov	r8, sl
 800525e:	46d9      	mov	r9, fp
 8005260:	4682      	mov	sl, r0
 8005262:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005266:	2e00      	cmp	r6, #0
 8005268:	d158      	bne.n	800531c <_dtoa_r+0x4e4>
 800526a:	4b7e      	ldr	r3, [pc, #504]	; (8005464 <_dtoa_r+0x62c>)
 800526c:	2200      	movs	r2, #0
 800526e:	4640      	mov	r0, r8
 8005270:	4649      	mov	r1, r9
 8005272:	f7fb f809 	bl	8000288 <__aeabi_dsub>
 8005276:	4652      	mov	r2, sl
 8005278:	465b      	mov	r3, fp
 800527a:	4680      	mov	r8, r0
 800527c:	4689      	mov	r9, r1
 800527e:	f7fb fc4b 	bl	8000b18 <__aeabi_dcmpgt>
 8005282:	2800      	cmp	r0, #0
 8005284:	f040 8295 	bne.w	80057b2 <_dtoa_r+0x97a>
 8005288:	4652      	mov	r2, sl
 800528a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800528e:	4640      	mov	r0, r8
 8005290:	4649      	mov	r1, r9
 8005292:	f7fb fc23 	bl	8000adc <__aeabi_dcmplt>
 8005296:	2800      	cmp	r0, #0
 8005298:	f040 8289 	bne.w	80057ae <_dtoa_r+0x976>
 800529c:	ec5b ab19 	vmov	sl, fp, d9
 80052a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f2c0 8148 	blt.w	8005538 <_dtoa_r+0x700>
 80052a8:	9a00      	ldr	r2, [sp, #0]
 80052aa:	2a0e      	cmp	r2, #14
 80052ac:	f300 8144 	bgt.w	8005538 <_dtoa_r+0x700>
 80052b0:	4b67      	ldr	r3, [pc, #412]	; (8005450 <_dtoa_r+0x618>)
 80052b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f280 80d5 	bge.w	800546c <_dtoa_r+0x634>
 80052c2:	9b03      	ldr	r3, [sp, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f300 80d1 	bgt.w	800546c <_dtoa_r+0x634>
 80052ca:	f040 826f 	bne.w	80057ac <_dtoa_r+0x974>
 80052ce:	4b65      	ldr	r3, [pc, #404]	; (8005464 <_dtoa_r+0x62c>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	4640      	mov	r0, r8
 80052d4:	4649      	mov	r1, r9
 80052d6:	f7fb f98f 	bl	80005f8 <__aeabi_dmul>
 80052da:	4652      	mov	r2, sl
 80052dc:	465b      	mov	r3, fp
 80052de:	f7fb fc11 	bl	8000b04 <__aeabi_dcmpge>
 80052e2:	9e03      	ldr	r6, [sp, #12]
 80052e4:	4637      	mov	r7, r6
 80052e6:	2800      	cmp	r0, #0
 80052e8:	f040 8245 	bne.w	8005776 <_dtoa_r+0x93e>
 80052ec:	9d01      	ldr	r5, [sp, #4]
 80052ee:	2331      	movs	r3, #49	; 0x31
 80052f0:	f805 3b01 	strb.w	r3, [r5], #1
 80052f4:	9b00      	ldr	r3, [sp, #0]
 80052f6:	3301      	adds	r3, #1
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	e240      	b.n	800577e <_dtoa_r+0x946>
 80052fc:	07f2      	lsls	r2, r6, #31
 80052fe:	d505      	bpl.n	800530c <_dtoa_r+0x4d4>
 8005300:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005304:	f7fb f978 	bl	80005f8 <__aeabi_dmul>
 8005308:	3501      	adds	r5, #1
 800530a:	2301      	movs	r3, #1
 800530c:	1076      	asrs	r6, r6, #1
 800530e:	3708      	adds	r7, #8
 8005310:	e777      	b.n	8005202 <_dtoa_r+0x3ca>
 8005312:	2502      	movs	r5, #2
 8005314:	e779      	b.n	800520a <_dtoa_r+0x3d2>
 8005316:	9f00      	ldr	r7, [sp, #0]
 8005318:	9e03      	ldr	r6, [sp, #12]
 800531a:	e794      	b.n	8005246 <_dtoa_r+0x40e>
 800531c:	9901      	ldr	r1, [sp, #4]
 800531e:	4b4c      	ldr	r3, [pc, #304]	; (8005450 <_dtoa_r+0x618>)
 8005320:	4431      	add	r1, r6
 8005322:	910d      	str	r1, [sp, #52]	; 0x34
 8005324:	9908      	ldr	r1, [sp, #32]
 8005326:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800532a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800532e:	2900      	cmp	r1, #0
 8005330:	d043      	beq.n	80053ba <_dtoa_r+0x582>
 8005332:	494d      	ldr	r1, [pc, #308]	; (8005468 <_dtoa_r+0x630>)
 8005334:	2000      	movs	r0, #0
 8005336:	f7fb fa89 	bl	800084c <__aeabi_ddiv>
 800533a:	4652      	mov	r2, sl
 800533c:	465b      	mov	r3, fp
 800533e:	f7fa ffa3 	bl	8000288 <__aeabi_dsub>
 8005342:	9d01      	ldr	r5, [sp, #4]
 8005344:	4682      	mov	sl, r0
 8005346:	468b      	mov	fp, r1
 8005348:	4649      	mov	r1, r9
 800534a:	4640      	mov	r0, r8
 800534c:	f7fb fc04 	bl	8000b58 <__aeabi_d2iz>
 8005350:	4606      	mov	r6, r0
 8005352:	f7fb f8e7 	bl	8000524 <__aeabi_i2d>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4640      	mov	r0, r8
 800535c:	4649      	mov	r1, r9
 800535e:	f7fa ff93 	bl	8000288 <__aeabi_dsub>
 8005362:	3630      	adds	r6, #48	; 0x30
 8005364:	f805 6b01 	strb.w	r6, [r5], #1
 8005368:	4652      	mov	r2, sl
 800536a:	465b      	mov	r3, fp
 800536c:	4680      	mov	r8, r0
 800536e:	4689      	mov	r9, r1
 8005370:	f7fb fbb4 	bl	8000adc <__aeabi_dcmplt>
 8005374:	2800      	cmp	r0, #0
 8005376:	d163      	bne.n	8005440 <_dtoa_r+0x608>
 8005378:	4642      	mov	r2, r8
 800537a:	464b      	mov	r3, r9
 800537c:	4936      	ldr	r1, [pc, #216]	; (8005458 <_dtoa_r+0x620>)
 800537e:	2000      	movs	r0, #0
 8005380:	f7fa ff82 	bl	8000288 <__aeabi_dsub>
 8005384:	4652      	mov	r2, sl
 8005386:	465b      	mov	r3, fp
 8005388:	f7fb fba8 	bl	8000adc <__aeabi_dcmplt>
 800538c:	2800      	cmp	r0, #0
 800538e:	f040 80b5 	bne.w	80054fc <_dtoa_r+0x6c4>
 8005392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005394:	429d      	cmp	r5, r3
 8005396:	d081      	beq.n	800529c <_dtoa_r+0x464>
 8005398:	4b30      	ldr	r3, [pc, #192]	; (800545c <_dtoa_r+0x624>)
 800539a:	2200      	movs	r2, #0
 800539c:	4650      	mov	r0, sl
 800539e:	4659      	mov	r1, fp
 80053a0:	f7fb f92a 	bl	80005f8 <__aeabi_dmul>
 80053a4:	4b2d      	ldr	r3, [pc, #180]	; (800545c <_dtoa_r+0x624>)
 80053a6:	4682      	mov	sl, r0
 80053a8:	468b      	mov	fp, r1
 80053aa:	4640      	mov	r0, r8
 80053ac:	4649      	mov	r1, r9
 80053ae:	2200      	movs	r2, #0
 80053b0:	f7fb f922 	bl	80005f8 <__aeabi_dmul>
 80053b4:	4680      	mov	r8, r0
 80053b6:	4689      	mov	r9, r1
 80053b8:	e7c6      	b.n	8005348 <_dtoa_r+0x510>
 80053ba:	4650      	mov	r0, sl
 80053bc:	4659      	mov	r1, fp
 80053be:	f7fb f91b 	bl	80005f8 <__aeabi_dmul>
 80053c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053c4:	9d01      	ldr	r5, [sp, #4]
 80053c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80053c8:	4682      	mov	sl, r0
 80053ca:	468b      	mov	fp, r1
 80053cc:	4649      	mov	r1, r9
 80053ce:	4640      	mov	r0, r8
 80053d0:	f7fb fbc2 	bl	8000b58 <__aeabi_d2iz>
 80053d4:	4606      	mov	r6, r0
 80053d6:	f7fb f8a5 	bl	8000524 <__aeabi_i2d>
 80053da:	3630      	adds	r6, #48	; 0x30
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4640      	mov	r0, r8
 80053e2:	4649      	mov	r1, r9
 80053e4:	f7fa ff50 	bl	8000288 <__aeabi_dsub>
 80053e8:	f805 6b01 	strb.w	r6, [r5], #1
 80053ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053ee:	429d      	cmp	r5, r3
 80053f0:	4680      	mov	r8, r0
 80053f2:	4689      	mov	r9, r1
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	d124      	bne.n	8005444 <_dtoa_r+0x60c>
 80053fa:	4b1b      	ldr	r3, [pc, #108]	; (8005468 <_dtoa_r+0x630>)
 80053fc:	4650      	mov	r0, sl
 80053fe:	4659      	mov	r1, fp
 8005400:	f7fa ff44 	bl	800028c <__adddf3>
 8005404:	4602      	mov	r2, r0
 8005406:	460b      	mov	r3, r1
 8005408:	4640      	mov	r0, r8
 800540a:	4649      	mov	r1, r9
 800540c:	f7fb fb84 	bl	8000b18 <__aeabi_dcmpgt>
 8005410:	2800      	cmp	r0, #0
 8005412:	d173      	bne.n	80054fc <_dtoa_r+0x6c4>
 8005414:	4652      	mov	r2, sl
 8005416:	465b      	mov	r3, fp
 8005418:	4913      	ldr	r1, [pc, #76]	; (8005468 <_dtoa_r+0x630>)
 800541a:	2000      	movs	r0, #0
 800541c:	f7fa ff34 	bl	8000288 <__aeabi_dsub>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	4640      	mov	r0, r8
 8005426:	4649      	mov	r1, r9
 8005428:	f7fb fb58 	bl	8000adc <__aeabi_dcmplt>
 800542c:	2800      	cmp	r0, #0
 800542e:	f43f af35 	beq.w	800529c <_dtoa_r+0x464>
 8005432:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005434:	1e6b      	subs	r3, r5, #1
 8005436:	930f      	str	r3, [sp, #60]	; 0x3c
 8005438:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800543c:	2b30      	cmp	r3, #48	; 0x30
 800543e:	d0f8      	beq.n	8005432 <_dtoa_r+0x5fa>
 8005440:	9700      	str	r7, [sp, #0]
 8005442:	e049      	b.n	80054d8 <_dtoa_r+0x6a0>
 8005444:	4b05      	ldr	r3, [pc, #20]	; (800545c <_dtoa_r+0x624>)
 8005446:	f7fb f8d7 	bl	80005f8 <__aeabi_dmul>
 800544a:	4680      	mov	r8, r0
 800544c:	4689      	mov	r9, r1
 800544e:	e7bd      	b.n	80053cc <_dtoa_r+0x594>
 8005450:	08007f98 	.word	0x08007f98
 8005454:	08007f70 	.word	0x08007f70
 8005458:	3ff00000 	.word	0x3ff00000
 800545c:	40240000 	.word	0x40240000
 8005460:	401c0000 	.word	0x401c0000
 8005464:	40140000 	.word	0x40140000
 8005468:	3fe00000 	.word	0x3fe00000
 800546c:	9d01      	ldr	r5, [sp, #4]
 800546e:	4656      	mov	r6, sl
 8005470:	465f      	mov	r7, fp
 8005472:	4642      	mov	r2, r8
 8005474:	464b      	mov	r3, r9
 8005476:	4630      	mov	r0, r6
 8005478:	4639      	mov	r1, r7
 800547a:	f7fb f9e7 	bl	800084c <__aeabi_ddiv>
 800547e:	f7fb fb6b 	bl	8000b58 <__aeabi_d2iz>
 8005482:	4682      	mov	sl, r0
 8005484:	f7fb f84e 	bl	8000524 <__aeabi_i2d>
 8005488:	4642      	mov	r2, r8
 800548a:	464b      	mov	r3, r9
 800548c:	f7fb f8b4 	bl	80005f8 <__aeabi_dmul>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4630      	mov	r0, r6
 8005496:	4639      	mov	r1, r7
 8005498:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800549c:	f7fa fef4 	bl	8000288 <__aeabi_dsub>
 80054a0:	f805 6b01 	strb.w	r6, [r5], #1
 80054a4:	9e01      	ldr	r6, [sp, #4]
 80054a6:	9f03      	ldr	r7, [sp, #12]
 80054a8:	1bae      	subs	r6, r5, r6
 80054aa:	42b7      	cmp	r7, r6
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	d135      	bne.n	800551e <_dtoa_r+0x6e6>
 80054b2:	f7fa feeb 	bl	800028c <__adddf3>
 80054b6:	4642      	mov	r2, r8
 80054b8:	464b      	mov	r3, r9
 80054ba:	4606      	mov	r6, r0
 80054bc:	460f      	mov	r7, r1
 80054be:	f7fb fb2b 	bl	8000b18 <__aeabi_dcmpgt>
 80054c2:	b9d0      	cbnz	r0, 80054fa <_dtoa_r+0x6c2>
 80054c4:	4642      	mov	r2, r8
 80054c6:	464b      	mov	r3, r9
 80054c8:	4630      	mov	r0, r6
 80054ca:	4639      	mov	r1, r7
 80054cc:	f7fb fafc 	bl	8000ac8 <__aeabi_dcmpeq>
 80054d0:	b110      	cbz	r0, 80054d8 <_dtoa_r+0x6a0>
 80054d2:	f01a 0f01 	tst.w	sl, #1
 80054d6:	d110      	bne.n	80054fa <_dtoa_r+0x6c2>
 80054d8:	4620      	mov	r0, r4
 80054da:	ee18 1a10 	vmov	r1, s16
 80054de:	f000 ff6d 	bl	80063bc <_Bfree>
 80054e2:	2300      	movs	r3, #0
 80054e4:	9800      	ldr	r0, [sp, #0]
 80054e6:	702b      	strb	r3, [r5, #0]
 80054e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054ea:	3001      	adds	r0, #1
 80054ec:	6018      	str	r0, [r3, #0]
 80054ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f43f acf1 	beq.w	8004ed8 <_dtoa_r+0xa0>
 80054f6:	601d      	str	r5, [r3, #0]
 80054f8:	e4ee      	b.n	8004ed8 <_dtoa_r+0xa0>
 80054fa:	9f00      	ldr	r7, [sp, #0]
 80054fc:	462b      	mov	r3, r5
 80054fe:	461d      	mov	r5, r3
 8005500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005504:	2a39      	cmp	r2, #57	; 0x39
 8005506:	d106      	bne.n	8005516 <_dtoa_r+0x6de>
 8005508:	9a01      	ldr	r2, [sp, #4]
 800550a:	429a      	cmp	r2, r3
 800550c:	d1f7      	bne.n	80054fe <_dtoa_r+0x6c6>
 800550e:	9901      	ldr	r1, [sp, #4]
 8005510:	2230      	movs	r2, #48	; 0x30
 8005512:	3701      	adds	r7, #1
 8005514:	700a      	strb	r2, [r1, #0]
 8005516:	781a      	ldrb	r2, [r3, #0]
 8005518:	3201      	adds	r2, #1
 800551a:	701a      	strb	r2, [r3, #0]
 800551c:	e790      	b.n	8005440 <_dtoa_r+0x608>
 800551e:	4ba6      	ldr	r3, [pc, #664]	; (80057b8 <_dtoa_r+0x980>)
 8005520:	2200      	movs	r2, #0
 8005522:	f7fb f869 	bl	80005f8 <__aeabi_dmul>
 8005526:	2200      	movs	r2, #0
 8005528:	2300      	movs	r3, #0
 800552a:	4606      	mov	r6, r0
 800552c:	460f      	mov	r7, r1
 800552e:	f7fb facb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005532:	2800      	cmp	r0, #0
 8005534:	d09d      	beq.n	8005472 <_dtoa_r+0x63a>
 8005536:	e7cf      	b.n	80054d8 <_dtoa_r+0x6a0>
 8005538:	9a08      	ldr	r2, [sp, #32]
 800553a:	2a00      	cmp	r2, #0
 800553c:	f000 80d7 	beq.w	80056ee <_dtoa_r+0x8b6>
 8005540:	9a06      	ldr	r2, [sp, #24]
 8005542:	2a01      	cmp	r2, #1
 8005544:	f300 80ba 	bgt.w	80056bc <_dtoa_r+0x884>
 8005548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800554a:	2a00      	cmp	r2, #0
 800554c:	f000 80b2 	beq.w	80056b4 <_dtoa_r+0x87c>
 8005550:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005554:	9e07      	ldr	r6, [sp, #28]
 8005556:	9d04      	ldr	r5, [sp, #16]
 8005558:	9a04      	ldr	r2, [sp, #16]
 800555a:	441a      	add	r2, r3
 800555c:	9204      	str	r2, [sp, #16]
 800555e:	9a05      	ldr	r2, [sp, #20]
 8005560:	2101      	movs	r1, #1
 8005562:	441a      	add	r2, r3
 8005564:	4620      	mov	r0, r4
 8005566:	9205      	str	r2, [sp, #20]
 8005568:	f001 f82a 	bl	80065c0 <__i2b>
 800556c:	4607      	mov	r7, r0
 800556e:	2d00      	cmp	r5, #0
 8005570:	dd0c      	ble.n	800558c <_dtoa_r+0x754>
 8005572:	9b05      	ldr	r3, [sp, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	dd09      	ble.n	800558c <_dtoa_r+0x754>
 8005578:	42ab      	cmp	r3, r5
 800557a:	9a04      	ldr	r2, [sp, #16]
 800557c:	bfa8      	it	ge
 800557e:	462b      	movge	r3, r5
 8005580:	1ad2      	subs	r2, r2, r3
 8005582:	9204      	str	r2, [sp, #16]
 8005584:	9a05      	ldr	r2, [sp, #20]
 8005586:	1aed      	subs	r5, r5, r3
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	9305      	str	r3, [sp, #20]
 800558c:	9b07      	ldr	r3, [sp, #28]
 800558e:	b31b      	cbz	r3, 80055d8 <_dtoa_r+0x7a0>
 8005590:	9b08      	ldr	r3, [sp, #32]
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 80af 	beq.w	80056f6 <_dtoa_r+0x8be>
 8005598:	2e00      	cmp	r6, #0
 800559a:	dd13      	ble.n	80055c4 <_dtoa_r+0x78c>
 800559c:	4639      	mov	r1, r7
 800559e:	4632      	mov	r2, r6
 80055a0:	4620      	mov	r0, r4
 80055a2:	f001 f8cd 	bl	8006740 <__pow5mult>
 80055a6:	ee18 2a10 	vmov	r2, s16
 80055aa:	4601      	mov	r1, r0
 80055ac:	4607      	mov	r7, r0
 80055ae:	4620      	mov	r0, r4
 80055b0:	f001 f81c 	bl	80065ec <__multiply>
 80055b4:	ee18 1a10 	vmov	r1, s16
 80055b8:	4680      	mov	r8, r0
 80055ba:	4620      	mov	r0, r4
 80055bc:	f000 fefe 	bl	80063bc <_Bfree>
 80055c0:	ee08 8a10 	vmov	s16, r8
 80055c4:	9b07      	ldr	r3, [sp, #28]
 80055c6:	1b9a      	subs	r2, r3, r6
 80055c8:	d006      	beq.n	80055d8 <_dtoa_r+0x7a0>
 80055ca:	ee18 1a10 	vmov	r1, s16
 80055ce:	4620      	mov	r0, r4
 80055d0:	f001 f8b6 	bl	8006740 <__pow5mult>
 80055d4:	ee08 0a10 	vmov	s16, r0
 80055d8:	2101      	movs	r1, #1
 80055da:	4620      	mov	r0, r4
 80055dc:	f000 fff0 	bl	80065c0 <__i2b>
 80055e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	4606      	mov	r6, r0
 80055e6:	f340 8088 	ble.w	80056fa <_dtoa_r+0x8c2>
 80055ea:	461a      	mov	r2, r3
 80055ec:	4601      	mov	r1, r0
 80055ee:	4620      	mov	r0, r4
 80055f0:	f001 f8a6 	bl	8006740 <__pow5mult>
 80055f4:	9b06      	ldr	r3, [sp, #24]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	4606      	mov	r6, r0
 80055fa:	f340 8081 	ble.w	8005700 <_dtoa_r+0x8c8>
 80055fe:	f04f 0800 	mov.w	r8, #0
 8005602:	6933      	ldr	r3, [r6, #16]
 8005604:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005608:	6918      	ldr	r0, [r3, #16]
 800560a:	f000 ff89 	bl	8006520 <__hi0bits>
 800560e:	f1c0 0020 	rsb	r0, r0, #32
 8005612:	9b05      	ldr	r3, [sp, #20]
 8005614:	4418      	add	r0, r3
 8005616:	f010 001f 	ands.w	r0, r0, #31
 800561a:	f000 8092 	beq.w	8005742 <_dtoa_r+0x90a>
 800561e:	f1c0 0320 	rsb	r3, r0, #32
 8005622:	2b04      	cmp	r3, #4
 8005624:	f340 808a 	ble.w	800573c <_dtoa_r+0x904>
 8005628:	f1c0 001c 	rsb	r0, r0, #28
 800562c:	9b04      	ldr	r3, [sp, #16]
 800562e:	4403      	add	r3, r0
 8005630:	9304      	str	r3, [sp, #16]
 8005632:	9b05      	ldr	r3, [sp, #20]
 8005634:	4403      	add	r3, r0
 8005636:	4405      	add	r5, r0
 8005638:	9305      	str	r3, [sp, #20]
 800563a:	9b04      	ldr	r3, [sp, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	dd07      	ble.n	8005650 <_dtoa_r+0x818>
 8005640:	ee18 1a10 	vmov	r1, s16
 8005644:	461a      	mov	r2, r3
 8005646:	4620      	mov	r0, r4
 8005648:	f001 f8d4 	bl	80067f4 <__lshift>
 800564c:	ee08 0a10 	vmov	s16, r0
 8005650:	9b05      	ldr	r3, [sp, #20]
 8005652:	2b00      	cmp	r3, #0
 8005654:	dd05      	ble.n	8005662 <_dtoa_r+0x82a>
 8005656:	4631      	mov	r1, r6
 8005658:	461a      	mov	r2, r3
 800565a:	4620      	mov	r0, r4
 800565c:	f001 f8ca 	bl	80067f4 <__lshift>
 8005660:	4606      	mov	r6, r0
 8005662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d06e      	beq.n	8005746 <_dtoa_r+0x90e>
 8005668:	ee18 0a10 	vmov	r0, s16
 800566c:	4631      	mov	r1, r6
 800566e:	f001 f931 	bl	80068d4 <__mcmp>
 8005672:	2800      	cmp	r0, #0
 8005674:	da67      	bge.n	8005746 <_dtoa_r+0x90e>
 8005676:	9b00      	ldr	r3, [sp, #0]
 8005678:	3b01      	subs	r3, #1
 800567a:	ee18 1a10 	vmov	r1, s16
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	220a      	movs	r2, #10
 8005682:	2300      	movs	r3, #0
 8005684:	4620      	mov	r0, r4
 8005686:	f000 febb 	bl	8006400 <__multadd>
 800568a:	9b08      	ldr	r3, [sp, #32]
 800568c:	ee08 0a10 	vmov	s16, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 81b1 	beq.w	80059f8 <_dtoa_r+0xbc0>
 8005696:	2300      	movs	r3, #0
 8005698:	4639      	mov	r1, r7
 800569a:	220a      	movs	r2, #10
 800569c:	4620      	mov	r0, r4
 800569e:	f000 feaf 	bl	8006400 <__multadd>
 80056a2:	9b02      	ldr	r3, [sp, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	4607      	mov	r7, r0
 80056a8:	f300 808e 	bgt.w	80057c8 <_dtoa_r+0x990>
 80056ac:	9b06      	ldr	r3, [sp, #24]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	dc51      	bgt.n	8005756 <_dtoa_r+0x91e>
 80056b2:	e089      	b.n	80057c8 <_dtoa_r+0x990>
 80056b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80056ba:	e74b      	b.n	8005554 <_dtoa_r+0x71c>
 80056bc:	9b03      	ldr	r3, [sp, #12]
 80056be:	1e5e      	subs	r6, r3, #1
 80056c0:	9b07      	ldr	r3, [sp, #28]
 80056c2:	42b3      	cmp	r3, r6
 80056c4:	bfbf      	itttt	lt
 80056c6:	9b07      	ldrlt	r3, [sp, #28]
 80056c8:	9607      	strlt	r6, [sp, #28]
 80056ca:	1af2      	sublt	r2, r6, r3
 80056cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80056ce:	bfb6      	itet	lt
 80056d0:	189b      	addlt	r3, r3, r2
 80056d2:	1b9e      	subge	r6, r3, r6
 80056d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80056d6:	9b03      	ldr	r3, [sp, #12]
 80056d8:	bfb8      	it	lt
 80056da:	2600      	movlt	r6, #0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	bfb7      	itett	lt
 80056e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80056e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80056e8:	1a9d      	sublt	r5, r3, r2
 80056ea:	2300      	movlt	r3, #0
 80056ec:	e734      	b.n	8005558 <_dtoa_r+0x720>
 80056ee:	9e07      	ldr	r6, [sp, #28]
 80056f0:	9d04      	ldr	r5, [sp, #16]
 80056f2:	9f08      	ldr	r7, [sp, #32]
 80056f4:	e73b      	b.n	800556e <_dtoa_r+0x736>
 80056f6:	9a07      	ldr	r2, [sp, #28]
 80056f8:	e767      	b.n	80055ca <_dtoa_r+0x792>
 80056fa:	9b06      	ldr	r3, [sp, #24]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	dc18      	bgt.n	8005732 <_dtoa_r+0x8fa>
 8005700:	f1ba 0f00 	cmp.w	sl, #0
 8005704:	d115      	bne.n	8005732 <_dtoa_r+0x8fa>
 8005706:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800570a:	b993      	cbnz	r3, 8005732 <_dtoa_r+0x8fa>
 800570c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005710:	0d1b      	lsrs	r3, r3, #20
 8005712:	051b      	lsls	r3, r3, #20
 8005714:	b183      	cbz	r3, 8005738 <_dtoa_r+0x900>
 8005716:	9b04      	ldr	r3, [sp, #16]
 8005718:	3301      	adds	r3, #1
 800571a:	9304      	str	r3, [sp, #16]
 800571c:	9b05      	ldr	r3, [sp, #20]
 800571e:	3301      	adds	r3, #1
 8005720:	9305      	str	r3, [sp, #20]
 8005722:	f04f 0801 	mov.w	r8, #1
 8005726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005728:	2b00      	cmp	r3, #0
 800572a:	f47f af6a 	bne.w	8005602 <_dtoa_r+0x7ca>
 800572e:	2001      	movs	r0, #1
 8005730:	e76f      	b.n	8005612 <_dtoa_r+0x7da>
 8005732:	f04f 0800 	mov.w	r8, #0
 8005736:	e7f6      	b.n	8005726 <_dtoa_r+0x8ee>
 8005738:	4698      	mov	r8, r3
 800573a:	e7f4      	b.n	8005726 <_dtoa_r+0x8ee>
 800573c:	f43f af7d 	beq.w	800563a <_dtoa_r+0x802>
 8005740:	4618      	mov	r0, r3
 8005742:	301c      	adds	r0, #28
 8005744:	e772      	b.n	800562c <_dtoa_r+0x7f4>
 8005746:	9b03      	ldr	r3, [sp, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	dc37      	bgt.n	80057bc <_dtoa_r+0x984>
 800574c:	9b06      	ldr	r3, [sp, #24]
 800574e:	2b02      	cmp	r3, #2
 8005750:	dd34      	ble.n	80057bc <_dtoa_r+0x984>
 8005752:	9b03      	ldr	r3, [sp, #12]
 8005754:	9302      	str	r3, [sp, #8]
 8005756:	9b02      	ldr	r3, [sp, #8]
 8005758:	b96b      	cbnz	r3, 8005776 <_dtoa_r+0x93e>
 800575a:	4631      	mov	r1, r6
 800575c:	2205      	movs	r2, #5
 800575e:	4620      	mov	r0, r4
 8005760:	f000 fe4e 	bl	8006400 <__multadd>
 8005764:	4601      	mov	r1, r0
 8005766:	4606      	mov	r6, r0
 8005768:	ee18 0a10 	vmov	r0, s16
 800576c:	f001 f8b2 	bl	80068d4 <__mcmp>
 8005770:	2800      	cmp	r0, #0
 8005772:	f73f adbb 	bgt.w	80052ec <_dtoa_r+0x4b4>
 8005776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005778:	9d01      	ldr	r5, [sp, #4]
 800577a:	43db      	mvns	r3, r3
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	f04f 0800 	mov.w	r8, #0
 8005782:	4631      	mov	r1, r6
 8005784:	4620      	mov	r0, r4
 8005786:	f000 fe19 	bl	80063bc <_Bfree>
 800578a:	2f00      	cmp	r7, #0
 800578c:	f43f aea4 	beq.w	80054d8 <_dtoa_r+0x6a0>
 8005790:	f1b8 0f00 	cmp.w	r8, #0
 8005794:	d005      	beq.n	80057a2 <_dtoa_r+0x96a>
 8005796:	45b8      	cmp	r8, r7
 8005798:	d003      	beq.n	80057a2 <_dtoa_r+0x96a>
 800579a:	4641      	mov	r1, r8
 800579c:	4620      	mov	r0, r4
 800579e:	f000 fe0d 	bl	80063bc <_Bfree>
 80057a2:	4639      	mov	r1, r7
 80057a4:	4620      	mov	r0, r4
 80057a6:	f000 fe09 	bl	80063bc <_Bfree>
 80057aa:	e695      	b.n	80054d8 <_dtoa_r+0x6a0>
 80057ac:	2600      	movs	r6, #0
 80057ae:	4637      	mov	r7, r6
 80057b0:	e7e1      	b.n	8005776 <_dtoa_r+0x93e>
 80057b2:	9700      	str	r7, [sp, #0]
 80057b4:	4637      	mov	r7, r6
 80057b6:	e599      	b.n	80052ec <_dtoa_r+0x4b4>
 80057b8:	40240000 	.word	0x40240000
 80057bc:	9b08      	ldr	r3, [sp, #32]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 80ca 	beq.w	8005958 <_dtoa_r+0xb20>
 80057c4:	9b03      	ldr	r3, [sp, #12]
 80057c6:	9302      	str	r3, [sp, #8]
 80057c8:	2d00      	cmp	r5, #0
 80057ca:	dd05      	ble.n	80057d8 <_dtoa_r+0x9a0>
 80057cc:	4639      	mov	r1, r7
 80057ce:	462a      	mov	r2, r5
 80057d0:	4620      	mov	r0, r4
 80057d2:	f001 f80f 	bl	80067f4 <__lshift>
 80057d6:	4607      	mov	r7, r0
 80057d8:	f1b8 0f00 	cmp.w	r8, #0
 80057dc:	d05b      	beq.n	8005896 <_dtoa_r+0xa5e>
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	4620      	mov	r0, r4
 80057e2:	f000 fdab 	bl	800633c <_Balloc>
 80057e6:	4605      	mov	r5, r0
 80057e8:	b928      	cbnz	r0, 80057f6 <_dtoa_r+0x9be>
 80057ea:	4b87      	ldr	r3, [pc, #540]	; (8005a08 <_dtoa_r+0xbd0>)
 80057ec:	4602      	mov	r2, r0
 80057ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80057f2:	f7ff bb3b 	b.w	8004e6c <_dtoa_r+0x34>
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	3202      	adds	r2, #2
 80057fa:	0092      	lsls	r2, r2, #2
 80057fc:	f107 010c 	add.w	r1, r7, #12
 8005800:	300c      	adds	r0, #12
 8005802:	f000 fd8d 	bl	8006320 <memcpy>
 8005806:	2201      	movs	r2, #1
 8005808:	4629      	mov	r1, r5
 800580a:	4620      	mov	r0, r4
 800580c:	f000 fff2 	bl	80067f4 <__lshift>
 8005810:	9b01      	ldr	r3, [sp, #4]
 8005812:	f103 0901 	add.w	r9, r3, #1
 8005816:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800581a:	4413      	add	r3, r2
 800581c:	9305      	str	r3, [sp, #20]
 800581e:	f00a 0301 	and.w	r3, sl, #1
 8005822:	46b8      	mov	r8, r7
 8005824:	9304      	str	r3, [sp, #16]
 8005826:	4607      	mov	r7, r0
 8005828:	4631      	mov	r1, r6
 800582a:	ee18 0a10 	vmov	r0, s16
 800582e:	f7ff fa77 	bl	8004d20 <quorem>
 8005832:	4641      	mov	r1, r8
 8005834:	9002      	str	r0, [sp, #8]
 8005836:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800583a:	ee18 0a10 	vmov	r0, s16
 800583e:	f001 f849 	bl	80068d4 <__mcmp>
 8005842:	463a      	mov	r2, r7
 8005844:	9003      	str	r0, [sp, #12]
 8005846:	4631      	mov	r1, r6
 8005848:	4620      	mov	r0, r4
 800584a:	f001 f85f 	bl	800690c <__mdiff>
 800584e:	68c2      	ldr	r2, [r0, #12]
 8005850:	f109 3bff 	add.w	fp, r9, #4294967295
 8005854:	4605      	mov	r5, r0
 8005856:	bb02      	cbnz	r2, 800589a <_dtoa_r+0xa62>
 8005858:	4601      	mov	r1, r0
 800585a:	ee18 0a10 	vmov	r0, s16
 800585e:	f001 f839 	bl	80068d4 <__mcmp>
 8005862:	4602      	mov	r2, r0
 8005864:	4629      	mov	r1, r5
 8005866:	4620      	mov	r0, r4
 8005868:	9207      	str	r2, [sp, #28]
 800586a:	f000 fda7 	bl	80063bc <_Bfree>
 800586e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005872:	ea43 0102 	orr.w	r1, r3, r2
 8005876:	9b04      	ldr	r3, [sp, #16]
 8005878:	430b      	orrs	r3, r1
 800587a:	464d      	mov	r5, r9
 800587c:	d10f      	bne.n	800589e <_dtoa_r+0xa66>
 800587e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005882:	d02a      	beq.n	80058da <_dtoa_r+0xaa2>
 8005884:	9b03      	ldr	r3, [sp, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	dd02      	ble.n	8005890 <_dtoa_r+0xa58>
 800588a:	9b02      	ldr	r3, [sp, #8]
 800588c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005890:	f88b a000 	strb.w	sl, [fp]
 8005894:	e775      	b.n	8005782 <_dtoa_r+0x94a>
 8005896:	4638      	mov	r0, r7
 8005898:	e7ba      	b.n	8005810 <_dtoa_r+0x9d8>
 800589a:	2201      	movs	r2, #1
 800589c:	e7e2      	b.n	8005864 <_dtoa_r+0xa2c>
 800589e:	9b03      	ldr	r3, [sp, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	db04      	blt.n	80058ae <_dtoa_r+0xa76>
 80058a4:	9906      	ldr	r1, [sp, #24]
 80058a6:	430b      	orrs	r3, r1
 80058a8:	9904      	ldr	r1, [sp, #16]
 80058aa:	430b      	orrs	r3, r1
 80058ac:	d122      	bne.n	80058f4 <_dtoa_r+0xabc>
 80058ae:	2a00      	cmp	r2, #0
 80058b0:	ddee      	ble.n	8005890 <_dtoa_r+0xa58>
 80058b2:	ee18 1a10 	vmov	r1, s16
 80058b6:	2201      	movs	r2, #1
 80058b8:	4620      	mov	r0, r4
 80058ba:	f000 ff9b 	bl	80067f4 <__lshift>
 80058be:	4631      	mov	r1, r6
 80058c0:	ee08 0a10 	vmov	s16, r0
 80058c4:	f001 f806 	bl	80068d4 <__mcmp>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	dc03      	bgt.n	80058d4 <_dtoa_r+0xa9c>
 80058cc:	d1e0      	bne.n	8005890 <_dtoa_r+0xa58>
 80058ce:	f01a 0f01 	tst.w	sl, #1
 80058d2:	d0dd      	beq.n	8005890 <_dtoa_r+0xa58>
 80058d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80058d8:	d1d7      	bne.n	800588a <_dtoa_r+0xa52>
 80058da:	2339      	movs	r3, #57	; 0x39
 80058dc:	f88b 3000 	strb.w	r3, [fp]
 80058e0:	462b      	mov	r3, r5
 80058e2:	461d      	mov	r5, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058ea:	2a39      	cmp	r2, #57	; 0x39
 80058ec:	d071      	beq.n	80059d2 <_dtoa_r+0xb9a>
 80058ee:	3201      	adds	r2, #1
 80058f0:	701a      	strb	r2, [r3, #0]
 80058f2:	e746      	b.n	8005782 <_dtoa_r+0x94a>
 80058f4:	2a00      	cmp	r2, #0
 80058f6:	dd07      	ble.n	8005908 <_dtoa_r+0xad0>
 80058f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80058fc:	d0ed      	beq.n	80058da <_dtoa_r+0xaa2>
 80058fe:	f10a 0301 	add.w	r3, sl, #1
 8005902:	f88b 3000 	strb.w	r3, [fp]
 8005906:	e73c      	b.n	8005782 <_dtoa_r+0x94a>
 8005908:	9b05      	ldr	r3, [sp, #20]
 800590a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800590e:	4599      	cmp	r9, r3
 8005910:	d047      	beq.n	80059a2 <_dtoa_r+0xb6a>
 8005912:	ee18 1a10 	vmov	r1, s16
 8005916:	2300      	movs	r3, #0
 8005918:	220a      	movs	r2, #10
 800591a:	4620      	mov	r0, r4
 800591c:	f000 fd70 	bl	8006400 <__multadd>
 8005920:	45b8      	cmp	r8, r7
 8005922:	ee08 0a10 	vmov	s16, r0
 8005926:	f04f 0300 	mov.w	r3, #0
 800592a:	f04f 020a 	mov.w	r2, #10
 800592e:	4641      	mov	r1, r8
 8005930:	4620      	mov	r0, r4
 8005932:	d106      	bne.n	8005942 <_dtoa_r+0xb0a>
 8005934:	f000 fd64 	bl	8006400 <__multadd>
 8005938:	4680      	mov	r8, r0
 800593a:	4607      	mov	r7, r0
 800593c:	f109 0901 	add.w	r9, r9, #1
 8005940:	e772      	b.n	8005828 <_dtoa_r+0x9f0>
 8005942:	f000 fd5d 	bl	8006400 <__multadd>
 8005946:	4639      	mov	r1, r7
 8005948:	4680      	mov	r8, r0
 800594a:	2300      	movs	r3, #0
 800594c:	220a      	movs	r2, #10
 800594e:	4620      	mov	r0, r4
 8005950:	f000 fd56 	bl	8006400 <__multadd>
 8005954:	4607      	mov	r7, r0
 8005956:	e7f1      	b.n	800593c <_dtoa_r+0xb04>
 8005958:	9b03      	ldr	r3, [sp, #12]
 800595a:	9302      	str	r3, [sp, #8]
 800595c:	9d01      	ldr	r5, [sp, #4]
 800595e:	ee18 0a10 	vmov	r0, s16
 8005962:	4631      	mov	r1, r6
 8005964:	f7ff f9dc 	bl	8004d20 <quorem>
 8005968:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800596c:	9b01      	ldr	r3, [sp, #4]
 800596e:	f805 ab01 	strb.w	sl, [r5], #1
 8005972:	1aea      	subs	r2, r5, r3
 8005974:	9b02      	ldr	r3, [sp, #8]
 8005976:	4293      	cmp	r3, r2
 8005978:	dd09      	ble.n	800598e <_dtoa_r+0xb56>
 800597a:	ee18 1a10 	vmov	r1, s16
 800597e:	2300      	movs	r3, #0
 8005980:	220a      	movs	r2, #10
 8005982:	4620      	mov	r0, r4
 8005984:	f000 fd3c 	bl	8006400 <__multadd>
 8005988:	ee08 0a10 	vmov	s16, r0
 800598c:	e7e7      	b.n	800595e <_dtoa_r+0xb26>
 800598e:	9b02      	ldr	r3, [sp, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	bfc8      	it	gt
 8005994:	461d      	movgt	r5, r3
 8005996:	9b01      	ldr	r3, [sp, #4]
 8005998:	bfd8      	it	le
 800599a:	2501      	movle	r5, #1
 800599c:	441d      	add	r5, r3
 800599e:	f04f 0800 	mov.w	r8, #0
 80059a2:	ee18 1a10 	vmov	r1, s16
 80059a6:	2201      	movs	r2, #1
 80059a8:	4620      	mov	r0, r4
 80059aa:	f000 ff23 	bl	80067f4 <__lshift>
 80059ae:	4631      	mov	r1, r6
 80059b0:	ee08 0a10 	vmov	s16, r0
 80059b4:	f000 ff8e 	bl	80068d4 <__mcmp>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	dc91      	bgt.n	80058e0 <_dtoa_r+0xaa8>
 80059bc:	d102      	bne.n	80059c4 <_dtoa_r+0xb8c>
 80059be:	f01a 0f01 	tst.w	sl, #1
 80059c2:	d18d      	bne.n	80058e0 <_dtoa_r+0xaa8>
 80059c4:	462b      	mov	r3, r5
 80059c6:	461d      	mov	r5, r3
 80059c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059cc:	2a30      	cmp	r2, #48	; 0x30
 80059ce:	d0fa      	beq.n	80059c6 <_dtoa_r+0xb8e>
 80059d0:	e6d7      	b.n	8005782 <_dtoa_r+0x94a>
 80059d2:	9a01      	ldr	r2, [sp, #4]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d184      	bne.n	80058e2 <_dtoa_r+0xaaa>
 80059d8:	9b00      	ldr	r3, [sp, #0]
 80059da:	3301      	adds	r3, #1
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	2331      	movs	r3, #49	; 0x31
 80059e0:	7013      	strb	r3, [r2, #0]
 80059e2:	e6ce      	b.n	8005782 <_dtoa_r+0x94a>
 80059e4:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <_dtoa_r+0xbd4>)
 80059e6:	f7ff ba95 	b.w	8004f14 <_dtoa_r+0xdc>
 80059ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f47f aa6e 	bne.w	8004ece <_dtoa_r+0x96>
 80059f2:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <_dtoa_r+0xbd8>)
 80059f4:	f7ff ba8e 	b.w	8004f14 <_dtoa_r+0xdc>
 80059f8:	9b02      	ldr	r3, [sp, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	dcae      	bgt.n	800595c <_dtoa_r+0xb24>
 80059fe:	9b06      	ldr	r3, [sp, #24]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	f73f aea8 	bgt.w	8005756 <_dtoa_r+0x91e>
 8005a06:	e7a9      	b.n	800595c <_dtoa_r+0xb24>
 8005a08:	08007e20 	.word	0x08007e20
 8005a0c:	08007c20 	.word	0x08007c20
 8005a10:	08007da1 	.word	0x08007da1

08005a14 <std>:
 8005a14:	2300      	movs	r3, #0
 8005a16:	b510      	push	{r4, lr}
 8005a18:	4604      	mov	r4, r0
 8005a1a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a22:	6083      	str	r3, [r0, #8]
 8005a24:	8181      	strh	r1, [r0, #12]
 8005a26:	6643      	str	r3, [r0, #100]	; 0x64
 8005a28:	81c2      	strh	r2, [r0, #14]
 8005a2a:	6183      	str	r3, [r0, #24]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	2208      	movs	r2, #8
 8005a30:	305c      	adds	r0, #92	; 0x5c
 8005a32:	f7fd fc1f 	bl	8003274 <memset>
 8005a36:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <std+0x38>)
 8005a38:	6263      	str	r3, [r4, #36]	; 0x24
 8005a3a:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <std+0x3c>)
 8005a3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a3e:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <std+0x40>)
 8005a40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a42:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <std+0x44>)
 8005a44:	6224      	str	r4, [r4, #32]
 8005a46:	6323      	str	r3, [r4, #48]	; 0x30
 8005a48:	bd10      	pop	{r4, pc}
 8005a4a:	bf00      	nop
 8005a4c:	08007449 	.word	0x08007449
 8005a50:	0800746b 	.word	0x0800746b
 8005a54:	080074a3 	.word	0x080074a3
 8005a58:	080074c7 	.word	0x080074c7

08005a5c <_cleanup_r>:
 8005a5c:	4901      	ldr	r1, [pc, #4]	; (8005a64 <_cleanup_r+0x8>)
 8005a5e:	f000 b8af 	b.w	8005bc0 <_fwalk_reent>
 8005a62:	bf00      	nop
 8005a64:	08007821 	.word	0x08007821

08005a68 <__sfmoreglue>:
 8005a68:	b570      	push	{r4, r5, r6, lr}
 8005a6a:	2268      	movs	r2, #104	; 0x68
 8005a6c:	1e4d      	subs	r5, r1, #1
 8005a6e:	4355      	muls	r5, r2
 8005a70:	460e      	mov	r6, r1
 8005a72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a76:	f001 f9a5 	bl	8006dc4 <_malloc_r>
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	b140      	cbz	r0, 8005a90 <__sfmoreglue+0x28>
 8005a7e:	2100      	movs	r1, #0
 8005a80:	e9c0 1600 	strd	r1, r6, [r0]
 8005a84:	300c      	adds	r0, #12
 8005a86:	60a0      	str	r0, [r4, #8]
 8005a88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a8c:	f7fd fbf2 	bl	8003274 <memset>
 8005a90:	4620      	mov	r0, r4
 8005a92:	bd70      	pop	{r4, r5, r6, pc}

08005a94 <__sfp_lock_acquire>:
 8005a94:	4801      	ldr	r0, [pc, #4]	; (8005a9c <__sfp_lock_acquire+0x8>)
 8005a96:	f000 bc26 	b.w	80062e6 <__retarget_lock_acquire_recursive>
 8005a9a:	bf00      	nop
 8005a9c:	20000241 	.word	0x20000241

08005aa0 <__sfp_lock_release>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	; (8005aa8 <__sfp_lock_release+0x8>)
 8005aa2:	f000 bc21 	b.w	80062e8 <__retarget_lock_release_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	20000241 	.word	0x20000241

08005aac <__sinit_lock_acquire>:
 8005aac:	4801      	ldr	r0, [pc, #4]	; (8005ab4 <__sinit_lock_acquire+0x8>)
 8005aae:	f000 bc1a 	b.w	80062e6 <__retarget_lock_acquire_recursive>
 8005ab2:	bf00      	nop
 8005ab4:	20000242 	.word	0x20000242

08005ab8 <__sinit_lock_release>:
 8005ab8:	4801      	ldr	r0, [pc, #4]	; (8005ac0 <__sinit_lock_release+0x8>)
 8005aba:	f000 bc15 	b.w	80062e8 <__retarget_lock_release_recursive>
 8005abe:	bf00      	nop
 8005ac0:	20000242 	.word	0x20000242

08005ac4 <__sinit>:
 8005ac4:	b510      	push	{r4, lr}
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	f7ff fff0 	bl	8005aac <__sinit_lock_acquire>
 8005acc:	69a3      	ldr	r3, [r4, #24]
 8005ace:	b11b      	cbz	r3, 8005ad8 <__sinit+0x14>
 8005ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ad4:	f7ff bff0 	b.w	8005ab8 <__sinit_lock_release>
 8005ad8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005adc:	6523      	str	r3, [r4, #80]	; 0x50
 8005ade:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <__sinit+0x68>)
 8005ae0:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <__sinit+0x6c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ae6:	42a3      	cmp	r3, r4
 8005ae8:	bf04      	itt	eq
 8005aea:	2301      	moveq	r3, #1
 8005aec:	61a3      	streq	r3, [r4, #24]
 8005aee:	4620      	mov	r0, r4
 8005af0:	f000 f820 	bl	8005b34 <__sfp>
 8005af4:	6060      	str	r0, [r4, #4]
 8005af6:	4620      	mov	r0, r4
 8005af8:	f000 f81c 	bl	8005b34 <__sfp>
 8005afc:	60a0      	str	r0, [r4, #8]
 8005afe:	4620      	mov	r0, r4
 8005b00:	f000 f818 	bl	8005b34 <__sfp>
 8005b04:	2200      	movs	r2, #0
 8005b06:	60e0      	str	r0, [r4, #12]
 8005b08:	2104      	movs	r1, #4
 8005b0a:	6860      	ldr	r0, [r4, #4]
 8005b0c:	f7ff ff82 	bl	8005a14 <std>
 8005b10:	68a0      	ldr	r0, [r4, #8]
 8005b12:	2201      	movs	r2, #1
 8005b14:	2109      	movs	r1, #9
 8005b16:	f7ff ff7d 	bl	8005a14 <std>
 8005b1a:	68e0      	ldr	r0, [r4, #12]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	2112      	movs	r1, #18
 8005b20:	f7ff ff78 	bl	8005a14 <std>
 8005b24:	2301      	movs	r3, #1
 8005b26:	61a3      	str	r3, [r4, #24]
 8005b28:	e7d2      	b.n	8005ad0 <__sinit+0xc>
 8005b2a:	bf00      	nop
 8005b2c:	08007c0c 	.word	0x08007c0c
 8005b30:	08005a5d 	.word	0x08005a5d

08005b34 <__sfp>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	4607      	mov	r7, r0
 8005b38:	f7ff ffac 	bl	8005a94 <__sfp_lock_acquire>
 8005b3c:	4b1e      	ldr	r3, [pc, #120]	; (8005bb8 <__sfp+0x84>)
 8005b3e:	681e      	ldr	r6, [r3, #0]
 8005b40:	69b3      	ldr	r3, [r6, #24]
 8005b42:	b913      	cbnz	r3, 8005b4a <__sfp+0x16>
 8005b44:	4630      	mov	r0, r6
 8005b46:	f7ff ffbd 	bl	8005ac4 <__sinit>
 8005b4a:	3648      	adds	r6, #72	; 0x48
 8005b4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b50:	3b01      	subs	r3, #1
 8005b52:	d503      	bpl.n	8005b5c <__sfp+0x28>
 8005b54:	6833      	ldr	r3, [r6, #0]
 8005b56:	b30b      	cbz	r3, 8005b9c <__sfp+0x68>
 8005b58:	6836      	ldr	r6, [r6, #0]
 8005b5a:	e7f7      	b.n	8005b4c <__sfp+0x18>
 8005b5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b60:	b9d5      	cbnz	r5, 8005b98 <__sfp+0x64>
 8005b62:	4b16      	ldr	r3, [pc, #88]	; (8005bbc <__sfp+0x88>)
 8005b64:	60e3      	str	r3, [r4, #12]
 8005b66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b6a:	6665      	str	r5, [r4, #100]	; 0x64
 8005b6c:	f000 fbba 	bl	80062e4 <__retarget_lock_init_recursive>
 8005b70:	f7ff ff96 	bl	8005aa0 <__sfp_lock_release>
 8005b74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b7c:	6025      	str	r5, [r4, #0]
 8005b7e:	61a5      	str	r5, [r4, #24]
 8005b80:	2208      	movs	r2, #8
 8005b82:	4629      	mov	r1, r5
 8005b84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b88:	f7fd fb74 	bl	8003274 <memset>
 8005b8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b94:	4620      	mov	r0, r4
 8005b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b98:	3468      	adds	r4, #104	; 0x68
 8005b9a:	e7d9      	b.n	8005b50 <__sfp+0x1c>
 8005b9c:	2104      	movs	r1, #4
 8005b9e:	4638      	mov	r0, r7
 8005ba0:	f7ff ff62 	bl	8005a68 <__sfmoreglue>
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	6030      	str	r0, [r6, #0]
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d1d5      	bne.n	8005b58 <__sfp+0x24>
 8005bac:	f7ff ff78 	bl	8005aa0 <__sfp_lock_release>
 8005bb0:	230c      	movs	r3, #12
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	e7ee      	b.n	8005b94 <__sfp+0x60>
 8005bb6:	bf00      	nop
 8005bb8:	08007c0c 	.word	0x08007c0c
 8005bbc:	ffff0001 	.word	0xffff0001

08005bc0 <_fwalk_reent>:
 8005bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	4688      	mov	r8, r1
 8005bc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005bcc:	2700      	movs	r7, #0
 8005bce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bd2:	f1b9 0901 	subs.w	r9, r9, #1
 8005bd6:	d505      	bpl.n	8005be4 <_fwalk_reent+0x24>
 8005bd8:	6824      	ldr	r4, [r4, #0]
 8005bda:	2c00      	cmp	r4, #0
 8005bdc:	d1f7      	bne.n	8005bce <_fwalk_reent+0xe>
 8005bde:	4638      	mov	r0, r7
 8005be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005be4:	89ab      	ldrh	r3, [r5, #12]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d907      	bls.n	8005bfa <_fwalk_reent+0x3a>
 8005bea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	d003      	beq.n	8005bfa <_fwalk_reent+0x3a>
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	47c0      	blx	r8
 8005bf8:	4307      	orrs	r7, r0
 8005bfa:	3568      	adds	r5, #104	; 0x68
 8005bfc:	e7e9      	b.n	8005bd2 <_fwalk_reent+0x12>

08005bfe <rshift>:
 8005bfe:	6903      	ldr	r3, [r0, #16]
 8005c00:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c08:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005c0c:	f100 0414 	add.w	r4, r0, #20
 8005c10:	dd45      	ble.n	8005c9e <rshift+0xa0>
 8005c12:	f011 011f 	ands.w	r1, r1, #31
 8005c16:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005c1a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005c1e:	d10c      	bne.n	8005c3a <rshift+0x3c>
 8005c20:	f100 0710 	add.w	r7, r0, #16
 8005c24:	4629      	mov	r1, r5
 8005c26:	42b1      	cmp	r1, r6
 8005c28:	d334      	bcc.n	8005c94 <rshift+0x96>
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	1eea      	subs	r2, r5, #3
 8005c30:	4296      	cmp	r6, r2
 8005c32:	bf38      	it	cc
 8005c34:	2300      	movcc	r3, #0
 8005c36:	4423      	add	r3, r4
 8005c38:	e015      	b.n	8005c66 <rshift+0x68>
 8005c3a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005c3e:	f1c1 0820 	rsb	r8, r1, #32
 8005c42:	40cf      	lsrs	r7, r1
 8005c44:	f105 0e04 	add.w	lr, r5, #4
 8005c48:	46a1      	mov	r9, r4
 8005c4a:	4576      	cmp	r6, lr
 8005c4c:	46f4      	mov	ip, lr
 8005c4e:	d815      	bhi.n	8005c7c <rshift+0x7e>
 8005c50:	1a9a      	subs	r2, r3, r2
 8005c52:	0092      	lsls	r2, r2, #2
 8005c54:	3a04      	subs	r2, #4
 8005c56:	3501      	adds	r5, #1
 8005c58:	42ae      	cmp	r6, r5
 8005c5a:	bf38      	it	cc
 8005c5c:	2200      	movcc	r2, #0
 8005c5e:	18a3      	adds	r3, r4, r2
 8005c60:	50a7      	str	r7, [r4, r2]
 8005c62:	b107      	cbz	r7, 8005c66 <rshift+0x68>
 8005c64:	3304      	adds	r3, #4
 8005c66:	1b1a      	subs	r2, r3, r4
 8005c68:	42a3      	cmp	r3, r4
 8005c6a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005c6e:	bf08      	it	eq
 8005c70:	2300      	moveq	r3, #0
 8005c72:	6102      	str	r2, [r0, #16]
 8005c74:	bf08      	it	eq
 8005c76:	6143      	streq	r3, [r0, #20]
 8005c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c7c:	f8dc c000 	ldr.w	ip, [ip]
 8005c80:	fa0c fc08 	lsl.w	ip, ip, r8
 8005c84:	ea4c 0707 	orr.w	r7, ip, r7
 8005c88:	f849 7b04 	str.w	r7, [r9], #4
 8005c8c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005c90:	40cf      	lsrs	r7, r1
 8005c92:	e7da      	b.n	8005c4a <rshift+0x4c>
 8005c94:	f851 cb04 	ldr.w	ip, [r1], #4
 8005c98:	f847 cf04 	str.w	ip, [r7, #4]!
 8005c9c:	e7c3      	b.n	8005c26 <rshift+0x28>
 8005c9e:	4623      	mov	r3, r4
 8005ca0:	e7e1      	b.n	8005c66 <rshift+0x68>

08005ca2 <__hexdig_fun>:
 8005ca2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005ca6:	2b09      	cmp	r3, #9
 8005ca8:	d802      	bhi.n	8005cb0 <__hexdig_fun+0xe>
 8005caa:	3820      	subs	r0, #32
 8005cac:	b2c0      	uxtb	r0, r0
 8005cae:	4770      	bx	lr
 8005cb0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005cb4:	2b05      	cmp	r3, #5
 8005cb6:	d801      	bhi.n	8005cbc <__hexdig_fun+0x1a>
 8005cb8:	3847      	subs	r0, #71	; 0x47
 8005cba:	e7f7      	b.n	8005cac <__hexdig_fun+0xa>
 8005cbc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005cc0:	2b05      	cmp	r3, #5
 8005cc2:	d801      	bhi.n	8005cc8 <__hexdig_fun+0x26>
 8005cc4:	3827      	subs	r0, #39	; 0x27
 8005cc6:	e7f1      	b.n	8005cac <__hexdig_fun+0xa>
 8005cc8:	2000      	movs	r0, #0
 8005cca:	4770      	bx	lr

08005ccc <__gethex>:
 8005ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd0:	ed2d 8b02 	vpush	{d8}
 8005cd4:	b089      	sub	sp, #36	; 0x24
 8005cd6:	ee08 0a10 	vmov	s16, r0
 8005cda:	9304      	str	r3, [sp, #16]
 8005cdc:	4bb4      	ldr	r3, [pc, #720]	; (8005fb0 <__gethex+0x2e4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	468b      	mov	fp, r1
 8005ce6:	4690      	mov	r8, r2
 8005ce8:	f7fa fa72 	bl	80001d0 <strlen>
 8005cec:	9b01      	ldr	r3, [sp, #4]
 8005cee:	f8db 2000 	ldr.w	r2, [fp]
 8005cf2:	4403      	add	r3, r0
 8005cf4:	4682      	mov	sl, r0
 8005cf6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005cfa:	9305      	str	r3, [sp, #20]
 8005cfc:	1c93      	adds	r3, r2, #2
 8005cfe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005d02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005d06:	32fe      	adds	r2, #254	; 0xfe
 8005d08:	18d1      	adds	r1, r2, r3
 8005d0a:	461f      	mov	r7, r3
 8005d0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005d10:	9100      	str	r1, [sp, #0]
 8005d12:	2830      	cmp	r0, #48	; 0x30
 8005d14:	d0f8      	beq.n	8005d08 <__gethex+0x3c>
 8005d16:	f7ff ffc4 	bl	8005ca2 <__hexdig_fun>
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d13a      	bne.n	8005d96 <__gethex+0xca>
 8005d20:	9901      	ldr	r1, [sp, #4]
 8005d22:	4652      	mov	r2, sl
 8005d24:	4638      	mov	r0, r7
 8005d26:	f001 fbd2 	bl	80074ce <strncmp>
 8005d2a:	4605      	mov	r5, r0
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	d168      	bne.n	8005e02 <__gethex+0x136>
 8005d30:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005d34:	eb07 060a 	add.w	r6, r7, sl
 8005d38:	f7ff ffb3 	bl	8005ca2 <__hexdig_fun>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	d062      	beq.n	8005e06 <__gethex+0x13a>
 8005d40:	4633      	mov	r3, r6
 8005d42:	7818      	ldrb	r0, [r3, #0]
 8005d44:	2830      	cmp	r0, #48	; 0x30
 8005d46:	461f      	mov	r7, r3
 8005d48:	f103 0301 	add.w	r3, r3, #1
 8005d4c:	d0f9      	beq.n	8005d42 <__gethex+0x76>
 8005d4e:	f7ff ffa8 	bl	8005ca2 <__hexdig_fun>
 8005d52:	2301      	movs	r3, #1
 8005d54:	fab0 f480 	clz	r4, r0
 8005d58:	0964      	lsrs	r4, r4, #5
 8005d5a:	4635      	mov	r5, r6
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	463a      	mov	r2, r7
 8005d60:	4616      	mov	r6, r2
 8005d62:	3201      	adds	r2, #1
 8005d64:	7830      	ldrb	r0, [r6, #0]
 8005d66:	f7ff ff9c 	bl	8005ca2 <__hexdig_fun>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	d1f8      	bne.n	8005d60 <__gethex+0x94>
 8005d6e:	9901      	ldr	r1, [sp, #4]
 8005d70:	4652      	mov	r2, sl
 8005d72:	4630      	mov	r0, r6
 8005d74:	f001 fbab 	bl	80074ce <strncmp>
 8005d78:	b980      	cbnz	r0, 8005d9c <__gethex+0xd0>
 8005d7a:	b94d      	cbnz	r5, 8005d90 <__gethex+0xc4>
 8005d7c:	eb06 050a 	add.w	r5, r6, sl
 8005d80:	462a      	mov	r2, r5
 8005d82:	4616      	mov	r6, r2
 8005d84:	3201      	adds	r2, #1
 8005d86:	7830      	ldrb	r0, [r6, #0]
 8005d88:	f7ff ff8b 	bl	8005ca2 <__hexdig_fun>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d1f8      	bne.n	8005d82 <__gethex+0xb6>
 8005d90:	1bad      	subs	r5, r5, r6
 8005d92:	00ad      	lsls	r5, r5, #2
 8005d94:	e004      	b.n	8005da0 <__gethex+0xd4>
 8005d96:	2400      	movs	r4, #0
 8005d98:	4625      	mov	r5, r4
 8005d9a:	e7e0      	b.n	8005d5e <__gethex+0x92>
 8005d9c:	2d00      	cmp	r5, #0
 8005d9e:	d1f7      	bne.n	8005d90 <__gethex+0xc4>
 8005da0:	7833      	ldrb	r3, [r6, #0]
 8005da2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005da6:	2b50      	cmp	r3, #80	; 0x50
 8005da8:	d13b      	bne.n	8005e22 <__gethex+0x156>
 8005daa:	7873      	ldrb	r3, [r6, #1]
 8005dac:	2b2b      	cmp	r3, #43	; 0x2b
 8005dae:	d02c      	beq.n	8005e0a <__gethex+0x13e>
 8005db0:	2b2d      	cmp	r3, #45	; 0x2d
 8005db2:	d02e      	beq.n	8005e12 <__gethex+0x146>
 8005db4:	1c71      	adds	r1, r6, #1
 8005db6:	f04f 0900 	mov.w	r9, #0
 8005dba:	7808      	ldrb	r0, [r1, #0]
 8005dbc:	f7ff ff71 	bl	8005ca2 <__hexdig_fun>
 8005dc0:	1e43      	subs	r3, r0, #1
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b18      	cmp	r3, #24
 8005dc6:	d82c      	bhi.n	8005e22 <__gethex+0x156>
 8005dc8:	f1a0 0210 	sub.w	r2, r0, #16
 8005dcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005dd0:	f7ff ff67 	bl	8005ca2 <__hexdig_fun>
 8005dd4:	1e43      	subs	r3, r0, #1
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b18      	cmp	r3, #24
 8005dda:	d91d      	bls.n	8005e18 <__gethex+0x14c>
 8005ddc:	f1b9 0f00 	cmp.w	r9, #0
 8005de0:	d000      	beq.n	8005de4 <__gethex+0x118>
 8005de2:	4252      	negs	r2, r2
 8005de4:	4415      	add	r5, r2
 8005de6:	f8cb 1000 	str.w	r1, [fp]
 8005dea:	b1e4      	cbz	r4, 8005e26 <__gethex+0x15a>
 8005dec:	9b00      	ldr	r3, [sp, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	bf14      	ite	ne
 8005df2:	2700      	movne	r7, #0
 8005df4:	2706      	moveq	r7, #6
 8005df6:	4638      	mov	r0, r7
 8005df8:	b009      	add	sp, #36	; 0x24
 8005dfa:	ecbd 8b02 	vpop	{d8}
 8005dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e02:	463e      	mov	r6, r7
 8005e04:	4625      	mov	r5, r4
 8005e06:	2401      	movs	r4, #1
 8005e08:	e7ca      	b.n	8005da0 <__gethex+0xd4>
 8005e0a:	f04f 0900 	mov.w	r9, #0
 8005e0e:	1cb1      	adds	r1, r6, #2
 8005e10:	e7d3      	b.n	8005dba <__gethex+0xee>
 8005e12:	f04f 0901 	mov.w	r9, #1
 8005e16:	e7fa      	b.n	8005e0e <__gethex+0x142>
 8005e18:	230a      	movs	r3, #10
 8005e1a:	fb03 0202 	mla	r2, r3, r2, r0
 8005e1e:	3a10      	subs	r2, #16
 8005e20:	e7d4      	b.n	8005dcc <__gethex+0x100>
 8005e22:	4631      	mov	r1, r6
 8005e24:	e7df      	b.n	8005de6 <__gethex+0x11a>
 8005e26:	1bf3      	subs	r3, r6, r7
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	2b07      	cmp	r3, #7
 8005e2e:	dc0b      	bgt.n	8005e48 <__gethex+0x17c>
 8005e30:	ee18 0a10 	vmov	r0, s16
 8005e34:	f000 fa82 	bl	800633c <_Balloc>
 8005e38:	4604      	mov	r4, r0
 8005e3a:	b940      	cbnz	r0, 8005e4e <__gethex+0x182>
 8005e3c:	4b5d      	ldr	r3, [pc, #372]	; (8005fb4 <__gethex+0x2e8>)
 8005e3e:	4602      	mov	r2, r0
 8005e40:	21de      	movs	r1, #222	; 0xde
 8005e42:	485d      	ldr	r0, [pc, #372]	; (8005fb8 <__gethex+0x2ec>)
 8005e44:	f001 fc38 	bl	80076b8 <__assert_func>
 8005e48:	3101      	adds	r1, #1
 8005e4a:	105b      	asrs	r3, r3, #1
 8005e4c:	e7ee      	b.n	8005e2c <__gethex+0x160>
 8005e4e:	f100 0914 	add.w	r9, r0, #20
 8005e52:	f04f 0b00 	mov.w	fp, #0
 8005e56:	f1ca 0301 	rsb	r3, sl, #1
 8005e5a:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e5e:	f8cd b000 	str.w	fp, [sp]
 8005e62:	9306      	str	r3, [sp, #24]
 8005e64:	42b7      	cmp	r7, r6
 8005e66:	d340      	bcc.n	8005eea <__gethex+0x21e>
 8005e68:	9802      	ldr	r0, [sp, #8]
 8005e6a:	9b00      	ldr	r3, [sp, #0]
 8005e6c:	f840 3b04 	str.w	r3, [r0], #4
 8005e70:	eba0 0009 	sub.w	r0, r0, r9
 8005e74:	1080      	asrs	r0, r0, #2
 8005e76:	0146      	lsls	r6, r0, #5
 8005e78:	6120      	str	r0, [r4, #16]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fb50 	bl	8006520 <__hi0bits>
 8005e80:	1a30      	subs	r0, r6, r0
 8005e82:	f8d8 6000 	ldr.w	r6, [r8]
 8005e86:	42b0      	cmp	r0, r6
 8005e88:	dd63      	ble.n	8005f52 <__gethex+0x286>
 8005e8a:	1b87      	subs	r7, r0, r6
 8005e8c:	4639      	mov	r1, r7
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 fef4 	bl	8006c7c <__any_on>
 8005e94:	4682      	mov	sl, r0
 8005e96:	b1a8      	cbz	r0, 8005ec4 <__gethex+0x1f8>
 8005e98:	1e7b      	subs	r3, r7, #1
 8005e9a:	1159      	asrs	r1, r3, #5
 8005e9c:	f003 021f 	and.w	r2, r3, #31
 8005ea0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005ea4:	f04f 0a01 	mov.w	sl, #1
 8005ea8:	fa0a f202 	lsl.w	r2, sl, r2
 8005eac:	420a      	tst	r2, r1
 8005eae:	d009      	beq.n	8005ec4 <__gethex+0x1f8>
 8005eb0:	4553      	cmp	r3, sl
 8005eb2:	dd05      	ble.n	8005ec0 <__gethex+0x1f4>
 8005eb4:	1eb9      	subs	r1, r7, #2
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f000 fee0 	bl	8006c7c <__any_on>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d145      	bne.n	8005f4c <__gethex+0x280>
 8005ec0:	f04f 0a02 	mov.w	sl, #2
 8005ec4:	4639      	mov	r1, r7
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f7ff fe99 	bl	8005bfe <rshift>
 8005ecc:	443d      	add	r5, r7
 8005ece:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005ed2:	42ab      	cmp	r3, r5
 8005ed4:	da4c      	bge.n	8005f70 <__gethex+0x2a4>
 8005ed6:	ee18 0a10 	vmov	r0, s16
 8005eda:	4621      	mov	r1, r4
 8005edc:	f000 fa6e 	bl	80063bc <_Bfree>
 8005ee0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	27a3      	movs	r7, #163	; 0xa3
 8005ee8:	e785      	b.n	8005df6 <__gethex+0x12a>
 8005eea:	1e73      	subs	r3, r6, #1
 8005eec:	9a05      	ldr	r2, [sp, #20]
 8005eee:	9303      	str	r3, [sp, #12]
 8005ef0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d019      	beq.n	8005f2c <__gethex+0x260>
 8005ef8:	f1bb 0f20 	cmp.w	fp, #32
 8005efc:	d107      	bne.n	8005f0e <__gethex+0x242>
 8005efe:	9b02      	ldr	r3, [sp, #8]
 8005f00:	9a00      	ldr	r2, [sp, #0]
 8005f02:	f843 2b04 	str.w	r2, [r3], #4
 8005f06:	9302      	str	r3, [sp, #8]
 8005f08:	2300      	movs	r3, #0
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	469b      	mov	fp, r3
 8005f0e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005f12:	f7ff fec6 	bl	8005ca2 <__hexdig_fun>
 8005f16:	9b00      	ldr	r3, [sp, #0]
 8005f18:	f000 000f 	and.w	r0, r0, #15
 8005f1c:	fa00 f00b 	lsl.w	r0, r0, fp
 8005f20:	4303      	orrs	r3, r0
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	f10b 0b04 	add.w	fp, fp, #4
 8005f28:	9b03      	ldr	r3, [sp, #12]
 8005f2a:	e00d      	b.n	8005f48 <__gethex+0x27c>
 8005f2c:	9b03      	ldr	r3, [sp, #12]
 8005f2e:	9a06      	ldr	r2, [sp, #24]
 8005f30:	4413      	add	r3, r2
 8005f32:	42bb      	cmp	r3, r7
 8005f34:	d3e0      	bcc.n	8005ef8 <__gethex+0x22c>
 8005f36:	4618      	mov	r0, r3
 8005f38:	9901      	ldr	r1, [sp, #4]
 8005f3a:	9307      	str	r3, [sp, #28]
 8005f3c:	4652      	mov	r2, sl
 8005f3e:	f001 fac6 	bl	80074ce <strncmp>
 8005f42:	9b07      	ldr	r3, [sp, #28]
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d1d7      	bne.n	8005ef8 <__gethex+0x22c>
 8005f48:	461e      	mov	r6, r3
 8005f4a:	e78b      	b.n	8005e64 <__gethex+0x198>
 8005f4c:	f04f 0a03 	mov.w	sl, #3
 8005f50:	e7b8      	b.n	8005ec4 <__gethex+0x1f8>
 8005f52:	da0a      	bge.n	8005f6a <__gethex+0x29e>
 8005f54:	1a37      	subs	r7, r6, r0
 8005f56:	4621      	mov	r1, r4
 8005f58:	ee18 0a10 	vmov	r0, s16
 8005f5c:	463a      	mov	r2, r7
 8005f5e:	f000 fc49 	bl	80067f4 <__lshift>
 8005f62:	1bed      	subs	r5, r5, r7
 8005f64:	4604      	mov	r4, r0
 8005f66:	f100 0914 	add.w	r9, r0, #20
 8005f6a:	f04f 0a00 	mov.w	sl, #0
 8005f6e:	e7ae      	b.n	8005ece <__gethex+0x202>
 8005f70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005f74:	42a8      	cmp	r0, r5
 8005f76:	dd72      	ble.n	800605e <__gethex+0x392>
 8005f78:	1b45      	subs	r5, r0, r5
 8005f7a:	42ae      	cmp	r6, r5
 8005f7c:	dc36      	bgt.n	8005fec <__gethex+0x320>
 8005f7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d02a      	beq.n	8005fdc <__gethex+0x310>
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d02c      	beq.n	8005fe4 <__gethex+0x318>
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d11c      	bne.n	8005fc8 <__gethex+0x2fc>
 8005f8e:	42ae      	cmp	r6, r5
 8005f90:	d11a      	bne.n	8005fc8 <__gethex+0x2fc>
 8005f92:	2e01      	cmp	r6, #1
 8005f94:	d112      	bne.n	8005fbc <__gethex+0x2f0>
 8005f96:	9a04      	ldr	r2, [sp, #16]
 8005f98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	6123      	str	r3, [r4, #16]
 8005fa2:	f8c9 3000 	str.w	r3, [r9]
 8005fa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005fa8:	2762      	movs	r7, #98	; 0x62
 8005faa:	601c      	str	r4, [r3, #0]
 8005fac:	e723      	b.n	8005df6 <__gethex+0x12a>
 8005fae:	bf00      	nop
 8005fb0:	08007efc 	.word	0x08007efc
 8005fb4:	08007e20 	.word	0x08007e20
 8005fb8:	08007e94 	.word	0x08007e94
 8005fbc:	1e71      	subs	r1, r6, #1
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f000 fe5c 	bl	8006c7c <__any_on>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d1e6      	bne.n	8005f96 <__gethex+0x2ca>
 8005fc8:	ee18 0a10 	vmov	r0, s16
 8005fcc:	4621      	mov	r1, r4
 8005fce:	f000 f9f5 	bl	80063bc <_Bfree>
 8005fd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	2750      	movs	r7, #80	; 0x50
 8005fda:	e70c      	b.n	8005df6 <__gethex+0x12a>
 8005fdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1f2      	bne.n	8005fc8 <__gethex+0x2fc>
 8005fe2:	e7d8      	b.n	8005f96 <__gethex+0x2ca>
 8005fe4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1d5      	bne.n	8005f96 <__gethex+0x2ca>
 8005fea:	e7ed      	b.n	8005fc8 <__gethex+0x2fc>
 8005fec:	1e6f      	subs	r7, r5, #1
 8005fee:	f1ba 0f00 	cmp.w	sl, #0
 8005ff2:	d131      	bne.n	8006058 <__gethex+0x38c>
 8005ff4:	b127      	cbz	r7, 8006000 <__gethex+0x334>
 8005ff6:	4639      	mov	r1, r7
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 fe3f 	bl	8006c7c <__any_on>
 8005ffe:	4682      	mov	sl, r0
 8006000:	117b      	asrs	r3, r7, #5
 8006002:	2101      	movs	r1, #1
 8006004:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006008:	f007 071f 	and.w	r7, r7, #31
 800600c:	fa01 f707 	lsl.w	r7, r1, r7
 8006010:	421f      	tst	r7, r3
 8006012:	4629      	mov	r1, r5
 8006014:	4620      	mov	r0, r4
 8006016:	bf18      	it	ne
 8006018:	f04a 0a02 	orrne.w	sl, sl, #2
 800601c:	1b76      	subs	r6, r6, r5
 800601e:	f7ff fdee 	bl	8005bfe <rshift>
 8006022:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006026:	2702      	movs	r7, #2
 8006028:	f1ba 0f00 	cmp.w	sl, #0
 800602c:	d048      	beq.n	80060c0 <__gethex+0x3f4>
 800602e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006032:	2b02      	cmp	r3, #2
 8006034:	d015      	beq.n	8006062 <__gethex+0x396>
 8006036:	2b03      	cmp	r3, #3
 8006038:	d017      	beq.n	800606a <__gethex+0x39e>
 800603a:	2b01      	cmp	r3, #1
 800603c:	d109      	bne.n	8006052 <__gethex+0x386>
 800603e:	f01a 0f02 	tst.w	sl, #2
 8006042:	d006      	beq.n	8006052 <__gethex+0x386>
 8006044:	f8d9 0000 	ldr.w	r0, [r9]
 8006048:	ea4a 0a00 	orr.w	sl, sl, r0
 800604c:	f01a 0f01 	tst.w	sl, #1
 8006050:	d10e      	bne.n	8006070 <__gethex+0x3a4>
 8006052:	f047 0710 	orr.w	r7, r7, #16
 8006056:	e033      	b.n	80060c0 <__gethex+0x3f4>
 8006058:	f04f 0a01 	mov.w	sl, #1
 800605c:	e7d0      	b.n	8006000 <__gethex+0x334>
 800605e:	2701      	movs	r7, #1
 8006060:	e7e2      	b.n	8006028 <__gethex+0x35c>
 8006062:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006064:	f1c3 0301 	rsb	r3, r3, #1
 8006068:	9315      	str	r3, [sp, #84]	; 0x54
 800606a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0f0      	beq.n	8006052 <__gethex+0x386>
 8006070:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006074:	f104 0314 	add.w	r3, r4, #20
 8006078:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800607c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006080:	f04f 0c00 	mov.w	ip, #0
 8006084:	4618      	mov	r0, r3
 8006086:	f853 2b04 	ldr.w	r2, [r3], #4
 800608a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800608e:	d01c      	beq.n	80060ca <__gethex+0x3fe>
 8006090:	3201      	adds	r2, #1
 8006092:	6002      	str	r2, [r0, #0]
 8006094:	2f02      	cmp	r7, #2
 8006096:	f104 0314 	add.w	r3, r4, #20
 800609a:	d13f      	bne.n	800611c <__gethex+0x450>
 800609c:	f8d8 2000 	ldr.w	r2, [r8]
 80060a0:	3a01      	subs	r2, #1
 80060a2:	42b2      	cmp	r2, r6
 80060a4:	d10a      	bne.n	80060bc <__gethex+0x3f0>
 80060a6:	1171      	asrs	r1, r6, #5
 80060a8:	2201      	movs	r2, #1
 80060aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060ae:	f006 061f 	and.w	r6, r6, #31
 80060b2:	fa02 f606 	lsl.w	r6, r2, r6
 80060b6:	421e      	tst	r6, r3
 80060b8:	bf18      	it	ne
 80060ba:	4617      	movne	r7, r2
 80060bc:	f047 0720 	orr.w	r7, r7, #32
 80060c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060c2:	601c      	str	r4, [r3, #0]
 80060c4:	9b04      	ldr	r3, [sp, #16]
 80060c6:	601d      	str	r5, [r3, #0]
 80060c8:	e695      	b.n	8005df6 <__gethex+0x12a>
 80060ca:	4299      	cmp	r1, r3
 80060cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80060d0:	d8d8      	bhi.n	8006084 <__gethex+0x3b8>
 80060d2:	68a3      	ldr	r3, [r4, #8]
 80060d4:	459b      	cmp	fp, r3
 80060d6:	db19      	blt.n	800610c <__gethex+0x440>
 80060d8:	6861      	ldr	r1, [r4, #4]
 80060da:	ee18 0a10 	vmov	r0, s16
 80060de:	3101      	adds	r1, #1
 80060e0:	f000 f92c 	bl	800633c <_Balloc>
 80060e4:	4681      	mov	r9, r0
 80060e6:	b918      	cbnz	r0, 80060f0 <__gethex+0x424>
 80060e8:	4b1a      	ldr	r3, [pc, #104]	; (8006154 <__gethex+0x488>)
 80060ea:	4602      	mov	r2, r0
 80060ec:	2184      	movs	r1, #132	; 0x84
 80060ee:	e6a8      	b.n	8005e42 <__gethex+0x176>
 80060f0:	6922      	ldr	r2, [r4, #16]
 80060f2:	3202      	adds	r2, #2
 80060f4:	f104 010c 	add.w	r1, r4, #12
 80060f8:	0092      	lsls	r2, r2, #2
 80060fa:	300c      	adds	r0, #12
 80060fc:	f000 f910 	bl	8006320 <memcpy>
 8006100:	4621      	mov	r1, r4
 8006102:	ee18 0a10 	vmov	r0, s16
 8006106:	f000 f959 	bl	80063bc <_Bfree>
 800610a:	464c      	mov	r4, r9
 800610c:	6923      	ldr	r3, [r4, #16]
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006114:	6122      	str	r2, [r4, #16]
 8006116:	2201      	movs	r2, #1
 8006118:	615a      	str	r2, [r3, #20]
 800611a:	e7bb      	b.n	8006094 <__gethex+0x3c8>
 800611c:	6922      	ldr	r2, [r4, #16]
 800611e:	455a      	cmp	r2, fp
 8006120:	dd0b      	ble.n	800613a <__gethex+0x46e>
 8006122:	2101      	movs	r1, #1
 8006124:	4620      	mov	r0, r4
 8006126:	f7ff fd6a 	bl	8005bfe <rshift>
 800612a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800612e:	3501      	adds	r5, #1
 8006130:	42ab      	cmp	r3, r5
 8006132:	f6ff aed0 	blt.w	8005ed6 <__gethex+0x20a>
 8006136:	2701      	movs	r7, #1
 8006138:	e7c0      	b.n	80060bc <__gethex+0x3f0>
 800613a:	f016 061f 	ands.w	r6, r6, #31
 800613e:	d0fa      	beq.n	8006136 <__gethex+0x46a>
 8006140:	4453      	add	r3, sl
 8006142:	f1c6 0620 	rsb	r6, r6, #32
 8006146:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800614a:	f000 f9e9 	bl	8006520 <__hi0bits>
 800614e:	42b0      	cmp	r0, r6
 8006150:	dbe7      	blt.n	8006122 <__gethex+0x456>
 8006152:	e7f0      	b.n	8006136 <__gethex+0x46a>
 8006154:	08007e20 	.word	0x08007e20

08006158 <L_shift>:
 8006158:	f1c2 0208 	rsb	r2, r2, #8
 800615c:	0092      	lsls	r2, r2, #2
 800615e:	b570      	push	{r4, r5, r6, lr}
 8006160:	f1c2 0620 	rsb	r6, r2, #32
 8006164:	6843      	ldr	r3, [r0, #4]
 8006166:	6804      	ldr	r4, [r0, #0]
 8006168:	fa03 f506 	lsl.w	r5, r3, r6
 800616c:	432c      	orrs	r4, r5
 800616e:	40d3      	lsrs	r3, r2
 8006170:	6004      	str	r4, [r0, #0]
 8006172:	f840 3f04 	str.w	r3, [r0, #4]!
 8006176:	4288      	cmp	r0, r1
 8006178:	d3f4      	bcc.n	8006164 <L_shift+0xc>
 800617a:	bd70      	pop	{r4, r5, r6, pc}

0800617c <__match>:
 800617c:	b530      	push	{r4, r5, lr}
 800617e:	6803      	ldr	r3, [r0, #0]
 8006180:	3301      	adds	r3, #1
 8006182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006186:	b914      	cbnz	r4, 800618e <__match+0x12>
 8006188:	6003      	str	r3, [r0, #0]
 800618a:	2001      	movs	r0, #1
 800618c:	bd30      	pop	{r4, r5, pc}
 800618e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006192:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006196:	2d19      	cmp	r5, #25
 8006198:	bf98      	it	ls
 800619a:	3220      	addls	r2, #32
 800619c:	42a2      	cmp	r2, r4
 800619e:	d0f0      	beq.n	8006182 <__match+0x6>
 80061a0:	2000      	movs	r0, #0
 80061a2:	e7f3      	b.n	800618c <__match+0x10>

080061a4 <__hexnan>:
 80061a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a8:	680b      	ldr	r3, [r1, #0]
 80061aa:	115e      	asrs	r6, r3, #5
 80061ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80061b0:	f013 031f 	ands.w	r3, r3, #31
 80061b4:	b087      	sub	sp, #28
 80061b6:	bf18      	it	ne
 80061b8:	3604      	addne	r6, #4
 80061ba:	2500      	movs	r5, #0
 80061bc:	1f37      	subs	r7, r6, #4
 80061be:	4690      	mov	r8, r2
 80061c0:	6802      	ldr	r2, [r0, #0]
 80061c2:	9301      	str	r3, [sp, #4]
 80061c4:	4682      	mov	sl, r0
 80061c6:	f846 5c04 	str.w	r5, [r6, #-4]
 80061ca:	46b9      	mov	r9, r7
 80061cc:	463c      	mov	r4, r7
 80061ce:	9502      	str	r5, [sp, #8]
 80061d0:	46ab      	mov	fp, r5
 80061d2:	7851      	ldrb	r1, [r2, #1]
 80061d4:	1c53      	adds	r3, r2, #1
 80061d6:	9303      	str	r3, [sp, #12]
 80061d8:	b341      	cbz	r1, 800622c <__hexnan+0x88>
 80061da:	4608      	mov	r0, r1
 80061dc:	9205      	str	r2, [sp, #20]
 80061de:	9104      	str	r1, [sp, #16]
 80061e0:	f7ff fd5f 	bl	8005ca2 <__hexdig_fun>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d14f      	bne.n	8006288 <__hexnan+0xe4>
 80061e8:	9904      	ldr	r1, [sp, #16]
 80061ea:	9a05      	ldr	r2, [sp, #20]
 80061ec:	2920      	cmp	r1, #32
 80061ee:	d818      	bhi.n	8006222 <__hexnan+0x7e>
 80061f0:	9b02      	ldr	r3, [sp, #8]
 80061f2:	459b      	cmp	fp, r3
 80061f4:	dd13      	ble.n	800621e <__hexnan+0x7a>
 80061f6:	454c      	cmp	r4, r9
 80061f8:	d206      	bcs.n	8006208 <__hexnan+0x64>
 80061fa:	2d07      	cmp	r5, #7
 80061fc:	dc04      	bgt.n	8006208 <__hexnan+0x64>
 80061fe:	462a      	mov	r2, r5
 8006200:	4649      	mov	r1, r9
 8006202:	4620      	mov	r0, r4
 8006204:	f7ff ffa8 	bl	8006158 <L_shift>
 8006208:	4544      	cmp	r4, r8
 800620a:	d950      	bls.n	80062ae <__hexnan+0x10a>
 800620c:	2300      	movs	r3, #0
 800620e:	f1a4 0904 	sub.w	r9, r4, #4
 8006212:	f844 3c04 	str.w	r3, [r4, #-4]
 8006216:	f8cd b008 	str.w	fp, [sp, #8]
 800621a:	464c      	mov	r4, r9
 800621c:	461d      	mov	r5, r3
 800621e:	9a03      	ldr	r2, [sp, #12]
 8006220:	e7d7      	b.n	80061d2 <__hexnan+0x2e>
 8006222:	2929      	cmp	r1, #41	; 0x29
 8006224:	d156      	bne.n	80062d4 <__hexnan+0x130>
 8006226:	3202      	adds	r2, #2
 8006228:	f8ca 2000 	str.w	r2, [sl]
 800622c:	f1bb 0f00 	cmp.w	fp, #0
 8006230:	d050      	beq.n	80062d4 <__hexnan+0x130>
 8006232:	454c      	cmp	r4, r9
 8006234:	d206      	bcs.n	8006244 <__hexnan+0xa0>
 8006236:	2d07      	cmp	r5, #7
 8006238:	dc04      	bgt.n	8006244 <__hexnan+0xa0>
 800623a:	462a      	mov	r2, r5
 800623c:	4649      	mov	r1, r9
 800623e:	4620      	mov	r0, r4
 8006240:	f7ff ff8a 	bl	8006158 <L_shift>
 8006244:	4544      	cmp	r4, r8
 8006246:	d934      	bls.n	80062b2 <__hexnan+0x10e>
 8006248:	f1a8 0204 	sub.w	r2, r8, #4
 800624c:	4623      	mov	r3, r4
 800624e:	f853 1b04 	ldr.w	r1, [r3], #4
 8006252:	f842 1f04 	str.w	r1, [r2, #4]!
 8006256:	429f      	cmp	r7, r3
 8006258:	d2f9      	bcs.n	800624e <__hexnan+0xaa>
 800625a:	1b3b      	subs	r3, r7, r4
 800625c:	f023 0303 	bic.w	r3, r3, #3
 8006260:	3304      	adds	r3, #4
 8006262:	3401      	adds	r4, #1
 8006264:	3e03      	subs	r6, #3
 8006266:	42b4      	cmp	r4, r6
 8006268:	bf88      	it	hi
 800626a:	2304      	movhi	r3, #4
 800626c:	4443      	add	r3, r8
 800626e:	2200      	movs	r2, #0
 8006270:	f843 2b04 	str.w	r2, [r3], #4
 8006274:	429f      	cmp	r7, r3
 8006276:	d2fb      	bcs.n	8006270 <__hexnan+0xcc>
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	b91b      	cbnz	r3, 8006284 <__hexnan+0xe0>
 800627c:	4547      	cmp	r7, r8
 800627e:	d127      	bne.n	80062d0 <__hexnan+0x12c>
 8006280:	2301      	movs	r3, #1
 8006282:	603b      	str	r3, [r7, #0]
 8006284:	2005      	movs	r0, #5
 8006286:	e026      	b.n	80062d6 <__hexnan+0x132>
 8006288:	3501      	adds	r5, #1
 800628a:	2d08      	cmp	r5, #8
 800628c:	f10b 0b01 	add.w	fp, fp, #1
 8006290:	dd06      	ble.n	80062a0 <__hexnan+0xfc>
 8006292:	4544      	cmp	r4, r8
 8006294:	d9c3      	bls.n	800621e <__hexnan+0x7a>
 8006296:	2300      	movs	r3, #0
 8006298:	f844 3c04 	str.w	r3, [r4, #-4]
 800629c:	2501      	movs	r5, #1
 800629e:	3c04      	subs	r4, #4
 80062a0:	6822      	ldr	r2, [r4, #0]
 80062a2:	f000 000f 	and.w	r0, r0, #15
 80062a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80062aa:	6022      	str	r2, [r4, #0]
 80062ac:	e7b7      	b.n	800621e <__hexnan+0x7a>
 80062ae:	2508      	movs	r5, #8
 80062b0:	e7b5      	b.n	800621e <__hexnan+0x7a>
 80062b2:	9b01      	ldr	r3, [sp, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0df      	beq.n	8006278 <__hexnan+0xd4>
 80062b8:	f04f 32ff 	mov.w	r2, #4294967295
 80062bc:	f1c3 0320 	rsb	r3, r3, #32
 80062c0:	fa22 f303 	lsr.w	r3, r2, r3
 80062c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80062c8:	401a      	ands	r2, r3
 80062ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80062ce:	e7d3      	b.n	8006278 <__hexnan+0xd4>
 80062d0:	3f04      	subs	r7, #4
 80062d2:	e7d1      	b.n	8006278 <__hexnan+0xd4>
 80062d4:	2004      	movs	r0, #4
 80062d6:	b007      	add	sp, #28
 80062d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080062dc <_localeconv_r>:
 80062dc:	4800      	ldr	r0, [pc, #0]	; (80062e0 <_localeconv_r+0x4>)
 80062de:	4770      	bx	lr
 80062e0:	20000178 	.word	0x20000178

080062e4 <__retarget_lock_init_recursive>:
 80062e4:	4770      	bx	lr

080062e6 <__retarget_lock_acquire_recursive>:
 80062e6:	4770      	bx	lr

080062e8 <__retarget_lock_release_recursive>:
 80062e8:	4770      	bx	lr
	...

080062ec <malloc>:
 80062ec:	4b02      	ldr	r3, [pc, #8]	; (80062f8 <malloc+0xc>)
 80062ee:	4601      	mov	r1, r0
 80062f0:	6818      	ldr	r0, [r3, #0]
 80062f2:	f000 bd67 	b.w	8006dc4 <_malloc_r>
 80062f6:	bf00      	nop
 80062f8:	20000020 	.word	0x20000020

080062fc <__ascii_mbtowc>:
 80062fc:	b082      	sub	sp, #8
 80062fe:	b901      	cbnz	r1, 8006302 <__ascii_mbtowc+0x6>
 8006300:	a901      	add	r1, sp, #4
 8006302:	b142      	cbz	r2, 8006316 <__ascii_mbtowc+0x1a>
 8006304:	b14b      	cbz	r3, 800631a <__ascii_mbtowc+0x1e>
 8006306:	7813      	ldrb	r3, [r2, #0]
 8006308:	600b      	str	r3, [r1, #0]
 800630a:	7812      	ldrb	r2, [r2, #0]
 800630c:	1e10      	subs	r0, r2, #0
 800630e:	bf18      	it	ne
 8006310:	2001      	movne	r0, #1
 8006312:	b002      	add	sp, #8
 8006314:	4770      	bx	lr
 8006316:	4610      	mov	r0, r2
 8006318:	e7fb      	b.n	8006312 <__ascii_mbtowc+0x16>
 800631a:	f06f 0001 	mvn.w	r0, #1
 800631e:	e7f8      	b.n	8006312 <__ascii_mbtowc+0x16>

08006320 <memcpy>:
 8006320:	440a      	add	r2, r1
 8006322:	4291      	cmp	r1, r2
 8006324:	f100 33ff 	add.w	r3, r0, #4294967295
 8006328:	d100      	bne.n	800632c <memcpy+0xc>
 800632a:	4770      	bx	lr
 800632c:	b510      	push	{r4, lr}
 800632e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006332:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006336:	4291      	cmp	r1, r2
 8006338:	d1f9      	bne.n	800632e <memcpy+0xe>
 800633a:	bd10      	pop	{r4, pc}

0800633c <_Balloc>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006340:	4604      	mov	r4, r0
 8006342:	460d      	mov	r5, r1
 8006344:	b976      	cbnz	r6, 8006364 <_Balloc+0x28>
 8006346:	2010      	movs	r0, #16
 8006348:	f7ff ffd0 	bl	80062ec <malloc>
 800634c:	4602      	mov	r2, r0
 800634e:	6260      	str	r0, [r4, #36]	; 0x24
 8006350:	b920      	cbnz	r0, 800635c <_Balloc+0x20>
 8006352:	4b18      	ldr	r3, [pc, #96]	; (80063b4 <_Balloc+0x78>)
 8006354:	4818      	ldr	r0, [pc, #96]	; (80063b8 <_Balloc+0x7c>)
 8006356:	2166      	movs	r1, #102	; 0x66
 8006358:	f001 f9ae 	bl	80076b8 <__assert_func>
 800635c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006360:	6006      	str	r6, [r0, #0]
 8006362:	60c6      	str	r6, [r0, #12]
 8006364:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006366:	68f3      	ldr	r3, [r6, #12]
 8006368:	b183      	cbz	r3, 800638c <_Balloc+0x50>
 800636a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006372:	b9b8      	cbnz	r0, 80063a4 <_Balloc+0x68>
 8006374:	2101      	movs	r1, #1
 8006376:	fa01 f605 	lsl.w	r6, r1, r5
 800637a:	1d72      	adds	r2, r6, #5
 800637c:	0092      	lsls	r2, r2, #2
 800637e:	4620      	mov	r0, r4
 8006380:	f000 fc9d 	bl	8006cbe <_calloc_r>
 8006384:	b160      	cbz	r0, 80063a0 <_Balloc+0x64>
 8006386:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800638a:	e00e      	b.n	80063aa <_Balloc+0x6e>
 800638c:	2221      	movs	r2, #33	; 0x21
 800638e:	2104      	movs	r1, #4
 8006390:	4620      	mov	r0, r4
 8006392:	f000 fc94 	bl	8006cbe <_calloc_r>
 8006396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006398:	60f0      	str	r0, [r6, #12]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e4      	bne.n	800636a <_Balloc+0x2e>
 80063a0:	2000      	movs	r0, #0
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	6802      	ldr	r2, [r0, #0]
 80063a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063aa:	2300      	movs	r3, #0
 80063ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063b0:	e7f7      	b.n	80063a2 <_Balloc+0x66>
 80063b2:	bf00      	nop
 80063b4:	08007dae 	.word	0x08007dae
 80063b8:	08007f10 	.word	0x08007f10

080063bc <_Bfree>:
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063c0:	4605      	mov	r5, r0
 80063c2:	460c      	mov	r4, r1
 80063c4:	b976      	cbnz	r6, 80063e4 <_Bfree+0x28>
 80063c6:	2010      	movs	r0, #16
 80063c8:	f7ff ff90 	bl	80062ec <malloc>
 80063cc:	4602      	mov	r2, r0
 80063ce:	6268      	str	r0, [r5, #36]	; 0x24
 80063d0:	b920      	cbnz	r0, 80063dc <_Bfree+0x20>
 80063d2:	4b09      	ldr	r3, [pc, #36]	; (80063f8 <_Bfree+0x3c>)
 80063d4:	4809      	ldr	r0, [pc, #36]	; (80063fc <_Bfree+0x40>)
 80063d6:	218a      	movs	r1, #138	; 0x8a
 80063d8:	f001 f96e 	bl	80076b8 <__assert_func>
 80063dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063e0:	6006      	str	r6, [r0, #0]
 80063e2:	60c6      	str	r6, [r0, #12]
 80063e4:	b13c      	cbz	r4, 80063f6 <_Bfree+0x3a>
 80063e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063e8:	6862      	ldr	r2, [r4, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063f0:	6021      	str	r1, [r4, #0]
 80063f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80063f6:	bd70      	pop	{r4, r5, r6, pc}
 80063f8:	08007dae 	.word	0x08007dae
 80063fc:	08007f10 	.word	0x08007f10

08006400 <__multadd>:
 8006400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006404:	690d      	ldr	r5, [r1, #16]
 8006406:	4607      	mov	r7, r0
 8006408:	460c      	mov	r4, r1
 800640a:	461e      	mov	r6, r3
 800640c:	f101 0c14 	add.w	ip, r1, #20
 8006410:	2000      	movs	r0, #0
 8006412:	f8dc 3000 	ldr.w	r3, [ip]
 8006416:	b299      	uxth	r1, r3
 8006418:	fb02 6101 	mla	r1, r2, r1, r6
 800641c:	0c1e      	lsrs	r6, r3, #16
 800641e:	0c0b      	lsrs	r3, r1, #16
 8006420:	fb02 3306 	mla	r3, r2, r6, r3
 8006424:	b289      	uxth	r1, r1
 8006426:	3001      	adds	r0, #1
 8006428:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800642c:	4285      	cmp	r5, r0
 800642e:	f84c 1b04 	str.w	r1, [ip], #4
 8006432:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006436:	dcec      	bgt.n	8006412 <__multadd+0x12>
 8006438:	b30e      	cbz	r6, 800647e <__multadd+0x7e>
 800643a:	68a3      	ldr	r3, [r4, #8]
 800643c:	42ab      	cmp	r3, r5
 800643e:	dc19      	bgt.n	8006474 <__multadd+0x74>
 8006440:	6861      	ldr	r1, [r4, #4]
 8006442:	4638      	mov	r0, r7
 8006444:	3101      	adds	r1, #1
 8006446:	f7ff ff79 	bl	800633c <_Balloc>
 800644a:	4680      	mov	r8, r0
 800644c:	b928      	cbnz	r0, 800645a <__multadd+0x5a>
 800644e:	4602      	mov	r2, r0
 8006450:	4b0c      	ldr	r3, [pc, #48]	; (8006484 <__multadd+0x84>)
 8006452:	480d      	ldr	r0, [pc, #52]	; (8006488 <__multadd+0x88>)
 8006454:	21b5      	movs	r1, #181	; 0xb5
 8006456:	f001 f92f 	bl	80076b8 <__assert_func>
 800645a:	6922      	ldr	r2, [r4, #16]
 800645c:	3202      	adds	r2, #2
 800645e:	f104 010c 	add.w	r1, r4, #12
 8006462:	0092      	lsls	r2, r2, #2
 8006464:	300c      	adds	r0, #12
 8006466:	f7ff ff5b 	bl	8006320 <memcpy>
 800646a:	4621      	mov	r1, r4
 800646c:	4638      	mov	r0, r7
 800646e:	f7ff ffa5 	bl	80063bc <_Bfree>
 8006472:	4644      	mov	r4, r8
 8006474:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006478:	3501      	adds	r5, #1
 800647a:	615e      	str	r6, [r3, #20]
 800647c:	6125      	str	r5, [r4, #16]
 800647e:	4620      	mov	r0, r4
 8006480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006484:	08007e20 	.word	0x08007e20
 8006488:	08007f10 	.word	0x08007f10

0800648c <__s2b>:
 800648c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006490:	460c      	mov	r4, r1
 8006492:	4615      	mov	r5, r2
 8006494:	461f      	mov	r7, r3
 8006496:	2209      	movs	r2, #9
 8006498:	3308      	adds	r3, #8
 800649a:	4606      	mov	r6, r0
 800649c:	fb93 f3f2 	sdiv	r3, r3, r2
 80064a0:	2100      	movs	r1, #0
 80064a2:	2201      	movs	r2, #1
 80064a4:	429a      	cmp	r2, r3
 80064a6:	db09      	blt.n	80064bc <__s2b+0x30>
 80064a8:	4630      	mov	r0, r6
 80064aa:	f7ff ff47 	bl	800633c <_Balloc>
 80064ae:	b940      	cbnz	r0, 80064c2 <__s2b+0x36>
 80064b0:	4602      	mov	r2, r0
 80064b2:	4b19      	ldr	r3, [pc, #100]	; (8006518 <__s2b+0x8c>)
 80064b4:	4819      	ldr	r0, [pc, #100]	; (800651c <__s2b+0x90>)
 80064b6:	21ce      	movs	r1, #206	; 0xce
 80064b8:	f001 f8fe 	bl	80076b8 <__assert_func>
 80064bc:	0052      	lsls	r2, r2, #1
 80064be:	3101      	adds	r1, #1
 80064c0:	e7f0      	b.n	80064a4 <__s2b+0x18>
 80064c2:	9b08      	ldr	r3, [sp, #32]
 80064c4:	6143      	str	r3, [r0, #20]
 80064c6:	2d09      	cmp	r5, #9
 80064c8:	f04f 0301 	mov.w	r3, #1
 80064cc:	6103      	str	r3, [r0, #16]
 80064ce:	dd16      	ble.n	80064fe <__s2b+0x72>
 80064d0:	f104 0909 	add.w	r9, r4, #9
 80064d4:	46c8      	mov	r8, r9
 80064d6:	442c      	add	r4, r5
 80064d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80064dc:	4601      	mov	r1, r0
 80064de:	3b30      	subs	r3, #48	; 0x30
 80064e0:	220a      	movs	r2, #10
 80064e2:	4630      	mov	r0, r6
 80064e4:	f7ff ff8c 	bl	8006400 <__multadd>
 80064e8:	45a0      	cmp	r8, r4
 80064ea:	d1f5      	bne.n	80064d8 <__s2b+0x4c>
 80064ec:	f1a5 0408 	sub.w	r4, r5, #8
 80064f0:	444c      	add	r4, r9
 80064f2:	1b2d      	subs	r5, r5, r4
 80064f4:	1963      	adds	r3, r4, r5
 80064f6:	42bb      	cmp	r3, r7
 80064f8:	db04      	blt.n	8006504 <__s2b+0x78>
 80064fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064fe:	340a      	adds	r4, #10
 8006500:	2509      	movs	r5, #9
 8006502:	e7f6      	b.n	80064f2 <__s2b+0x66>
 8006504:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006508:	4601      	mov	r1, r0
 800650a:	3b30      	subs	r3, #48	; 0x30
 800650c:	220a      	movs	r2, #10
 800650e:	4630      	mov	r0, r6
 8006510:	f7ff ff76 	bl	8006400 <__multadd>
 8006514:	e7ee      	b.n	80064f4 <__s2b+0x68>
 8006516:	bf00      	nop
 8006518:	08007e20 	.word	0x08007e20
 800651c:	08007f10 	.word	0x08007f10

08006520 <__hi0bits>:
 8006520:	0c03      	lsrs	r3, r0, #16
 8006522:	041b      	lsls	r3, r3, #16
 8006524:	b9d3      	cbnz	r3, 800655c <__hi0bits+0x3c>
 8006526:	0400      	lsls	r0, r0, #16
 8006528:	2310      	movs	r3, #16
 800652a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800652e:	bf04      	itt	eq
 8006530:	0200      	lsleq	r0, r0, #8
 8006532:	3308      	addeq	r3, #8
 8006534:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006538:	bf04      	itt	eq
 800653a:	0100      	lsleq	r0, r0, #4
 800653c:	3304      	addeq	r3, #4
 800653e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006542:	bf04      	itt	eq
 8006544:	0080      	lsleq	r0, r0, #2
 8006546:	3302      	addeq	r3, #2
 8006548:	2800      	cmp	r0, #0
 800654a:	db05      	blt.n	8006558 <__hi0bits+0x38>
 800654c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006550:	f103 0301 	add.w	r3, r3, #1
 8006554:	bf08      	it	eq
 8006556:	2320      	moveq	r3, #32
 8006558:	4618      	mov	r0, r3
 800655a:	4770      	bx	lr
 800655c:	2300      	movs	r3, #0
 800655e:	e7e4      	b.n	800652a <__hi0bits+0xa>

08006560 <__lo0bits>:
 8006560:	6803      	ldr	r3, [r0, #0]
 8006562:	f013 0207 	ands.w	r2, r3, #7
 8006566:	4601      	mov	r1, r0
 8006568:	d00b      	beq.n	8006582 <__lo0bits+0x22>
 800656a:	07da      	lsls	r2, r3, #31
 800656c:	d423      	bmi.n	80065b6 <__lo0bits+0x56>
 800656e:	0798      	lsls	r0, r3, #30
 8006570:	bf49      	itett	mi
 8006572:	085b      	lsrmi	r3, r3, #1
 8006574:	089b      	lsrpl	r3, r3, #2
 8006576:	2001      	movmi	r0, #1
 8006578:	600b      	strmi	r3, [r1, #0]
 800657a:	bf5c      	itt	pl
 800657c:	600b      	strpl	r3, [r1, #0]
 800657e:	2002      	movpl	r0, #2
 8006580:	4770      	bx	lr
 8006582:	b298      	uxth	r0, r3
 8006584:	b9a8      	cbnz	r0, 80065b2 <__lo0bits+0x52>
 8006586:	0c1b      	lsrs	r3, r3, #16
 8006588:	2010      	movs	r0, #16
 800658a:	b2da      	uxtb	r2, r3
 800658c:	b90a      	cbnz	r2, 8006592 <__lo0bits+0x32>
 800658e:	3008      	adds	r0, #8
 8006590:	0a1b      	lsrs	r3, r3, #8
 8006592:	071a      	lsls	r2, r3, #28
 8006594:	bf04      	itt	eq
 8006596:	091b      	lsreq	r3, r3, #4
 8006598:	3004      	addeq	r0, #4
 800659a:	079a      	lsls	r2, r3, #30
 800659c:	bf04      	itt	eq
 800659e:	089b      	lsreq	r3, r3, #2
 80065a0:	3002      	addeq	r0, #2
 80065a2:	07da      	lsls	r2, r3, #31
 80065a4:	d403      	bmi.n	80065ae <__lo0bits+0x4e>
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	f100 0001 	add.w	r0, r0, #1
 80065ac:	d005      	beq.n	80065ba <__lo0bits+0x5a>
 80065ae:	600b      	str	r3, [r1, #0]
 80065b0:	4770      	bx	lr
 80065b2:	4610      	mov	r0, r2
 80065b4:	e7e9      	b.n	800658a <__lo0bits+0x2a>
 80065b6:	2000      	movs	r0, #0
 80065b8:	4770      	bx	lr
 80065ba:	2020      	movs	r0, #32
 80065bc:	4770      	bx	lr
	...

080065c0 <__i2b>:
 80065c0:	b510      	push	{r4, lr}
 80065c2:	460c      	mov	r4, r1
 80065c4:	2101      	movs	r1, #1
 80065c6:	f7ff feb9 	bl	800633c <_Balloc>
 80065ca:	4602      	mov	r2, r0
 80065cc:	b928      	cbnz	r0, 80065da <__i2b+0x1a>
 80065ce:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <__i2b+0x24>)
 80065d0:	4805      	ldr	r0, [pc, #20]	; (80065e8 <__i2b+0x28>)
 80065d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80065d6:	f001 f86f 	bl	80076b8 <__assert_func>
 80065da:	2301      	movs	r3, #1
 80065dc:	6144      	str	r4, [r0, #20]
 80065de:	6103      	str	r3, [r0, #16]
 80065e0:	bd10      	pop	{r4, pc}
 80065e2:	bf00      	nop
 80065e4:	08007e20 	.word	0x08007e20
 80065e8:	08007f10 	.word	0x08007f10

080065ec <__multiply>:
 80065ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f0:	4691      	mov	r9, r2
 80065f2:	690a      	ldr	r2, [r1, #16]
 80065f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	bfb8      	it	lt
 80065fc:	460b      	movlt	r3, r1
 80065fe:	460c      	mov	r4, r1
 8006600:	bfbc      	itt	lt
 8006602:	464c      	movlt	r4, r9
 8006604:	4699      	movlt	r9, r3
 8006606:	6927      	ldr	r7, [r4, #16]
 8006608:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800660c:	68a3      	ldr	r3, [r4, #8]
 800660e:	6861      	ldr	r1, [r4, #4]
 8006610:	eb07 060a 	add.w	r6, r7, sl
 8006614:	42b3      	cmp	r3, r6
 8006616:	b085      	sub	sp, #20
 8006618:	bfb8      	it	lt
 800661a:	3101      	addlt	r1, #1
 800661c:	f7ff fe8e 	bl	800633c <_Balloc>
 8006620:	b930      	cbnz	r0, 8006630 <__multiply+0x44>
 8006622:	4602      	mov	r2, r0
 8006624:	4b44      	ldr	r3, [pc, #272]	; (8006738 <__multiply+0x14c>)
 8006626:	4845      	ldr	r0, [pc, #276]	; (800673c <__multiply+0x150>)
 8006628:	f240 115d 	movw	r1, #349	; 0x15d
 800662c:	f001 f844 	bl	80076b8 <__assert_func>
 8006630:	f100 0514 	add.w	r5, r0, #20
 8006634:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006638:	462b      	mov	r3, r5
 800663a:	2200      	movs	r2, #0
 800663c:	4543      	cmp	r3, r8
 800663e:	d321      	bcc.n	8006684 <__multiply+0x98>
 8006640:	f104 0314 	add.w	r3, r4, #20
 8006644:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006648:	f109 0314 	add.w	r3, r9, #20
 800664c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006650:	9202      	str	r2, [sp, #8]
 8006652:	1b3a      	subs	r2, r7, r4
 8006654:	3a15      	subs	r2, #21
 8006656:	f022 0203 	bic.w	r2, r2, #3
 800665a:	3204      	adds	r2, #4
 800665c:	f104 0115 	add.w	r1, r4, #21
 8006660:	428f      	cmp	r7, r1
 8006662:	bf38      	it	cc
 8006664:	2204      	movcc	r2, #4
 8006666:	9201      	str	r2, [sp, #4]
 8006668:	9a02      	ldr	r2, [sp, #8]
 800666a:	9303      	str	r3, [sp, #12]
 800666c:	429a      	cmp	r2, r3
 800666e:	d80c      	bhi.n	800668a <__multiply+0x9e>
 8006670:	2e00      	cmp	r6, #0
 8006672:	dd03      	ble.n	800667c <__multiply+0x90>
 8006674:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006678:	2b00      	cmp	r3, #0
 800667a:	d05a      	beq.n	8006732 <__multiply+0x146>
 800667c:	6106      	str	r6, [r0, #16]
 800667e:	b005      	add	sp, #20
 8006680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006684:	f843 2b04 	str.w	r2, [r3], #4
 8006688:	e7d8      	b.n	800663c <__multiply+0x50>
 800668a:	f8b3 a000 	ldrh.w	sl, [r3]
 800668e:	f1ba 0f00 	cmp.w	sl, #0
 8006692:	d024      	beq.n	80066de <__multiply+0xf2>
 8006694:	f104 0e14 	add.w	lr, r4, #20
 8006698:	46a9      	mov	r9, r5
 800669a:	f04f 0c00 	mov.w	ip, #0
 800669e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80066a2:	f8d9 1000 	ldr.w	r1, [r9]
 80066a6:	fa1f fb82 	uxth.w	fp, r2
 80066aa:	b289      	uxth	r1, r1
 80066ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80066b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80066b4:	f8d9 2000 	ldr.w	r2, [r9]
 80066b8:	4461      	add	r1, ip
 80066ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80066be:	fb0a c20b 	mla	r2, sl, fp, ip
 80066c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80066c6:	b289      	uxth	r1, r1
 80066c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80066cc:	4577      	cmp	r7, lr
 80066ce:	f849 1b04 	str.w	r1, [r9], #4
 80066d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80066d6:	d8e2      	bhi.n	800669e <__multiply+0xb2>
 80066d8:	9a01      	ldr	r2, [sp, #4]
 80066da:	f845 c002 	str.w	ip, [r5, r2]
 80066de:	9a03      	ldr	r2, [sp, #12]
 80066e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80066e4:	3304      	adds	r3, #4
 80066e6:	f1b9 0f00 	cmp.w	r9, #0
 80066ea:	d020      	beq.n	800672e <__multiply+0x142>
 80066ec:	6829      	ldr	r1, [r5, #0]
 80066ee:	f104 0c14 	add.w	ip, r4, #20
 80066f2:	46ae      	mov	lr, r5
 80066f4:	f04f 0a00 	mov.w	sl, #0
 80066f8:	f8bc b000 	ldrh.w	fp, [ip]
 80066fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006700:	fb09 220b 	mla	r2, r9, fp, r2
 8006704:	4492      	add	sl, r2
 8006706:	b289      	uxth	r1, r1
 8006708:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800670c:	f84e 1b04 	str.w	r1, [lr], #4
 8006710:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006714:	f8be 1000 	ldrh.w	r1, [lr]
 8006718:	0c12      	lsrs	r2, r2, #16
 800671a:	fb09 1102 	mla	r1, r9, r2, r1
 800671e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006722:	4567      	cmp	r7, ip
 8006724:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006728:	d8e6      	bhi.n	80066f8 <__multiply+0x10c>
 800672a:	9a01      	ldr	r2, [sp, #4]
 800672c:	50a9      	str	r1, [r5, r2]
 800672e:	3504      	adds	r5, #4
 8006730:	e79a      	b.n	8006668 <__multiply+0x7c>
 8006732:	3e01      	subs	r6, #1
 8006734:	e79c      	b.n	8006670 <__multiply+0x84>
 8006736:	bf00      	nop
 8006738:	08007e20 	.word	0x08007e20
 800673c:	08007f10 	.word	0x08007f10

08006740 <__pow5mult>:
 8006740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006744:	4615      	mov	r5, r2
 8006746:	f012 0203 	ands.w	r2, r2, #3
 800674a:	4606      	mov	r6, r0
 800674c:	460f      	mov	r7, r1
 800674e:	d007      	beq.n	8006760 <__pow5mult+0x20>
 8006750:	4c25      	ldr	r4, [pc, #148]	; (80067e8 <__pow5mult+0xa8>)
 8006752:	3a01      	subs	r2, #1
 8006754:	2300      	movs	r3, #0
 8006756:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800675a:	f7ff fe51 	bl	8006400 <__multadd>
 800675e:	4607      	mov	r7, r0
 8006760:	10ad      	asrs	r5, r5, #2
 8006762:	d03d      	beq.n	80067e0 <__pow5mult+0xa0>
 8006764:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006766:	b97c      	cbnz	r4, 8006788 <__pow5mult+0x48>
 8006768:	2010      	movs	r0, #16
 800676a:	f7ff fdbf 	bl	80062ec <malloc>
 800676e:	4602      	mov	r2, r0
 8006770:	6270      	str	r0, [r6, #36]	; 0x24
 8006772:	b928      	cbnz	r0, 8006780 <__pow5mult+0x40>
 8006774:	4b1d      	ldr	r3, [pc, #116]	; (80067ec <__pow5mult+0xac>)
 8006776:	481e      	ldr	r0, [pc, #120]	; (80067f0 <__pow5mult+0xb0>)
 8006778:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800677c:	f000 ff9c 	bl	80076b8 <__assert_func>
 8006780:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006784:	6004      	str	r4, [r0, #0]
 8006786:	60c4      	str	r4, [r0, #12]
 8006788:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800678c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006790:	b94c      	cbnz	r4, 80067a6 <__pow5mult+0x66>
 8006792:	f240 2171 	movw	r1, #625	; 0x271
 8006796:	4630      	mov	r0, r6
 8006798:	f7ff ff12 	bl	80065c0 <__i2b>
 800679c:	2300      	movs	r3, #0
 800679e:	f8c8 0008 	str.w	r0, [r8, #8]
 80067a2:	4604      	mov	r4, r0
 80067a4:	6003      	str	r3, [r0, #0]
 80067a6:	f04f 0900 	mov.w	r9, #0
 80067aa:	07eb      	lsls	r3, r5, #31
 80067ac:	d50a      	bpl.n	80067c4 <__pow5mult+0x84>
 80067ae:	4639      	mov	r1, r7
 80067b0:	4622      	mov	r2, r4
 80067b2:	4630      	mov	r0, r6
 80067b4:	f7ff ff1a 	bl	80065ec <__multiply>
 80067b8:	4639      	mov	r1, r7
 80067ba:	4680      	mov	r8, r0
 80067bc:	4630      	mov	r0, r6
 80067be:	f7ff fdfd 	bl	80063bc <_Bfree>
 80067c2:	4647      	mov	r7, r8
 80067c4:	106d      	asrs	r5, r5, #1
 80067c6:	d00b      	beq.n	80067e0 <__pow5mult+0xa0>
 80067c8:	6820      	ldr	r0, [r4, #0]
 80067ca:	b938      	cbnz	r0, 80067dc <__pow5mult+0x9c>
 80067cc:	4622      	mov	r2, r4
 80067ce:	4621      	mov	r1, r4
 80067d0:	4630      	mov	r0, r6
 80067d2:	f7ff ff0b 	bl	80065ec <__multiply>
 80067d6:	6020      	str	r0, [r4, #0]
 80067d8:	f8c0 9000 	str.w	r9, [r0]
 80067dc:	4604      	mov	r4, r0
 80067de:	e7e4      	b.n	80067aa <__pow5mult+0x6a>
 80067e0:	4638      	mov	r0, r7
 80067e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067e6:	bf00      	nop
 80067e8:	08008060 	.word	0x08008060
 80067ec:	08007dae 	.word	0x08007dae
 80067f0:	08007f10 	.word	0x08007f10

080067f4 <__lshift>:
 80067f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f8:	460c      	mov	r4, r1
 80067fa:	6849      	ldr	r1, [r1, #4]
 80067fc:	6923      	ldr	r3, [r4, #16]
 80067fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006802:	68a3      	ldr	r3, [r4, #8]
 8006804:	4607      	mov	r7, r0
 8006806:	4691      	mov	r9, r2
 8006808:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800680c:	f108 0601 	add.w	r6, r8, #1
 8006810:	42b3      	cmp	r3, r6
 8006812:	db0b      	blt.n	800682c <__lshift+0x38>
 8006814:	4638      	mov	r0, r7
 8006816:	f7ff fd91 	bl	800633c <_Balloc>
 800681a:	4605      	mov	r5, r0
 800681c:	b948      	cbnz	r0, 8006832 <__lshift+0x3e>
 800681e:	4602      	mov	r2, r0
 8006820:	4b2a      	ldr	r3, [pc, #168]	; (80068cc <__lshift+0xd8>)
 8006822:	482b      	ldr	r0, [pc, #172]	; (80068d0 <__lshift+0xdc>)
 8006824:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006828:	f000 ff46 	bl	80076b8 <__assert_func>
 800682c:	3101      	adds	r1, #1
 800682e:	005b      	lsls	r3, r3, #1
 8006830:	e7ee      	b.n	8006810 <__lshift+0x1c>
 8006832:	2300      	movs	r3, #0
 8006834:	f100 0114 	add.w	r1, r0, #20
 8006838:	f100 0210 	add.w	r2, r0, #16
 800683c:	4618      	mov	r0, r3
 800683e:	4553      	cmp	r3, sl
 8006840:	db37      	blt.n	80068b2 <__lshift+0xbe>
 8006842:	6920      	ldr	r0, [r4, #16]
 8006844:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006848:	f104 0314 	add.w	r3, r4, #20
 800684c:	f019 091f 	ands.w	r9, r9, #31
 8006850:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006854:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006858:	d02f      	beq.n	80068ba <__lshift+0xc6>
 800685a:	f1c9 0e20 	rsb	lr, r9, #32
 800685e:	468a      	mov	sl, r1
 8006860:	f04f 0c00 	mov.w	ip, #0
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	fa02 f209 	lsl.w	r2, r2, r9
 800686a:	ea42 020c 	orr.w	r2, r2, ip
 800686e:	f84a 2b04 	str.w	r2, [sl], #4
 8006872:	f853 2b04 	ldr.w	r2, [r3], #4
 8006876:	4298      	cmp	r0, r3
 8006878:	fa22 fc0e 	lsr.w	ip, r2, lr
 800687c:	d8f2      	bhi.n	8006864 <__lshift+0x70>
 800687e:	1b03      	subs	r3, r0, r4
 8006880:	3b15      	subs	r3, #21
 8006882:	f023 0303 	bic.w	r3, r3, #3
 8006886:	3304      	adds	r3, #4
 8006888:	f104 0215 	add.w	r2, r4, #21
 800688c:	4290      	cmp	r0, r2
 800688e:	bf38      	it	cc
 8006890:	2304      	movcc	r3, #4
 8006892:	f841 c003 	str.w	ip, [r1, r3]
 8006896:	f1bc 0f00 	cmp.w	ip, #0
 800689a:	d001      	beq.n	80068a0 <__lshift+0xac>
 800689c:	f108 0602 	add.w	r6, r8, #2
 80068a0:	3e01      	subs	r6, #1
 80068a2:	4638      	mov	r0, r7
 80068a4:	612e      	str	r6, [r5, #16]
 80068a6:	4621      	mov	r1, r4
 80068a8:	f7ff fd88 	bl	80063bc <_Bfree>
 80068ac:	4628      	mov	r0, r5
 80068ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80068b6:	3301      	adds	r3, #1
 80068b8:	e7c1      	b.n	800683e <__lshift+0x4a>
 80068ba:	3904      	subs	r1, #4
 80068bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80068c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80068c4:	4298      	cmp	r0, r3
 80068c6:	d8f9      	bhi.n	80068bc <__lshift+0xc8>
 80068c8:	e7ea      	b.n	80068a0 <__lshift+0xac>
 80068ca:	bf00      	nop
 80068cc:	08007e20 	.word	0x08007e20
 80068d0:	08007f10 	.word	0x08007f10

080068d4 <__mcmp>:
 80068d4:	b530      	push	{r4, r5, lr}
 80068d6:	6902      	ldr	r2, [r0, #16]
 80068d8:	690c      	ldr	r4, [r1, #16]
 80068da:	1b12      	subs	r2, r2, r4
 80068dc:	d10e      	bne.n	80068fc <__mcmp+0x28>
 80068de:	f100 0314 	add.w	r3, r0, #20
 80068e2:	3114      	adds	r1, #20
 80068e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80068e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80068ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80068f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80068f4:	42a5      	cmp	r5, r4
 80068f6:	d003      	beq.n	8006900 <__mcmp+0x2c>
 80068f8:	d305      	bcc.n	8006906 <__mcmp+0x32>
 80068fa:	2201      	movs	r2, #1
 80068fc:	4610      	mov	r0, r2
 80068fe:	bd30      	pop	{r4, r5, pc}
 8006900:	4283      	cmp	r3, r0
 8006902:	d3f3      	bcc.n	80068ec <__mcmp+0x18>
 8006904:	e7fa      	b.n	80068fc <__mcmp+0x28>
 8006906:	f04f 32ff 	mov.w	r2, #4294967295
 800690a:	e7f7      	b.n	80068fc <__mcmp+0x28>

0800690c <__mdiff>:
 800690c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006910:	460c      	mov	r4, r1
 8006912:	4606      	mov	r6, r0
 8006914:	4611      	mov	r1, r2
 8006916:	4620      	mov	r0, r4
 8006918:	4690      	mov	r8, r2
 800691a:	f7ff ffdb 	bl	80068d4 <__mcmp>
 800691e:	1e05      	subs	r5, r0, #0
 8006920:	d110      	bne.n	8006944 <__mdiff+0x38>
 8006922:	4629      	mov	r1, r5
 8006924:	4630      	mov	r0, r6
 8006926:	f7ff fd09 	bl	800633c <_Balloc>
 800692a:	b930      	cbnz	r0, 800693a <__mdiff+0x2e>
 800692c:	4b3a      	ldr	r3, [pc, #232]	; (8006a18 <__mdiff+0x10c>)
 800692e:	4602      	mov	r2, r0
 8006930:	f240 2132 	movw	r1, #562	; 0x232
 8006934:	4839      	ldr	r0, [pc, #228]	; (8006a1c <__mdiff+0x110>)
 8006936:	f000 febf 	bl	80076b8 <__assert_func>
 800693a:	2301      	movs	r3, #1
 800693c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006944:	bfa4      	itt	ge
 8006946:	4643      	movge	r3, r8
 8006948:	46a0      	movge	r8, r4
 800694a:	4630      	mov	r0, r6
 800694c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006950:	bfa6      	itte	ge
 8006952:	461c      	movge	r4, r3
 8006954:	2500      	movge	r5, #0
 8006956:	2501      	movlt	r5, #1
 8006958:	f7ff fcf0 	bl	800633c <_Balloc>
 800695c:	b920      	cbnz	r0, 8006968 <__mdiff+0x5c>
 800695e:	4b2e      	ldr	r3, [pc, #184]	; (8006a18 <__mdiff+0x10c>)
 8006960:	4602      	mov	r2, r0
 8006962:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006966:	e7e5      	b.n	8006934 <__mdiff+0x28>
 8006968:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800696c:	6926      	ldr	r6, [r4, #16]
 800696e:	60c5      	str	r5, [r0, #12]
 8006970:	f104 0914 	add.w	r9, r4, #20
 8006974:	f108 0514 	add.w	r5, r8, #20
 8006978:	f100 0e14 	add.w	lr, r0, #20
 800697c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006980:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006984:	f108 0210 	add.w	r2, r8, #16
 8006988:	46f2      	mov	sl, lr
 800698a:	2100      	movs	r1, #0
 800698c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006990:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006994:	fa1f f883 	uxth.w	r8, r3
 8006998:	fa11 f18b 	uxtah	r1, r1, fp
 800699c:	0c1b      	lsrs	r3, r3, #16
 800699e:	eba1 0808 	sub.w	r8, r1, r8
 80069a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80069a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80069aa:	fa1f f888 	uxth.w	r8, r8
 80069ae:	1419      	asrs	r1, r3, #16
 80069b0:	454e      	cmp	r6, r9
 80069b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80069b6:	f84a 3b04 	str.w	r3, [sl], #4
 80069ba:	d8e7      	bhi.n	800698c <__mdiff+0x80>
 80069bc:	1b33      	subs	r3, r6, r4
 80069be:	3b15      	subs	r3, #21
 80069c0:	f023 0303 	bic.w	r3, r3, #3
 80069c4:	3304      	adds	r3, #4
 80069c6:	3415      	adds	r4, #21
 80069c8:	42a6      	cmp	r6, r4
 80069ca:	bf38      	it	cc
 80069cc:	2304      	movcc	r3, #4
 80069ce:	441d      	add	r5, r3
 80069d0:	4473      	add	r3, lr
 80069d2:	469e      	mov	lr, r3
 80069d4:	462e      	mov	r6, r5
 80069d6:	4566      	cmp	r6, ip
 80069d8:	d30e      	bcc.n	80069f8 <__mdiff+0xec>
 80069da:	f10c 0203 	add.w	r2, ip, #3
 80069de:	1b52      	subs	r2, r2, r5
 80069e0:	f022 0203 	bic.w	r2, r2, #3
 80069e4:	3d03      	subs	r5, #3
 80069e6:	45ac      	cmp	ip, r5
 80069e8:	bf38      	it	cc
 80069ea:	2200      	movcc	r2, #0
 80069ec:	441a      	add	r2, r3
 80069ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80069f2:	b17b      	cbz	r3, 8006a14 <__mdiff+0x108>
 80069f4:	6107      	str	r7, [r0, #16]
 80069f6:	e7a3      	b.n	8006940 <__mdiff+0x34>
 80069f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80069fc:	fa11 f288 	uxtah	r2, r1, r8
 8006a00:	1414      	asrs	r4, r2, #16
 8006a02:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a06:	b292      	uxth	r2, r2
 8006a08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006a0c:	f84e 2b04 	str.w	r2, [lr], #4
 8006a10:	1421      	asrs	r1, r4, #16
 8006a12:	e7e0      	b.n	80069d6 <__mdiff+0xca>
 8006a14:	3f01      	subs	r7, #1
 8006a16:	e7ea      	b.n	80069ee <__mdiff+0xe2>
 8006a18:	08007e20 	.word	0x08007e20
 8006a1c:	08007f10 	.word	0x08007f10

08006a20 <__ulp>:
 8006a20:	b082      	sub	sp, #8
 8006a22:	ed8d 0b00 	vstr	d0, [sp]
 8006a26:	9b01      	ldr	r3, [sp, #4]
 8006a28:	4912      	ldr	r1, [pc, #72]	; (8006a74 <__ulp+0x54>)
 8006a2a:	4019      	ands	r1, r3
 8006a2c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006a30:	2900      	cmp	r1, #0
 8006a32:	dd05      	ble.n	8006a40 <__ulp+0x20>
 8006a34:	2200      	movs	r2, #0
 8006a36:	460b      	mov	r3, r1
 8006a38:	ec43 2b10 	vmov	d0, r2, r3
 8006a3c:	b002      	add	sp, #8
 8006a3e:	4770      	bx	lr
 8006a40:	4249      	negs	r1, r1
 8006a42:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006a46:	ea4f 5021 	mov.w	r0, r1, asr #20
 8006a4a:	f04f 0200 	mov.w	r2, #0
 8006a4e:	f04f 0300 	mov.w	r3, #0
 8006a52:	da04      	bge.n	8006a5e <__ulp+0x3e>
 8006a54:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006a58:	fa41 f300 	asr.w	r3, r1, r0
 8006a5c:	e7ec      	b.n	8006a38 <__ulp+0x18>
 8006a5e:	f1a0 0114 	sub.w	r1, r0, #20
 8006a62:	291e      	cmp	r1, #30
 8006a64:	bfda      	itte	le
 8006a66:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8006a6a:	fa20 f101 	lsrle.w	r1, r0, r1
 8006a6e:	2101      	movgt	r1, #1
 8006a70:	460a      	mov	r2, r1
 8006a72:	e7e1      	b.n	8006a38 <__ulp+0x18>
 8006a74:	7ff00000 	.word	0x7ff00000

08006a78 <__b2d>:
 8006a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7a:	6905      	ldr	r5, [r0, #16]
 8006a7c:	f100 0714 	add.w	r7, r0, #20
 8006a80:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006a84:	1f2e      	subs	r6, r5, #4
 8006a86:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f7ff fd48 	bl	8006520 <__hi0bits>
 8006a90:	f1c0 0320 	rsb	r3, r0, #32
 8006a94:	280a      	cmp	r0, #10
 8006a96:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006b14 <__b2d+0x9c>
 8006a9a:	600b      	str	r3, [r1, #0]
 8006a9c:	dc14      	bgt.n	8006ac8 <__b2d+0x50>
 8006a9e:	f1c0 0e0b 	rsb	lr, r0, #11
 8006aa2:	fa24 f10e 	lsr.w	r1, r4, lr
 8006aa6:	42b7      	cmp	r7, r6
 8006aa8:	ea41 030c 	orr.w	r3, r1, ip
 8006aac:	bf34      	ite	cc
 8006aae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006ab2:	2100      	movcs	r1, #0
 8006ab4:	3015      	adds	r0, #21
 8006ab6:	fa04 f000 	lsl.w	r0, r4, r0
 8006aba:	fa21 f10e 	lsr.w	r1, r1, lr
 8006abe:	ea40 0201 	orr.w	r2, r0, r1
 8006ac2:	ec43 2b10 	vmov	d0, r2, r3
 8006ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ac8:	42b7      	cmp	r7, r6
 8006aca:	bf3a      	itte	cc
 8006acc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006ad0:	f1a5 0608 	subcc.w	r6, r5, #8
 8006ad4:	2100      	movcs	r1, #0
 8006ad6:	380b      	subs	r0, #11
 8006ad8:	d017      	beq.n	8006b0a <__b2d+0x92>
 8006ada:	f1c0 0c20 	rsb	ip, r0, #32
 8006ade:	fa04 f500 	lsl.w	r5, r4, r0
 8006ae2:	42be      	cmp	r6, r7
 8006ae4:	fa21 f40c 	lsr.w	r4, r1, ip
 8006ae8:	ea45 0504 	orr.w	r5, r5, r4
 8006aec:	bf8c      	ite	hi
 8006aee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006af2:	2400      	movls	r4, #0
 8006af4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006af8:	fa01 f000 	lsl.w	r0, r1, r0
 8006afc:	fa24 f40c 	lsr.w	r4, r4, ip
 8006b00:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006b04:	ea40 0204 	orr.w	r2, r0, r4
 8006b08:	e7db      	b.n	8006ac2 <__b2d+0x4a>
 8006b0a:	ea44 030c 	orr.w	r3, r4, ip
 8006b0e:	460a      	mov	r2, r1
 8006b10:	e7d7      	b.n	8006ac2 <__b2d+0x4a>
 8006b12:	bf00      	nop
 8006b14:	3ff00000 	.word	0x3ff00000

08006b18 <__d2b>:
 8006b18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b1c:	4689      	mov	r9, r1
 8006b1e:	2101      	movs	r1, #1
 8006b20:	ec57 6b10 	vmov	r6, r7, d0
 8006b24:	4690      	mov	r8, r2
 8006b26:	f7ff fc09 	bl	800633c <_Balloc>
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	b930      	cbnz	r0, 8006b3c <__d2b+0x24>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	4b25      	ldr	r3, [pc, #148]	; (8006bc8 <__d2b+0xb0>)
 8006b32:	4826      	ldr	r0, [pc, #152]	; (8006bcc <__d2b+0xb4>)
 8006b34:	f240 310a 	movw	r1, #778	; 0x30a
 8006b38:	f000 fdbe 	bl	80076b8 <__assert_func>
 8006b3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006b40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b44:	bb35      	cbnz	r5, 8006b94 <__d2b+0x7c>
 8006b46:	2e00      	cmp	r6, #0
 8006b48:	9301      	str	r3, [sp, #4]
 8006b4a:	d028      	beq.n	8006b9e <__d2b+0x86>
 8006b4c:	4668      	mov	r0, sp
 8006b4e:	9600      	str	r6, [sp, #0]
 8006b50:	f7ff fd06 	bl	8006560 <__lo0bits>
 8006b54:	9900      	ldr	r1, [sp, #0]
 8006b56:	b300      	cbz	r0, 8006b9a <__d2b+0x82>
 8006b58:	9a01      	ldr	r2, [sp, #4]
 8006b5a:	f1c0 0320 	rsb	r3, r0, #32
 8006b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b62:	430b      	orrs	r3, r1
 8006b64:	40c2      	lsrs	r2, r0
 8006b66:	6163      	str	r3, [r4, #20]
 8006b68:	9201      	str	r2, [sp, #4]
 8006b6a:	9b01      	ldr	r3, [sp, #4]
 8006b6c:	61a3      	str	r3, [r4, #24]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	bf14      	ite	ne
 8006b72:	2202      	movne	r2, #2
 8006b74:	2201      	moveq	r2, #1
 8006b76:	6122      	str	r2, [r4, #16]
 8006b78:	b1d5      	cbz	r5, 8006bb0 <__d2b+0x98>
 8006b7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b7e:	4405      	add	r5, r0
 8006b80:	f8c9 5000 	str.w	r5, [r9]
 8006b84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b88:	f8c8 0000 	str.w	r0, [r8]
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	b003      	add	sp, #12
 8006b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b98:	e7d5      	b.n	8006b46 <__d2b+0x2e>
 8006b9a:	6161      	str	r1, [r4, #20]
 8006b9c:	e7e5      	b.n	8006b6a <__d2b+0x52>
 8006b9e:	a801      	add	r0, sp, #4
 8006ba0:	f7ff fcde 	bl	8006560 <__lo0bits>
 8006ba4:	9b01      	ldr	r3, [sp, #4]
 8006ba6:	6163      	str	r3, [r4, #20]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	6122      	str	r2, [r4, #16]
 8006bac:	3020      	adds	r0, #32
 8006bae:	e7e3      	b.n	8006b78 <__d2b+0x60>
 8006bb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006bb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006bb8:	f8c9 0000 	str.w	r0, [r9]
 8006bbc:	6918      	ldr	r0, [r3, #16]
 8006bbe:	f7ff fcaf 	bl	8006520 <__hi0bits>
 8006bc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006bc6:	e7df      	b.n	8006b88 <__d2b+0x70>
 8006bc8:	08007e20 	.word	0x08007e20
 8006bcc:	08007f10 	.word	0x08007f10

08006bd0 <__ratio>:
 8006bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	4688      	mov	r8, r1
 8006bd6:	4669      	mov	r1, sp
 8006bd8:	4681      	mov	r9, r0
 8006bda:	f7ff ff4d 	bl	8006a78 <__b2d>
 8006bde:	a901      	add	r1, sp, #4
 8006be0:	4640      	mov	r0, r8
 8006be2:	ec55 4b10 	vmov	r4, r5, d0
 8006be6:	f7ff ff47 	bl	8006a78 <__b2d>
 8006bea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006bee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006bf2:	eba3 0c02 	sub.w	ip, r3, r2
 8006bf6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006bfa:	1a9b      	subs	r3, r3, r2
 8006bfc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006c00:	ec51 0b10 	vmov	r0, r1, d0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	bfd6      	itet	le
 8006c08:	460a      	movle	r2, r1
 8006c0a:	462a      	movgt	r2, r5
 8006c0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006c10:	468b      	mov	fp, r1
 8006c12:	462f      	mov	r7, r5
 8006c14:	bfd4      	ite	le
 8006c16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006c1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006c1e:	4620      	mov	r0, r4
 8006c20:	ee10 2a10 	vmov	r2, s0
 8006c24:	465b      	mov	r3, fp
 8006c26:	4639      	mov	r1, r7
 8006c28:	f7f9 fe10 	bl	800084c <__aeabi_ddiv>
 8006c2c:	ec41 0b10 	vmov	d0, r0, r1
 8006c30:	b003      	add	sp, #12
 8006c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006c36 <__copybits>:
 8006c36:	3901      	subs	r1, #1
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	1149      	asrs	r1, r1, #5
 8006c3c:	6914      	ldr	r4, [r2, #16]
 8006c3e:	3101      	adds	r1, #1
 8006c40:	f102 0314 	add.w	r3, r2, #20
 8006c44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006c48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006c4c:	1f05      	subs	r5, r0, #4
 8006c4e:	42a3      	cmp	r3, r4
 8006c50:	d30c      	bcc.n	8006c6c <__copybits+0x36>
 8006c52:	1aa3      	subs	r3, r4, r2
 8006c54:	3b11      	subs	r3, #17
 8006c56:	f023 0303 	bic.w	r3, r3, #3
 8006c5a:	3211      	adds	r2, #17
 8006c5c:	42a2      	cmp	r2, r4
 8006c5e:	bf88      	it	hi
 8006c60:	2300      	movhi	r3, #0
 8006c62:	4418      	add	r0, r3
 8006c64:	2300      	movs	r3, #0
 8006c66:	4288      	cmp	r0, r1
 8006c68:	d305      	bcc.n	8006c76 <__copybits+0x40>
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}
 8006c6c:	f853 6b04 	ldr.w	r6, [r3], #4
 8006c70:	f845 6f04 	str.w	r6, [r5, #4]!
 8006c74:	e7eb      	b.n	8006c4e <__copybits+0x18>
 8006c76:	f840 3b04 	str.w	r3, [r0], #4
 8006c7a:	e7f4      	b.n	8006c66 <__copybits+0x30>

08006c7c <__any_on>:
 8006c7c:	f100 0214 	add.w	r2, r0, #20
 8006c80:	6900      	ldr	r0, [r0, #16]
 8006c82:	114b      	asrs	r3, r1, #5
 8006c84:	4298      	cmp	r0, r3
 8006c86:	b510      	push	{r4, lr}
 8006c88:	db11      	blt.n	8006cae <__any_on+0x32>
 8006c8a:	dd0a      	ble.n	8006ca2 <__any_on+0x26>
 8006c8c:	f011 011f 	ands.w	r1, r1, #31
 8006c90:	d007      	beq.n	8006ca2 <__any_on+0x26>
 8006c92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006c96:	fa24 f001 	lsr.w	r0, r4, r1
 8006c9a:	fa00 f101 	lsl.w	r1, r0, r1
 8006c9e:	428c      	cmp	r4, r1
 8006ca0:	d10b      	bne.n	8006cba <__any_on+0x3e>
 8006ca2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d803      	bhi.n	8006cb2 <__any_on+0x36>
 8006caa:	2000      	movs	r0, #0
 8006cac:	bd10      	pop	{r4, pc}
 8006cae:	4603      	mov	r3, r0
 8006cb0:	e7f7      	b.n	8006ca2 <__any_on+0x26>
 8006cb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006cb6:	2900      	cmp	r1, #0
 8006cb8:	d0f5      	beq.n	8006ca6 <__any_on+0x2a>
 8006cba:	2001      	movs	r0, #1
 8006cbc:	e7f6      	b.n	8006cac <__any_on+0x30>

08006cbe <_calloc_r>:
 8006cbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cc0:	fba1 2402 	umull	r2, r4, r1, r2
 8006cc4:	b94c      	cbnz	r4, 8006cda <_calloc_r+0x1c>
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	9201      	str	r2, [sp, #4]
 8006cca:	f000 f87b 	bl	8006dc4 <_malloc_r>
 8006cce:	9a01      	ldr	r2, [sp, #4]
 8006cd0:	4605      	mov	r5, r0
 8006cd2:	b930      	cbnz	r0, 8006ce2 <_calloc_r+0x24>
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	b003      	add	sp, #12
 8006cd8:	bd30      	pop	{r4, r5, pc}
 8006cda:	220c      	movs	r2, #12
 8006cdc:	6002      	str	r2, [r0, #0]
 8006cde:	2500      	movs	r5, #0
 8006ce0:	e7f8      	b.n	8006cd4 <_calloc_r+0x16>
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	f7fc fac6 	bl	8003274 <memset>
 8006ce8:	e7f4      	b.n	8006cd4 <_calloc_r+0x16>
	...

08006cec <_free_r>:
 8006cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cee:	2900      	cmp	r1, #0
 8006cf0:	d044      	beq.n	8006d7c <_free_r+0x90>
 8006cf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cf6:	9001      	str	r0, [sp, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f1a1 0404 	sub.w	r4, r1, #4
 8006cfe:	bfb8      	it	lt
 8006d00:	18e4      	addlt	r4, r4, r3
 8006d02:	f000 fe6d 	bl	80079e0 <__malloc_lock>
 8006d06:	4a1e      	ldr	r2, [pc, #120]	; (8006d80 <_free_r+0x94>)
 8006d08:	9801      	ldr	r0, [sp, #4]
 8006d0a:	6813      	ldr	r3, [r2, #0]
 8006d0c:	b933      	cbnz	r3, 8006d1c <_free_r+0x30>
 8006d0e:	6063      	str	r3, [r4, #4]
 8006d10:	6014      	str	r4, [r2, #0]
 8006d12:	b003      	add	sp, #12
 8006d14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d18:	f000 be68 	b.w	80079ec <__malloc_unlock>
 8006d1c:	42a3      	cmp	r3, r4
 8006d1e:	d908      	bls.n	8006d32 <_free_r+0x46>
 8006d20:	6825      	ldr	r5, [r4, #0]
 8006d22:	1961      	adds	r1, r4, r5
 8006d24:	428b      	cmp	r3, r1
 8006d26:	bf01      	itttt	eq
 8006d28:	6819      	ldreq	r1, [r3, #0]
 8006d2a:	685b      	ldreq	r3, [r3, #4]
 8006d2c:	1949      	addeq	r1, r1, r5
 8006d2e:	6021      	streq	r1, [r4, #0]
 8006d30:	e7ed      	b.n	8006d0e <_free_r+0x22>
 8006d32:	461a      	mov	r2, r3
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	b10b      	cbz	r3, 8006d3c <_free_r+0x50>
 8006d38:	42a3      	cmp	r3, r4
 8006d3a:	d9fa      	bls.n	8006d32 <_free_r+0x46>
 8006d3c:	6811      	ldr	r1, [r2, #0]
 8006d3e:	1855      	adds	r5, r2, r1
 8006d40:	42a5      	cmp	r5, r4
 8006d42:	d10b      	bne.n	8006d5c <_free_r+0x70>
 8006d44:	6824      	ldr	r4, [r4, #0]
 8006d46:	4421      	add	r1, r4
 8006d48:	1854      	adds	r4, r2, r1
 8006d4a:	42a3      	cmp	r3, r4
 8006d4c:	6011      	str	r1, [r2, #0]
 8006d4e:	d1e0      	bne.n	8006d12 <_free_r+0x26>
 8006d50:	681c      	ldr	r4, [r3, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	6053      	str	r3, [r2, #4]
 8006d56:	4421      	add	r1, r4
 8006d58:	6011      	str	r1, [r2, #0]
 8006d5a:	e7da      	b.n	8006d12 <_free_r+0x26>
 8006d5c:	d902      	bls.n	8006d64 <_free_r+0x78>
 8006d5e:	230c      	movs	r3, #12
 8006d60:	6003      	str	r3, [r0, #0]
 8006d62:	e7d6      	b.n	8006d12 <_free_r+0x26>
 8006d64:	6825      	ldr	r5, [r4, #0]
 8006d66:	1961      	adds	r1, r4, r5
 8006d68:	428b      	cmp	r3, r1
 8006d6a:	bf04      	itt	eq
 8006d6c:	6819      	ldreq	r1, [r3, #0]
 8006d6e:	685b      	ldreq	r3, [r3, #4]
 8006d70:	6063      	str	r3, [r4, #4]
 8006d72:	bf04      	itt	eq
 8006d74:	1949      	addeq	r1, r1, r5
 8006d76:	6021      	streq	r1, [r4, #0]
 8006d78:	6054      	str	r4, [r2, #4]
 8006d7a:	e7ca      	b.n	8006d12 <_free_r+0x26>
 8006d7c:	b003      	add	sp, #12
 8006d7e:	bd30      	pop	{r4, r5, pc}
 8006d80:	20000244 	.word	0x20000244

08006d84 <sbrk_aligned>:
 8006d84:	b570      	push	{r4, r5, r6, lr}
 8006d86:	4e0e      	ldr	r6, [pc, #56]	; (8006dc0 <sbrk_aligned+0x3c>)
 8006d88:	460c      	mov	r4, r1
 8006d8a:	6831      	ldr	r1, [r6, #0]
 8006d8c:	4605      	mov	r5, r0
 8006d8e:	b911      	cbnz	r1, 8006d96 <sbrk_aligned+0x12>
 8006d90:	f000 fb4a 	bl	8007428 <_sbrk_r>
 8006d94:	6030      	str	r0, [r6, #0]
 8006d96:	4621      	mov	r1, r4
 8006d98:	4628      	mov	r0, r5
 8006d9a:	f000 fb45 	bl	8007428 <_sbrk_r>
 8006d9e:	1c43      	adds	r3, r0, #1
 8006da0:	d00a      	beq.n	8006db8 <sbrk_aligned+0x34>
 8006da2:	1cc4      	adds	r4, r0, #3
 8006da4:	f024 0403 	bic.w	r4, r4, #3
 8006da8:	42a0      	cmp	r0, r4
 8006daa:	d007      	beq.n	8006dbc <sbrk_aligned+0x38>
 8006dac:	1a21      	subs	r1, r4, r0
 8006dae:	4628      	mov	r0, r5
 8006db0:	f000 fb3a 	bl	8007428 <_sbrk_r>
 8006db4:	3001      	adds	r0, #1
 8006db6:	d101      	bne.n	8006dbc <sbrk_aligned+0x38>
 8006db8:	f04f 34ff 	mov.w	r4, #4294967295
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
 8006dc0:	20000248 	.word	0x20000248

08006dc4 <_malloc_r>:
 8006dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc8:	1ccd      	adds	r5, r1, #3
 8006dca:	f025 0503 	bic.w	r5, r5, #3
 8006dce:	3508      	adds	r5, #8
 8006dd0:	2d0c      	cmp	r5, #12
 8006dd2:	bf38      	it	cc
 8006dd4:	250c      	movcc	r5, #12
 8006dd6:	2d00      	cmp	r5, #0
 8006dd8:	4607      	mov	r7, r0
 8006dda:	db01      	blt.n	8006de0 <_malloc_r+0x1c>
 8006ddc:	42a9      	cmp	r1, r5
 8006dde:	d905      	bls.n	8006dec <_malloc_r+0x28>
 8006de0:	230c      	movs	r3, #12
 8006de2:	603b      	str	r3, [r7, #0]
 8006de4:	2600      	movs	r6, #0
 8006de6:	4630      	mov	r0, r6
 8006de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dec:	4e2e      	ldr	r6, [pc, #184]	; (8006ea8 <_malloc_r+0xe4>)
 8006dee:	f000 fdf7 	bl	80079e0 <__malloc_lock>
 8006df2:	6833      	ldr	r3, [r6, #0]
 8006df4:	461c      	mov	r4, r3
 8006df6:	bb34      	cbnz	r4, 8006e46 <_malloc_r+0x82>
 8006df8:	4629      	mov	r1, r5
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	f7ff ffc2 	bl	8006d84 <sbrk_aligned>
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	4604      	mov	r4, r0
 8006e04:	d14d      	bne.n	8006ea2 <_malloc_r+0xde>
 8006e06:	6834      	ldr	r4, [r6, #0]
 8006e08:	4626      	mov	r6, r4
 8006e0a:	2e00      	cmp	r6, #0
 8006e0c:	d140      	bne.n	8006e90 <_malloc_r+0xcc>
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	4631      	mov	r1, r6
 8006e12:	4638      	mov	r0, r7
 8006e14:	eb04 0803 	add.w	r8, r4, r3
 8006e18:	f000 fb06 	bl	8007428 <_sbrk_r>
 8006e1c:	4580      	cmp	r8, r0
 8006e1e:	d13a      	bne.n	8006e96 <_malloc_r+0xd2>
 8006e20:	6821      	ldr	r1, [r4, #0]
 8006e22:	3503      	adds	r5, #3
 8006e24:	1a6d      	subs	r5, r5, r1
 8006e26:	f025 0503 	bic.w	r5, r5, #3
 8006e2a:	3508      	adds	r5, #8
 8006e2c:	2d0c      	cmp	r5, #12
 8006e2e:	bf38      	it	cc
 8006e30:	250c      	movcc	r5, #12
 8006e32:	4629      	mov	r1, r5
 8006e34:	4638      	mov	r0, r7
 8006e36:	f7ff ffa5 	bl	8006d84 <sbrk_aligned>
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	d02b      	beq.n	8006e96 <_malloc_r+0xd2>
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	442b      	add	r3, r5
 8006e42:	6023      	str	r3, [r4, #0]
 8006e44:	e00e      	b.n	8006e64 <_malloc_r+0xa0>
 8006e46:	6822      	ldr	r2, [r4, #0]
 8006e48:	1b52      	subs	r2, r2, r5
 8006e4a:	d41e      	bmi.n	8006e8a <_malloc_r+0xc6>
 8006e4c:	2a0b      	cmp	r2, #11
 8006e4e:	d916      	bls.n	8006e7e <_malloc_r+0xba>
 8006e50:	1961      	adds	r1, r4, r5
 8006e52:	42a3      	cmp	r3, r4
 8006e54:	6025      	str	r5, [r4, #0]
 8006e56:	bf18      	it	ne
 8006e58:	6059      	strne	r1, [r3, #4]
 8006e5a:	6863      	ldr	r3, [r4, #4]
 8006e5c:	bf08      	it	eq
 8006e5e:	6031      	streq	r1, [r6, #0]
 8006e60:	5162      	str	r2, [r4, r5]
 8006e62:	604b      	str	r3, [r1, #4]
 8006e64:	4638      	mov	r0, r7
 8006e66:	f104 060b 	add.w	r6, r4, #11
 8006e6a:	f000 fdbf 	bl	80079ec <__malloc_unlock>
 8006e6e:	f026 0607 	bic.w	r6, r6, #7
 8006e72:	1d23      	adds	r3, r4, #4
 8006e74:	1af2      	subs	r2, r6, r3
 8006e76:	d0b6      	beq.n	8006de6 <_malloc_r+0x22>
 8006e78:	1b9b      	subs	r3, r3, r6
 8006e7a:	50a3      	str	r3, [r4, r2]
 8006e7c:	e7b3      	b.n	8006de6 <_malloc_r+0x22>
 8006e7e:	6862      	ldr	r2, [r4, #4]
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	bf0c      	ite	eq
 8006e84:	6032      	streq	r2, [r6, #0]
 8006e86:	605a      	strne	r2, [r3, #4]
 8006e88:	e7ec      	b.n	8006e64 <_malloc_r+0xa0>
 8006e8a:	4623      	mov	r3, r4
 8006e8c:	6864      	ldr	r4, [r4, #4]
 8006e8e:	e7b2      	b.n	8006df6 <_malloc_r+0x32>
 8006e90:	4634      	mov	r4, r6
 8006e92:	6876      	ldr	r6, [r6, #4]
 8006e94:	e7b9      	b.n	8006e0a <_malloc_r+0x46>
 8006e96:	230c      	movs	r3, #12
 8006e98:	603b      	str	r3, [r7, #0]
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	f000 fda6 	bl	80079ec <__malloc_unlock>
 8006ea0:	e7a1      	b.n	8006de6 <_malloc_r+0x22>
 8006ea2:	6025      	str	r5, [r4, #0]
 8006ea4:	e7de      	b.n	8006e64 <_malloc_r+0xa0>
 8006ea6:	bf00      	nop
 8006ea8:	20000244 	.word	0x20000244

08006eac <__ssputs_r>:
 8006eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb0:	688e      	ldr	r6, [r1, #8]
 8006eb2:	429e      	cmp	r6, r3
 8006eb4:	4682      	mov	sl, r0
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	4690      	mov	r8, r2
 8006eba:	461f      	mov	r7, r3
 8006ebc:	d838      	bhi.n	8006f30 <__ssputs_r+0x84>
 8006ebe:	898a      	ldrh	r2, [r1, #12]
 8006ec0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ec4:	d032      	beq.n	8006f2c <__ssputs_r+0x80>
 8006ec6:	6825      	ldr	r5, [r4, #0]
 8006ec8:	6909      	ldr	r1, [r1, #16]
 8006eca:	eba5 0901 	sub.w	r9, r5, r1
 8006ece:	6965      	ldr	r5, [r4, #20]
 8006ed0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ed4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ed8:	3301      	adds	r3, #1
 8006eda:	444b      	add	r3, r9
 8006edc:	106d      	asrs	r5, r5, #1
 8006ede:	429d      	cmp	r5, r3
 8006ee0:	bf38      	it	cc
 8006ee2:	461d      	movcc	r5, r3
 8006ee4:	0553      	lsls	r3, r2, #21
 8006ee6:	d531      	bpl.n	8006f4c <__ssputs_r+0xa0>
 8006ee8:	4629      	mov	r1, r5
 8006eea:	f7ff ff6b 	bl	8006dc4 <_malloc_r>
 8006eee:	4606      	mov	r6, r0
 8006ef0:	b950      	cbnz	r0, 8006f08 <__ssputs_r+0x5c>
 8006ef2:	230c      	movs	r3, #12
 8006ef4:	f8ca 3000 	str.w	r3, [sl]
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006efe:	81a3      	strh	r3, [r4, #12]
 8006f00:	f04f 30ff 	mov.w	r0, #4294967295
 8006f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f08:	6921      	ldr	r1, [r4, #16]
 8006f0a:	464a      	mov	r2, r9
 8006f0c:	f7ff fa08 	bl	8006320 <memcpy>
 8006f10:	89a3      	ldrh	r3, [r4, #12]
 8006f12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f1a:	81a3      	strh	r3, [r4, #12]
 8006f1c:	6126      	str	r6, [r4, #16]
 8006f1e:	6165      	str	r5, [r4, #20]
 8006f20:	444e      	add	r6, r9
 8006f22:	eba5 0509 	sub.w	r5, r5, r9
 8006f26:	6026      	str	r6, [r4, #0]
 8006f28:	60a5      	str	r5, [r4, #8]
 8006f2a:	463e      	mov	r6, r7
 8006f2c:	42be      	cmp	r6, r7
 8006f2e:	d900      	bls.n	8006f32 <__ssputs_r+0x86>
 8006f30:	463e      	mov	r6, r7
 8006f32:	6820      	ldr	r0, [r4, #0]
 8006f34:	4632      	mov	r2, r6
 8006f36:	4641      	mov	r1, r8
 8006f38:	f000 fd38 	bl	80079ac <memmove>
 8006f3c:	68a3      	ldr	r3, [r4, #8]
 8006f3e:	1b9b      	subs	r3, r3, r6
 8006f40:	60a3      	str	r3, [r4, #8]
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	4433      	add	r3, r6
 8006f46:	6023      	str	r3, [r4, #0]
 8006f48:	2000      	movs	r0, #0
 8006f4a:	e7db      	b.n	8006f04 <__ssputs_r+0x58>
 8006f4c:	462a      	mov	r2, r5
 8006f4e:	f000 fd53 	bl	80079f8 <_realloc_r>
 8006f52:	4606      	mov	r6, r0
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d1e1      	bne.n	8006f1c <__ssputs_r+0x70>
 8006f58:	6921      	ldr	r1, [r4, #16]
 8006f5a:	4650      	mov	r0, sl
 8006f5c:	f7ff fec6 	bl	8006cec <_free_r>
 8006f60:	e7c7      	b.n	8006ef2 <__ssputs_r+0x46>
	...

08006f64 <_svfiprintf_r>:
 8006f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f68:	4698      	mov	r8, r3
 8006f6a:	898b      	ldrh	r3, [r1, #12]
 8006f6c:	061b      	lsls	r3, r3, #24
 8006f6e:	b09d      	sub	sp, #116	; 0x74
 8006f70:	4607      	mov	r7, r0
 8006f72:	460d      	mov	r5, r1
 8006f74:	4614      	mov	r4, r2
 8006f76:	d50e      	bpl.n	8006f96 <_svfiprintf_r+0x32>
 8006f78:	690b      	ldr	r3, [r1, #16]
 8006f7a:	b963      	cbnz	r3, 8006f96 <_svfiprintf_r+0x32>
 8006f7c:	2140      	movs	r1, #64	; 0x40
 8006f7e:	f7ff ff21 	bl	8006dc4 <_malloc_r>
 8006f82:	6028      	str	r0, [r5, #0]
 8006f84:	6128      	str	r0, [r5, #16]
 8006f86:	b920      	cbnz	r0, 8006f92 <_svfiprintf_r+0x2e>
 8006f88:	230c      	movs	r3, #12
 8006f8a:	603b      	str	r3, [r7, #0]
 8006f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f90:	e0d1      	b.n	8007136 <_svfiprintf_r+0x1d2>
 8006f92:	2340      	movs	r3, #64	; 0x40
 8006f94:	616b      	str	r3, [r5, #20]
 8006f96:	2300      	movs	r3, #0
 8006f98:	9309      	str	r3, [sp, #36]	; 0x24
 8006f9a:	2320      	movs	r3, #32
 8006f9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fa4:	2330      	movs	r3, #48	; 0x30
 8006fa6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007150 <_svfiprintf_r+0x1ec>
 8006faa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fae:	f04f 0901 	mov.w	r9, #1
 8006fb2:	4623      	mov	r3, r4
 8006fb4:	469a      	mov	sl, r3
 8006fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fba:	b10a      	cbz	r2, 8006fc0 <_svfiprintf_r+0x5c>
 8006fbc:	2a25      	cmp	r2, #37	; 0x25
 8006fbe:	d1f9      	bne.n	8006fb4 <_svfiprintf_r+0x50>
 8006fc0:	ebba 0b04 	subs.w	fp, sl, r4
 8006fc4:	d00b      	beq.n	8006fde <_svfiprintf_r+0x7a>
 8006fc6:	465b      	mov	r3, fp
 8006fc8:	4622      	mov	r2, r4
 8006fca:	4629      	mov	r1, r5
 8006fcc:	4638      	mov	r0, r7
 8006fce:	f7ff ff6d 	bl	8006eac <__ssputs_r>
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	f000 80aa 	beq.w	800712c <_svfiprintf_r+0x1c8>
 8006fd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fda:	445a      	add	r2, fp
 8006fdc:	9209      	str	r2, [sp, #36]	; 0x24
 8006fde:	f89a 3000 	ldrb.w	r3, [sl]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 80a2 	beq.w	800712c <_svfiprintf_r+0x1c8>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f04f 32ff 	mov.w	r2, #4294967295
 8006fee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ff2:	f10a 0a01 	add.w	sl, sl, #1
 8006ff6:	9304      	str	r3, [sp, #16]
 8006ff8:	9307      	str	r3, [sp, #28]
 8006ffa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ffe:	931a      	str	r3, [sp, #104]	; 0x68
 8007000:	4654      	mov	r4, sl
 8007002:	2205      	movs	r2, #5
 8007004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007008:	4851      	ldr	r0, [pc, #324]	; (8007150 <_svfiprintf_r+0x1ec>)
 800700a:	f7f9 f8e9 	bl	80001e0 <memchr>
 800700e:	9a04      	ldr	r2, [sp, #16]
 8007010:	b9d8      	cbnz	r0, 800704a <_svfiprintf_r+0xe6>
 8007012:	06d0      	lsls	r0, r2, #27
 8007014:	bf44      	itt	mi
 8007016:	2320      	movmi	r3, #32
 8007018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800701c:	0711      	lsls	r1, r2, #28
 800701e:	bf44      	itt	mi
 8007020:	232b      	movmi	r3, #43	; 0x2b
 8007022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007026:	f89a 3000 	ldrb.w	r3, [sl]
 800702a:	2b2a      	cmp	r3, #42	; 0x2a
 800702c:	d015      	beq.n	800705a <_svfiprintf_r+0xf6>
 800702e:	9a07      	ldr	r2, [sp, #28]
 8007030:	4654      	mov	r4, sl
 8007032:	2000      	movs	r0, #0
 8007034:	f04f 0c0a 	mov.w	ip, #10
 8007038:	4621      	mov	r1, r4
 800703a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800703e:	3b30      	subs	r3, #48	; 0x30
 8007040:	2b09      	cmp	r3, #9
 8007042:	d94e      	bls.n	80070e2 <_svfiprintf_r+0x17e>
 8007044:	b1b0      	cbz	r0, 8007074 <_svfiprintf_r+0x110>
 8007046:	9207      	str	r2, [sp, #28]
 8007048:	e014      	b.n	8007074 <_svfiprintf_r+0x110>
 800704a:	eba0 0308 	sub.w	r3, r0, r8
 800704e:	fa09 f303 	lsl.w	r3, r9, r3
 8007052:	4313      	orrs	r3, r2
 8007054:	9304      	str	r3, [sp, #16]
 8007056:	46a2      	mov	sl, r4
 8007058:	e7d2      	b.n	8007000 <_svfiprintf_r+0x9c>
 800705a:	9b03      	ldr	r3, [sp, #12]
 800705c:	1d19      	adds	r1, r3, #4
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	9103      	str	r1, [sp, #12]
 8007062:	2b00      	cmp	r3, #0
 8007064:	bfbb      	ittet	lt
 8007066:	425b      	neglt	r3, r3
 8007068:	f042 0202 	orrlt.w	r2, r2, #2
 800706c:	9307      	strge	r3, [sp, #28]
 800706e:	9307      	strlt	r3, [sp, #28]
 8007070:	bfb8      	it	lt
 8007072:	9204      	strlt	r2, [sp, #16]
 8007074:	7823      	ldrb	r3, [r4, #0]
 8007076:	2b2e      	cmp	r3, #46	; 0x2e
 8007078:	d10c      	bne.n	8007094 <_svfiprintf_r+0x130>
 800707a:	7863      	ldrb	r3, [r4, #1]
 800707c:	2b2a      	cmp	r3, #42	; 0x2a
 800707e:	d135      	bne.n	80070ec <_svfiprintf_r+0x188>
 8007080:	9b03      	ldr	r3, [sp, #12]
 8007082:	1d1a      	adds	r2, r3, #4
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	9203      	str	r2, [sp, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	bfb8      	it	lt
 800708c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007090:	3402      	adds	r4, #2
 8007092:	9305      	str	r3, [sp, #20]
 8007094:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007160 <_svfiprintf_r+0x1fc>
 8007098:	7821      	ldrb	r1, [r4, #0]
 800709a:	2203      	movs	r2, #3
 800709c:	4650      	mov	r0, sl
 800709e:	f7f9 f89f 	bl	80001e0 <memchr>
 80070a2:	b140      	cbz	r0, 80070b6 <_svfiprintf_r+0x152>
 80070a4:	2340      	movs	r3, #64	; 0x40
 80070a6:	eba0 000a 	sub.w	r0, r0, sl
 80070aa:	fa03 f000 	lsl.w	r0, r3, r0
 80070ae:	9b04      	ldr	r3, [sp, #16]
 80070b0:	4303      	orrs	r3, r0
 80070b2:	3401      	adds	r4, #1
 80070b4:	9304      	str	r3, [sp, #16]
 80070b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070ba:	4826      	ldr	r0, [pc, #152]	; (8007154 <_svfiprintf_r+0x1f0>)
 80070bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070c0:	2206      	movs	r2, #6
 80070c2:	f7f9 f88d 	bl	80001e0 <memchr>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d038      	beq.n	800713c <_svfiprintf_r+0x1d8>
 80070ca:	4b23      	ldr	r3, [pc, #140]	; (8007158 <_svfiprintf_r+0x1f4>)
 80070cc:	bb1b      	cbnz	r3, 8007116 <_svfiprintf_r+0x1b2>
 80070ce:	9b03      	ldr	r3, [sp, #12]
 80070d0:	3307      	adds	r3, #7
 80070d2:	f023 0307 	bic.w	r3, r3, #7
 80070d6:	3308      	adds	r3, #8
 80070d8:	9303      	str	r3, [sp, #12]
 80070da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070dc:	4433      	add	r3, r6
 80070de:	9309      	str	r3, [sp, #36]	; 0x24
 80070e0:	e767      	b.n	8006fb2 <_svfiprintf_r+0x4e>
 80070e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80070e6:	460c      	mov	r4, r1
 80070e8:	2001      	movs	r0, #1
 80070ea:	e7a5      	b.n	8007038 <_svfiprintf_r+0xd4>
 80070ec:	2300      	movs	r3, #0
 80070ee:	3401      	adds	r4, #1
 80070f0:	9305      	str	r3, [sp, #20]
 80070f2:	4619      	mov	r1, r3
 80070f4:	f04f 0c0a 	mov.w	ip, #10
 80070f8:	4620      	mov	r0, r4
 80070fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070fe:	3a30      	subs	r2, #48	; 0x30
 8007100:	2a09      	cmp	r2, #9
 8007102:	d903      	bls.n	800710c <_svfiprintf_r+0x1a8>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0c5      	beq.n	8007094 <_svfiprintf_r+0x130>
 8007108:	9105      	str	r1, [sp, #20]
 800710a:	e7c3      	b.n	8007094 <_svfiprintf_r+0x130>
 800710c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007110:	4604      	mov	r4, r0
 8007112:	2301      	movs	r3, #1
 8007114:	e7f0      	b.n	80070f8 <_svfiprintf_r+0x194>
 8007116:	ab03      	add	r3, sp, #12
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	462a      	mov	r2, r5
 800711c:	4b0f      	ldr	r3, [pc, #60]	; (800715c <_svfiprintf_r+0x1f8>)
 800711e:	a904      	add	r1, sp, #16
 8007120:	4638      	mov	r0, r7
 8007122:	f7fc f94f 	bl	80033c4 <_printf_float>
 8007126:	1c42      	adds	r2, r0, #1
 8007128:	4606      	mov	r6, r0
 800712a:	d1d6      	bne.n	80070da <_svfiprintf_r+0x176>
 800712c:	89ab      	ldrh	r3, [r5, #12]
 800712e:	065b      	lsls	r3, r3, #25
 8007130:	f53f af2c 	bmi.w	8006f8c <_svfiprintf_r+0x28>
 8007134:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007136:	b01d      	add	sp, #116	; 0x74
 8007138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800713c:	ab03      	add	r3, sp, #12
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	462a      	mov	r2, r5
 8007142:	4b06      	ldr	r3, [pc, #24]	; (800715c <_svfiprintf_r+0x1f8>)
 8007144:	a904      	add	r1, sp, #16
 8007146:	4638      	mov	r0, r7
 8007148:	f7fc fbe0 	bl	800390c <_printf_i>
 800714c:	e7eb      	b.n	8007126 <_svfiprintf_r+0x1c2>
 800714e:	bf00      	nop
 8007150:	0800806c 	.word	0x0800806c
 8007154:	08008076 	.word	0x08008076
 8007158:	080033c5 	.word	0x080033c5
 800715c:	08006ead 	.word	0x08006ead
 8007160:	08008072 	.word	0x08008072

08007164 <__sfputc_r>:
 8007164:	6893      	ldr	r3, [r2, #8]
 8007166:	3b01      	subs	r3, #1
 8007168:	2b00      	cmp	r3, #0
 800716a:	b410      	push	{r4}
 800716c:	6093      	str	r3, [r2, #8]
 800716e:	da08      	bge.n	8007182 <__sfputc_r+0x1e>
 8007170:	6994      	ldr	r4, [r2, #24]
 8007172:	42a3      	cmp	r3, r4
 8007174:	db01      	blt.n	800717a <__sfputc_r+0x16>
 8007176:	290a      	cmp	r1, #10
 8007178:	d103      	bne.n	8007182 <__sfputc_r+0x1e>
 800717a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800717e:	f000 b9bb 	b.w	80074f8 <__swbuf_r>
 8007182:	6813      	ldr	r3, [r2, #0]
 8007184:	1c58      	adds	r0, r3, #1
 8007186:	6010      	str	r0, [r2, #0]
 8007188:	7019      	strb	r1, [r3, #0]
 800718a:	4608      	mov	r0, r1
 800718c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007190:	4770      	bx	lr

08007192 <__sfputs_r>:
 8007192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007194:	4606      	mov	r6, r0
 8007196:	460f      	mov	r7, r1
 8007198:	4614      	mov	r4, r2
 800719a:	18d5      	adds	r5, r2, r3
 800719c:	42ac      	cmp	r4, r5
 800719e:	d101      	bne.n	80071a4 <__sfputs_r+0x12>
 80071a0:	2000      	movs	r0, #0
 80071a2:	e007      	b.n	80071b4 <__sfputs_r+0x22>
 80071a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071a8:	463a      	mov	r2, r7
 80071aa:	4630      	mov	r0, r6
 80071ac:	f7ff ffda 	bl	8007164 <__sfputc_r>
 80071b0:	1c43      	adds	r3, r0, #1
 80071b2:	d1f3      	bne.n	800719c <__sfputs_r+0xa>
 80071b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071b8 <_vfiprintf_r>:
 80071b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	460d      	mov	r5, r1
 80071be:	b09d      	sub	sp, #116	; 0x74
 80071c0:	4614      	mov	r4, r2
 80071c2:	4698      	mov	r8, r3
 80071c4:	4606      	mov	r6, r0
 80071c6:	b118      	cbz	r0, 80071d0 <_vfiprintf_r+0x18>
 80071c8:	6983      	ldr	r3, [r0, #24]
 80071ca:	b90b      	cbnz	r3, 80071d0 <_vfiprintf_r+0x18>
 80071cc:	f7fe fc7a 	bl	8005ac4 <__sinit>
 80071d0:	4b89      	ldr	r3, [pc, #548]	; (80073f8 <_vfiprintf_r+0x240>)
 80071d2:	429d      	cmp	r5, r3
 80071d4:	d11b      	bne.n	800720e <_vfiprintf_r+0x56>
 80071d6:	6875      	ldr	r5, [r6, #4]
 80071d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071da:	07d9      	lsls	r1, r3, #31
 80071dc:	d405      	bmi.n	80071ea <_vfiprintf_r+0x32>
 80071de:	89ab      	ldrh	r3, [r5, #12]
 80071e0:	059a      	lsls	r2, r3, #22
 80071e2:	d402      	bmi.n	80071ea <_vfiprintf_r+0x32>
 80071e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071e6:	f7ff f87e 	bl	80062e6 <__retarget_lock_acquire_recursive>
 80071ea:	89ab      	ldrh	r3, [r5, #12]
 80071ec:	071b      	lsls	r3, r3, #28
 80071ee:	d501      	bpl.n	80071f4 <_vfiprintf_r+0x3c>
 80071f0:	692b      	ldr	r3, [r5, #16]
 80071f2:	b9eb      	cbnz	r3, 8007230 <_vfiprintf_r+0x78>
 80071f4:	4629      	mov	r1, r5
 80071f6:	4630      	mov	r0, r6
 80071f8:	f000 f9f0 	bl	80075dc <__swsetup_r>
 80071fc:	b1c0      	cbz	r0, 8007230 <_vfiprintf_r+0x78>
 80071fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007200:	07dc      	lsls	r4, r3, #31
 8007202:	d50e      	bpl.n	8007222 <_vfiprintf_r+0x6a>
 8007204:	f04f 30ff 	mov.w	r0, #4294967295
 8007208:	b01d      	add	sp, #116	; 0x74
 800720a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720e:	4b7b      	ldr	r3, [pc, #492]	; (80073fc <_vfiprintf_r+0x244>)
 8007210:	429d      	cmp	r5, r3
 8007212:	d101      	bne.n	8007218 <_vfiprintf_r+0x60>
 8007214:	68b5      	ldr	r5, [r6, #8]
 8007216:	e7df      	b.n	80071d8 <_vfiprintf_r+0x20>
 8007218:	4b79      	ldr	r3, [pc, #484]	; (8007400 <_vfiprintf_r+0x248>)
 800721a:	429d      	cmp	r5, r3
 800721c:	bf08      	it	eq
 800721e:	68f5      	ldreq	r5, [r6, #12]
 8007220:	e7da      	b.n	80071d8 <_vfiprintf_r+0x20>
 8007222:	89ab      	ldrh	r3, [r5, #12]
 8007224:	0598      	lsls	r0, r3, #22
 8007226:	d4ed      	bmi.n	8007204 <_vfiprintf_r+0x4c>
 8007228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800722a:	f7ff f85d 	bl	80062e8 <__retarget_lock_release_recursive>
 800722e:	e7e9      	b.n	8007204 <_vfiprintf_r+0x4c>
 8007230:	2300      	movs	r3, #0
 8007232:	9309      	str	r3, [sp, #36]	; 0x24
 8007234:	2320      	movs	r3, #32
 8007236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800723a:	f8cd 800c 	str.w	r8, [sp, #12]
 800723e:	2330      	movs	r3, #48	; 0x30
 8007240:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007404 <_vfiprintf_r+0x24c>
 8007244:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007248:	f04f 0901 	mov.w	r9, #1
 800724c:	4623      	mov	r3, r4
 800724e:	469a      	mov	sl, r3
 8007250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007254:	b10a      	cbz	r2, 800725a <_vfiprintf_r+0xa2>
 8007256:	2a25      	cmp	r2, #37	; 0x25
 8007258:	d1f9      	bne.n	800724e <_vfiprintf_r+0x96>
 800725a:	ebba 0b04 	subs.w	fp, sl, r4
 800725e:	d00b      	beq.n	8007278 <_vfiprintf_r+0xc0>
 8007260:	465b      	mov	r3, fp
 8007262:	4622      	mov	r2, r4
 8007264:	4629      	mov	r1, r5
 8007266:	4630      	mov	r0, r6
 8007268:	f7ff ff93 	bl	8007192 <__sfputs_r>
 800726c:	3001      	adds	r0, #1
 800726e:	f000 80aa 	beq.w	80073c6 <_vfiprintf_r+0x20e>
 8007272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007274:	445a      	add	r2, fp
 8007276:	9209      	str	r2, [sp, #36]	; 0x24
 8007278:	f89a 3000 	ldrb.w	r3, [sl]
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 80a2 	beq.w	80073c6 <_vfiprintf_r+0x20e>
 8007282:	2300      	movs	r3, #0
 8007284:	f04f 32ff 	mov.w	r2, #4294967295
 8007288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800728c:	f10a 0a01 	add.w	sl, sl, #1
 8007290:	9304      	str	r3, [sp, #16]
 8007292:	9307      	str	r3, [sp, #28]
 8007294:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007298:	931a      	str	r3, [sp, #104]	; 0x68
 800729a:	4654      	mov	r4, sl
 800729c:	2205      	movs	r2, #5
 800729e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a2:	4858      	ldr	r0, [pc, #352]	; (8007404 <_vfiprintf_r+0x24c>)
 80072a4:	f7f8 ff9c 	bl	80001e0 <memchr>
 80072a8:	9a04      	ldr	r2, [sp, #16]
 80072aa:	b9d8      	cbnz	r0, 80072e4 <_vfiprintf_r+0x12c>
 80072ac:	06d1      	lsls	r1, r2, #27
 80072ae:	bf44      	itt	mi
 80072b0:	2320      	movmi	r3, #32
 80072b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072b6:	0713      	lsls	r3, r2, #28
 80072b8:	bf44      	itt	mi
 80072ba:	232b      	movmi	r3, #43	; 0x2b
 80072bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072c0:	f89a 3000 	ldrb.w	r3, [sl]
 80072c4:	2b2a      	cmp	r3, #42	; 0x2a
 80072c6:	d015      	beq.n	80072f4 <_vfiprintf_r+0x13c>
 80072c8:	9a07      	ldr	r2, [sp, #28]
 80072ca:	4654      	mov	r4, sl
 80072cc:	2000      	movs	r0, #0
 80072ce:	f04f 0c0a 	mov.w	ip, #10
 80072d2:	4621      	mov	r1, r4
 80072d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072d8:	3b30      	subs	r3, #48	; 0x30
 80072da:	2b09      	cmp	r3, #9
 80072dc:	d94e      	bls.n	800737c <_vfiprintf_r+0x1c4>
 80072de:	b1b0      	cbz	r0, 800730e <_vfiprintf_r+0x156>
 80072e0:	9207      	str	r2, [sp, #28]
 80072e2:	e014      	b.n	800730e <_vfiprintf_r+0x156>
 80072e4:	eba0 0308 	sub.w	r3, r0, r8
 80072e8:	fa09 f303 	lsl.w	r3, r9, r3
 80072ec:	4313      	orrs	r3, r2
 80072ee:	9304      	str	r3, [sp, #16]
 80072f0:	46a2      	mov	sl, r4
 80072f2:	e7d2      	b.n	800729a <_vfiprintf_r+0xe2>
 80072f4:	9b03      	ldr	r3, [sp, #12]
 80072f6:	1d19      	adds	r1, r3, #4
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	9103      	str	r1, [sp, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	bfbb      	ittet	lt
 8007300:	425b      	neglt	r3, r3
 8007302:	f042 0202 	orrlt.w	r2, r2, #2
 8007306:	9307      	strge	r3, [sp, #28]
 8007308:	9307      	strlt	r3, [sp, #28]
 800730a:	bfb8      	it	lt
 800730c:	9204      	strlt	r2, [sp, #16]
 800730e:	7823      	ldrb	r3, [r4, #0]
 8007310:	2b2e      	cmp	r3, #46	; 0x2e
 8007312:	d10c      	bne.n	800732e <_vfiprintf_r+0x176>
 8007314:	7863      	ldrb	r3, [r4, #1]
 8007316:	2b2a      	cmp	r3, #42	; 0x2a
 8007318:	d135      	bne.n	8007386 <_vfiprintf_r+0x1ce>
 800731a:	9b03      	ldr	r3, [sp, #12]
 800731c:	1d1a      	adds	r2, r3, #4
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	9203      	str	r2, [sp, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	bfb8      	it	lt
 8007326:	f04f 33ff 	movlt.w	r3, #4294967295
 800732a:	3402      	adds	r4, #2
 800732c:	9305      	str	r3, [sp, #20]
 800732e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007414 <_vfiprintf_r+0x25c>
 8007332:	7821      	ldrb	r1, [r4, #0]
 8007334:	2203      	movs	r2, #3
 8007336:	4650      	mov	r0, sl
 8007338:	f7f8 ff52 	bl	80001e0 <memchr>
 800733c:	b140      	cbz	r0, 8007350 <_vfiprintf_r+0x198>
 800733e:	2340      	movs	r3, #64	; 0x40
 8007340:	eba0 000a 	sub.w	r0, r0, sl
 8007344:	fa03 f000 	lsl.w	r0, r3, r0
 8007348:	9b04      	ldr	r3, [sp, #16]
 800734a:	4303      	orrs	r3, r0
 800734c:	3401      	adds	r4, #1
 800734e:	9304      	str	r3, [sp, #16]
 8007350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007354:	482c      	ldr	r0, [pc, #176]	; (8007408 <_vfiprintf_r+0x250>)
 8007356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800735a:	2206      	movs	r2, #6
 800735c:	f7f8 ff40 	bl	80001e0 <memchr>
 8007360:	2800      	cmp	r0, #0
 8007362:	d03f      	beq.n	80073e4 <_vfiprintf_r+0x22c>
 8007364:	4b29      	ldr	r3, [pc, #164]	; (800740c <_vfiprintf_r+0x254>)
 8007366:	bb1b      	cbnz	r3, 80073b0 <_vfiprintf_r+0x1f8>
 8007368:	9b03      	ldr	r3, [sp, #12]
 800736a:	3307      	adds	r3, #7
 800736c:	f023 0307 	bic.w	r3, r3, #7
 8007370:	3308      	adds	r3, #8
 8007372:	9303      	str	r3, [sp, #12]
 8007374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007376:	443b      	add	r3, r7
 8007378:	9309      	str	r3, [sp, #36]	; 0x24
 800737a:	e767      	b.n	800724c <_vfiprintf_r+0x94>
 800737c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007380:	460c      	mov	r4, r1
 8007382:	2001      	movs	r0, #1
 8007384:	e7a5      	b.n	80072d2 <_vfiprintf_r+0x11a>
 8007386:	2300      	movs	r3, #0
 8007388:	3401      	adds	r4, #1
 800738a:	9305      	str	r3, [sp, #20]
 800738c:	4619      	mov	r1, r3
 800738e:	f04f 0c0a 	mov.w	ip, #10
 8007392:	4620      	mov	r0, r4
 8007394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007398:	3a30      	subs	r2, #48	; 0x30
 800739a:	2a09      	cmp	r2, #9
 800739c:	d903      	bls.n	80073a6 <_vfiprintf_r+0x1ee>
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0c5      	beq.n	800732e <_vfiprintf_r+0x176>
 80073a2:	9105      	str	r1, [sp, #20]
 80073a4:	e7c3      	b.n	800732e <_vfiprintf_r+0x176>
 80073a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80073aa:	4604      	mov	r4, r0
 80073ac:	2301      	movs	r3, #1
 80073ae:	e7f0      	b.n	8007392 <_vfiprintf_r+0x1da>
 80073b0:	ab03      	add	r3, sp, #12
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	462a      	mov	r2, r5
 80073b6:	4b16      	ldr	r3, [pc, #88]	; (8007410 <_vfiprintf_r+0x258>)
 80073b8:	a904      	add	r1, sp, #16
 80073ba:	4630      	mov	r0, r6
 80073bc:	f7fc f802 	bl	80033c4 <_printf_float>
 80073c0:	4607      	mov	r7, r0
 80073c2:	1c78      	adds	r0, r7, #1
 80073c4:	d1d6      	bne.n	8007374 <_vfiprintf_r+0x1bc>
 80073c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073c8:	07d9      	lsls	r1, r3, #31
 80073ca:	d405      	bmi.n	80073d8 <_vfiprintf_r+0x220>
 80073cc:	89ab      	ldrh	r3, [r5, #12]
 80073ce:	059a      	lsls	r2, r3, #22
 80073d0:	d402      	bmi.n	80073d8 <_vfiprintf_r+0x220>
 80073d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073d4:	f7fe ff88 	bl	80062e8 <__retarget_lock_release_recursive>
 80073d8:	89ab      	ldrh	r3, [r5, #12]
 80073da:	065b      	lsls	r3, r3, #25
 80073dc:	f53f af12 	bmi.w	8007204 <_vfiprintf_r+0x4c>
 80073e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073e2:	e711      	b.n	8007208 <_vfiprintf_r+0x50>
 80073e4:	ab03      	add	r3, sp, #12
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	462a      	mov	r2, r5
 80073ea:	4b09      	ldr	r3, [pc, #36]	; (8007410 <_vfiprintf_r+0x258>)
 80073ec:	a904      	add	r1, sp, #16
 80073ee:	4630      	mov	r0, r6
 80073f0:	f7fc fa8c 	bl	800390c <_printf_i>
 80073f4:	e7e4      	b.n	80073c0 <_vfiprintf_r+0x208>
 80073f6:	bf00      	nop
 80073f8:	08007e54 	.word	0x08007e54
 80073fc:	08007e74 	.word	0x08007e74
 8007400:	08007e34 	.word	0x08007e34
 8007404:	0800806c 	.word	0x0800806c
 8007408:	08008076 	.word	0x08008076
 800740c:	080033c5 	.word	0x080033c5
 8007410:	08007193 	.word	0x08007193
 8007414:	08008072 	.word	0x08008072

08007418 <nan>:
 8007418:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007420 <nan+0x8>
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	00000000 	.word	0x00000000
 8007424:	7ff80000 	.word	0x7ff80000

08007428 <_sbrk_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4d06      	ldr	r5, [pc, #24]	; (8007444 <_sbrk_r+0x1c>)
 800742c:	2300      	movs	r3, #0
 800742e:	4604      	mov	r4, r0
 8007430:	4608      	mov	r0, r1
 8007432:	602b      	str	r3, [r5, #0]
 8007434:	f7fa fe96 	bl	8002164 <_sbrk>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	d102      	bne.n	8007442 <_sbrk_r+0x1a>
 800743c:	682b      	ldr	r3, [r5, #0]
 800743e:	b103      	cbz	r3, 8007442 <_sbrk_r+0x1a>
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	bd38      	pop	{r3, r4, r5, pc}
 8007444:	2000024c 	.word	0x2000024c

08007448 <__sread>:
 8007448:	b510      	push	{r4, lr}
 800744a:	460c      	mov	r4, r1
 800744c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007450:	f000 fb02 	bl	8007a58 <_read_r>
 8007454:	2800      	cmp	r0, #0
 8007456:	bfab      	itete	ge
 8007458:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800745a:	89a3      	ldrhlt	r3, [r4, #12]
 800745c:	181b      	addge	r3, r3, r0
 800745e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007462:	bfac      	ite	ge
 8007464:	6563      	strge	r3, [r4, #84]	; 0x54
 8007466:	81a3      	strhlt	r3, [r4, #12]
 8007468:	bd10      	pop	{r4, pc}

0800746a <__swrite>:
 800746a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800746e:	461f      	mov	r7, r3
 8007470:	898b      	ldrh	r3, [r1, #12]
 8007472:	05db      	lsls	r3, r3, #23
 8007474:	4605      	mov	r5, r0
 8007476:	460c      	mov	r4, r1
 8007478:	4616      	mov	r6, r2
 800747a:	d505      	bpl.n	8007488 <__swrite+0x1e>
 800747c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007480:	2302      	movs	r3, #2
 8007482:	2200      	movs	r2, #0
 8007484:	f000 fa1a 	bl	80078bc <_lseek_r>
 8007488:	89a3      	ldrh	r3, [r4, #12]
 800748a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800748e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007492:	81a3      	strh	r3, [r4, #12]
 8007494:	4632      	mov	r2, r6
 8007496:	463b      	mov	r3, r7
 8007498:	4628      	mov	r0, r5
 800749a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800749e:	f000 b88b 	b.w	80075b8 <_write_r>

080074a2 <__sseek>:
 80074a2:	b510      	push	{r4, lr}
 80074a4:	460c      	mov	r4, r1
 80074a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074aa:	f000 fa07 	bl	80078bc <_lseek_r>
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	bf15      	itete	ne
 80074b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80074b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074be:	81a3      	strheq	r3, [r4, #12]
 80074c0:	bf18      	it	ne
 80074c2:	81a3      	strhne	r3, [r4, #12]
 80074c4:	bd10      	pop	{r4, pc}

080074c6 <__sclose>:
 80074c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ca:	f000 b913 	b.w	80076f4 <_close_r>

080074ce <strncmp>:
 80074ce:	b510      	push	{r4, lr}
 80074d0:	b17a      	cbz	r2, 80074f2 <strncmp+0x24>
 80074d2:	4603      	mov	r3, r0
 80074d4:	3901      	subs	r1, #1
 80074d6:	1884      	adds	r4, r0, r2
 80074d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80074dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80074e0:	4290      	cmp	r0, r2
 80074e2:	d101      	bne.n	80074e8 <strncmp+0x1a>
 80074e4:	42a3      	cmp	r3, r4
 80074e6:	d101      	bne.n	80074ec <strncmp+0x1e>
 80074e8:	1a80      	subs	r0, r0, r2
 80074ea:	bd10      	pop	{r4, pc}
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d1f3      	bne.n	80074d8 <strncmp+0xa>
 80074f0:	e7fa      	b.n	80074e8 <strncmp+0x1a>
 80074f2:	4610      	mov	r0, r2
 80074f4:	e7f9      	b.n	80074ea <strncmp+0x1c>
	...

080074f8 <__swbuf_r>:
 80074f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fa:	460e      	mov	r6, r1
 80074fc:	4614      	mov	r4, r2
 80074fe:	4605      	mov	r5, r0
 8007500:	b118      	cbz	r0, 800750a <__swbuf_r+0x12>
 8007502:	6983      	ldr	r3, [r0, #24]
 8007504:	b90b      	cbnz	r3, 800750a <__swbuf_r+0x12>
 8007506:	f7fe fadd 	bl	8005ac4 <__sinit>
 800750a:	4b21      	ldr	r3, [pc, #132]	; (8007590 <__swbuf_r+0x98>)
 800750c:	429c      	cmp	r4, r3
 800750e:	d12b      	bne.n	8007568 <__swbuf_r+0x70>
 8007510:	686c      	ldr	r4, [r5, #4]
 8007512:	69a3      	ldr	r3, [r4, #24]
 8007514:	60a3      	str	r3, [r4, #8]
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	071a      	lsls	r2, r3, #28
 800751a:	d52f      	bpl.n	800757c <__swbuf_r+0x84>
 800751c:	6923      	ldr	r3, [r4, #16]
 800751e:	b36b      	cbz	r3, 800757c <__swbuf_r+0x84>
 8007520:	6923      	ldr	r3, [r4, #16]
 8007522:	6820      	ldr	r0, [r4, #0]
 8007524:	1ac0      	subs	r0, r0, r3
 8007526:	6963      	ldr	r3, [r4, #20]
 8007528:	b2f6      	uxtb	r6, r6
 800752a:	4283      	cmp	r3, r0
 800752c:	4637      	mov	r7, r6
 800752e:	dc04      	bgt.n	800753a <__swbuf_r+0x42>
 8007530:	4621      	mov	r1, r4
 8007532:	4628      	mov	r0, r5
 8007534:	f000 f974 	bl	8007820 <_fflush_r>
 8007538:	bb30      	cbnz	r0, 8007588 <__swbuf_r+0x90>
 800753a:	68a3      	ldr	r3, [r4, #8]
 800753c:	3b01      	subs	r3, #1
 800753e:	60a3      	str	r3, [r4, #8]
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	6022      	str	r2, [r4, #0]
 8007546:	701e      	strb	r6, [r3, #0]
 8007548:	6963      	ldr	r3, [r4, #20]
 800754a:	3001      	adds	r0, #1
 800754c:	4283      	cmp	r3, r0
 800754e:	d004      	beq.n	800755a <__swbuf_r+0x62>
 8007550:	89a3      	ldrh	r3, [r4, #12]
 8007552:	07db      	lsls	r3, r3, #31
 8007554:	d506      	bpl.n	8007564 <__swbuf_r+0x6c>
 8007556:	2e0a      	cmp	r6, #10
 8007558:	d104      	bne.n	8007564 <__swbuf_r+0x6c>
 800755a:	4621      	mov	r1, r4
 800755c:	4628      	mov	r0, r5
 800755e:	f000 f95f 	bl	8007820 <_fflush_r>
 8007562:	b988      	cbnz	r0, 8007588 <__swbuf_r+0x90>
 8007564:	4638      	mov	r0, r7
 8007566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007568:	4b0a      	ldr	r3, [pc, #40]	; (8007594 <__swbuf_r+0x9c>)
 800756a:	429c      	cmp	r4, r3
 800756c:	d101      	bne.n	8007572 <__swbuf_r+0x7a>
 800756e:	68ac      	ldr	r4, [r5, #8]
 8007570:	e7cf      	b.n	8007512 <__swbuf_r+0x1a>
 8007572:	4b09      	ldr	r3, [pc, #36]	; (8007598 <__swbuf_r+0xa0>)
 8007574:	429c      	cmp	r4, r3
 8007576:	bf08      	it	eq
 8007578:	68ec      	ldreq	r4, [r5, #12]
 800757a:	e7ca      	b.n	8007512 <__swbuf_r+0x1a>
 800757c:	4621      	mov	r1, r4
 800757e:	4628      	mov	r0, r5
 8007580:	f000 f82c 	bl	80075dc <__swsetup_r>
 8007584:	2800      	cmp	r0, #0
 8007586:	d0cb      	beq.n	8007520 <__swbuf_r+0x28>
 8007588:	f04f 37ff 	mov.w	r7, #4294967295
 800758c:	e7ea      	b.n	8007564 <__swbuf_r+0x6c>
 800758e:	bf00      	nop
 8007590:	08007e54 	.word	0x08007e54
 8007594:	08007e74 	.word	0x08007e74
 8007598:	08007e34 	.word	0x08007e34

0800759c <__ascii_wctomb>:
 800759c:	b149      	cbz	r1, 80075b2 <__ascii_wctomb+0x16>
 800759e:	2aff      	cmp	r2, #255	; 0xff
 80075a0:	bf85      	ittet	hi
 80075a2:	238a      	movhi	r3, #138	; 0x8a
 80075a4:	6003      	strhi	r3, [r0, #0]
 80075a6:	700a      	strbls	r2, [r1, #0]
 80075a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80075ac:	bf98      	it	ls
 80075ae:	2001      	movls	r0, #1
 80075b0:	4770      	bx	lr
 80075b2:	4608      	mov	r0, r1
 80075b4:	4770      	bx	lr
	...

080075b8 <_write_r>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	4d07      	ldr	r5, [pc, #28]	; (80075d8 <_write_r+0x20>)
 80075bc:	4604      	mov	r4, r0
 80075be:	4608      	mov	r0, r1
 80075c0:	4611      	mov	r1, r2
 80075c2:	2200      	movs	r2, #0
 80075c4:	602a      	str	r2, [r5, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	f7fa fd7b 	bl	80020c2 <_write>
 80075cc:	1c43      	adds	r3, r0, #1
 80075ce:	d102      	bne.n	80075d6 <_write_r+0x1e>
 80075d0:	682b      	ldr	r3, [r5, #0]
 80075d2:	b103      	cbz	r3, 80075d6 <_write_r+0x1e>
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	bd38      	pop	{r3, r4, r5, pc}
 80075d8:	2000024c 	.word	0x2000024c

080075dc <__swsetup_r>:
 80075dc:	4b32      	ldr	r3, [pc, #200]	; (80076a8 <__swsetup_r+0xcc>)
 80075de:	b570      	push	{r4, r5, r6, lr}
 80075e0:	681d      	ldr	r5, [r3, #0]
 80075e2:	4606      	mov	r6, r0
 80075e4:	460c      	mov	r4, r1
 80075e6:	b125      	cbz	r5, 80075f2 <__swsetup_r+0x16>
 80075e8:	69ab      	ldr	r3, [r5, #24]
 80075ea:	b913      	cbnz	r3, 80075f2 <__swsetup_r+0x16>
 80075ec:	4628      	mov	r0, r5
 80075ee:	f7fe fa69 	bl	8005ac4 <__sinit>
 80075f2:	4b2e      	ldr	r3, [pc, #184]	; (80076ac <__swsetup_r+0xd0>)
 80075f4:	429c      	cmp	r4, r3
 80075f6:	d10f      	bne.n	8007618 <__swsetup_r+0x3c>
 80075f8:	686c      	ldr	r4, [r5, #4]
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007600:	0719      	lsls	r1, r3, #28
 8007602:	d42c      	bmi.n	800765e <__swsetup_r+0x82>
 8007604:	06dd      	lsls	r5, r3, #27
 8007606:	d411      	bmi.n	800762c <__swsetup_r+0x50>
 8007608:	2309      	movs	r3, #9
 800760a:	6033      	str	r3, [r6, #0]
 800760c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007610:	81a3      	strh	r3, [r4, #12]
 8007612:	f04f 30ff 	mov.w	r0, #4294967295
 8007616:	e03e      	b.n	8007696 <__swsetup_r+0xba>
 8007618:	4b25      	ldr	r3, [pc, #148]	; (80076b0 <__swsetup_r+0xd4>)
 800761a:	429c      	cmp	r4, r3
 800761c:	d101      	bne.n	8007622 <__swsetup_r+0x46>
 800761e:	68ac      	ldr	r4, [r5, #8]
 8007620:	e7eb      	b.n	80075fa <__swsetup_r+0x1e>
 8007622:	4b24      	ldr	r3, [pc, #144]	; (80076b4 <__swsetup_r+0xd8>)
 8007624:	429c      	cmp	r4, r3
 8007626:	bf08      	it	eq
 8007628:	68ec      	ldreq	r4, [r5, #12]
 800762a:	e7e6      	b.n	80075fa <__swsetup_r+0x1e>
 800762c:	0758      	lsls	r0, r3, #29
 800762e:	d512      	bpl.n	8007656 <__swsetup_r+0x7a>
 8007630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007632:	b141      	cbz	r1, 8007646 <__swsetup_r+0x6a>
 8007634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007638:	4299      	cmp	r1, r3
 800763a:	d002      	beq.n	8007642 <__swsetup_r+0x66>
 800763c:	4630      	mov	r0, r6
 800763e:	f7ff fb55 	bl	8006cec <_free_r>
 8007642:	2300      	movs	r3, #0
 8007644:	6363      	str	r3, [r4, #52]	; 0x34
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800764c:	81a3      	strh	r3, [r4, #12]
 800764e:	2300      	movs	r3, #0
 8007650:	6063      	str	r3, [r4, #4]
 8007652:	6923      	ldr	r3, [r4, #16]
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	f043 0308 	orr.w	r3, r3, #8
 800765c:	81a3      	strh	r3, [r4, #12]
 800765e:	6923      	ldr	r3, [r4, #16]
 8007660:	b94b      	cbnz	r3, 8007676 <__swsetup_r+0x9a>
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800766c:	d003      	beq.n	8007676 <__swsetup_r+0x9a>
 800766e:	4621      	mov	r1, r4
 8007670:	4630      	mov	r0, r6
 8007672:	f000 f95b 	bl	800792c <__smakebuf_r>
 8007676:	89a0      	ldrh	r0, [r4, #12]
 8007678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800767c:	f010 0301 	ands.w	r3, r0, #1
 8007680:	d00a      	beq.n	8007698 <__swsetup_r+0xbc>
 8007682:	2300      	movs	r3, #0
 8007684:	60a3      	str	r3, [r4, #8]
 8007686:	6963      	ldr	r3, [r4, #20]
 8007688:	425b      	negs	r3, r3
 800768a:	61a3      	str	r3, [r4, #24]
 800768c:	6923      	ldr	r3, [r4, #16]
 800768e:	b943      	cbnz	r3, 80076a2 <__swsetup_r+0xc6>
 8007690:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007694:	d1ba      	bne.n	800760c <__swsetup_r+0x30>
 8007696:	bd70      	pop	{r4, r5, r6, pc}
 8007698:	0781      	lsls	r1, r0, #30
 800769a:	bf58      	it	pl
 800769c:	6963      	ldrpl	r3, [r4, #20]
 800769e:	60a3      	str	r3, [r4, #8]
 80076a0:	e7f4      	b.n	800768c <__swsetup_r+0xb0>
 80076a2:	2000      	movs	r0, #0
 80076a4:	e7f7      	b.n	8007696 <__swsetup_r+0xba>
 80076a6:	bf00      	nop
 80076a8:	20000020 	.word	0x20000020
 80076ac:	08007e54 	.word	0x08007e54
 80076b0:	08007e74 	.word	0x08007e74
 80076b4:	08007e34 	.word	0x08007e34

080076b8 <__assert_func>:
 80076b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076ba:	4614      	mov	r4, r2
 80076bc:	461a      	mov	r2, r3
 80076be:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <__assert_func+0x2c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4605      	mov	r5, r0
 80076c4:	68d8      	ldr	r0, [r3, #12]
 80076c6:	b14c      	cbz	r4, 80076dc <__assert_func+0x24>
 80076c8:	4b07      	ldr	r3, [pc, #28]	; (80076e8 <__assert_func+0x30>)
 80076ca:	9100      	str	r1, [sp, #0]
 80076cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076d0:	4906      	ldr	r1, [pc, #24]	; (80076ec <__assert_func+0x34>)
 80076d2:	462b      	mov	r3, r5
 80076d4:	f000 f8e0 	bl	8007898 <fiprintf>
 80076d8:	f000 f9d0 	bl	8007a7c <abort>
 80076dc:	4b04      	ldr	r3, [pc, #16]	; (80076f0 <__assert_func+0x38>)
 80076de:	461c      	mov	r4, r3
 80076e0:	e7f3      	b.n	80076ca <__assert_func+0x12>
 80076e2:	bf00      	nop
 80076e4:	20000020 	.word	0x20000020
 80076e8:	0800807d 	.word	0x0800807d
 80076ec:	0800808a 	.word	0x0800808a
 80076f0:	080080b8 	.word	0x080080b8

080076f4 <_close_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	4d06      	ldr	r5, [pc, #24]	; (8007710 <_close_r+0x1c>)
 80076f8:	2300      	movs	r3, #0
 80076fa:	4604      	mov	r4, r0
 80076fc:	4608      	mov	r0, r1
 80076fe:	602b      	str	r3, [r5, #0]
 8007700:	f7fa fcfb 	bl	80020fa <_close>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	d102      	bne.n	800770e <_close_r+0x1a>
 8007708:	682b      	ldr	r3, [r5, #0]
 800770a:	b103      	cbz	r3, 800770e <_close_r+0x1a>
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	2000024c 	.word	0x2000024c

08007714 <__sflush_r>:
 8007714:	898a      	ldrh	r2, [r1, #12]
 8007716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771a:	4605      	mov	r5, r0
 800771c:	0710      	lsls	r0, r2, #28
 800771e:	460c      	mov	r4, r1
 8007720:	d458      	bmi.n	80077d4 <__sflush_r+0xc0>
 8007722:	684b      	ldr	r3, [r1, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	dc05      	bgt.n	8007734 <__sflush_r+0x20>
 8007728:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	dc02      	bgt.n	8007734 <__sflush_r+0x20>
 800772e:	2000      	movs	r0, #0
 8007730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007736:	2e00      	cmp	r6, #0
 8007738:	d0f9      	beq.n	800772e <__sflush_r+0x1a>
 800773a:	2300      	movs	r3, #0
 800773c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007740:	682f      	ldr	r7, [r5, #0]
 8007742:	602b      	str	r3, [r5, #0]
 8007744:	d032      	beq.n	80077ac <__sflush_r+0x98>
 8007746:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007748:	89a3      	ldrh	r3, [r4, #12]
 800774a:	075a      	lsls	r2, r3, #29
 800774c:	d505      	bpl.n	800775a <__sflush_r+0x46>
 800774e:	6863      	ldr	r3, [r4, #4]
 8007750:	1ac0      	subs	r0, r0, r3
 8007752:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007754:	b10b      	cbz	r3, 800775a <__sflush_r+0x46>
 8007756:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007758:	1ac0      	subs	r0, r0, r3
 800775a:	2300      	movs	r3, #0
 800775c:	4602      	mov	r2, r0
 800775e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007760:	6a21      	ldr	r1, [r4, #32]
 8007762:	4628      	mov	r0, r5
 8007764:	47b0      	blx	r6
 8007766:	1c43      	adds	r3, r0, #1
 8007768:	89a3      	ldrh	r3, [r4, #12]
 800776a:	d106      	bne.n	800777a <__sflush_r+0x66>
 800776c:	6829      	ldr	r1, [r5, #0]
 800776e:	291d      	cmp	r1, #29
 8007770:	d82c      	bhi.n	80077cc <__sflush_r+0xb8>
 8007772:	4a2a      	ldr	r2, [pc, #168]	; (800781c <__sflush_r+0x108>)
 8007774:	40ca      	lsrs	r2, r1
 8007776:	07d6      	lsls	r6, r2, #31
 8007778:	d528      	bpl.n	80077cc <__sflush_r+0xb8>
 800777a:	2200      	movs	r2, #0
 800777c:	6062      	str	r2, [r4, #4]
 800777e:	04d9      	lsls	r1, r3, #19
 8007780:	6922      	ldr	r2, [r4, #16]
 8007782:	6022      	str	r2, [r4, #0]
 8007784:	d504      	bpl.n	8007790 <__sflush_r+0x7c>
 8007786:	1c42      	adds	r2, r0, #1
 8007788:	d101      	bne.n	800778e <__sflush_r+0x7a>
 800778a:	682b      	ldr	r3, [r5, #0]
 800778c:	b903      	cbnz	r3, 8007790 <__sflush_r+0x7c>
 800778e:	6560      	str	r0, [r4, #84]	; 0x54
 8007790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007792:	602f      	str	r7, [r5, #0]
 8007794:	2900      	cmp	r1, #0
 8007796:	d0ca      	beq.n	800772e <__sflush_r+0x1a>
 8007798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800779c:	4299      	cmp	r1, r3
 800779e:	d002      	beq.n	80077a6 <__sflush_r+0x92>
 80077a0:	4628      	mov	r0, r5
 80077a2:	f7ff faa3 	bl	8006cec <_free_r>
 80077a6:	2000      	movs	r0, #0
 80077a8:	6360      	str	r0, [r4, #52]	; 0x34
 80077aa:	e7c1      	b.n	8007730 <__sflush_r+0x1c>
 80077ac:	6a21      	ldr	r1, [r4, #32]
 80077ae:	2301      	movs	r3, #1
 80077b0:	4628      	mov	r0, r5
 80077b2:	47b0      	blx	r6
 80077b4:	1c41      	adds	r1, r0, #1
 80077b6:	d1c7      	bne.n	8007748 <__sflush_r+0x34>
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d0c4      	beq.n	8007748 <__sflush_r+0x34>
 80077be:	2b1d      	cmp	r3, #29
 80077c0:	d001      	beq.n	80077c6 <__sflush_r+0xb2>
 80077c2:	2b16      	cmp	r3, #22
 80077c4:	d101      	bne.n	80077ca <__sflush_r+0xb6>
 80077c6:	602f      	str	r7, [r5, #0]
 80077c8:	e7b1      	b.n	800772e <__sflush_r+0x1a>
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077d0:	81a3      	strh	r3, [r4, #12]
 80077d2:	e7ad      	b.n	8007730 <__sflush_r+0x1c>
 80077d4:	690f      	ldr	r7, [r1, #16]
 80077d6:	2f00      	cmp	r7, #0
 80077d8:	d0a9      	beq.n	800772e <__sflush_r+0x1a>
 80077da:	0793      	lsls	r3, r2, #30
 80077dc:	680e      	ldr	r6, [r1, #0]
 80077de:	bf08      	it	eq
 80077e0:	694b      	ldreq	r3, [r1, #20]
 80077e2:	600f      	str	r7, [r1, #0]
 80077e4:	bf18      	it	ne
 80077e6:	2300      	movne	r3, #0
 80077e8:	eba6 0807 	sub.w	r8, r6, r7
 80077ec:	608b      	str	r3, [r1, #8]
 80077ee:	f1b8 0f00 	cmp.w	r8, #0
 80077f2:	dd9c      	ble.n	800772e <__sflush_r+0x1a>
 80077f4:	6a21      	ldr	r1, [r4, #32]
 80077f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077f8:	4643      	mov	r3, r8
 80077fa:	463a      	mov	r2, r7
 80077fc:	4628      	mov	r0, r5
 80077fe:	47b0      	blx	r6
 8007800:	2800      	cmp	r0, #0
 8007802:	dc06      	bgt.n	8007812 <__sflush_r+0xfe>
 8007804:	89a3      	ldrh	r3, [r4, #12]
 8007806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800780a:	81a3      	strh	r3, [r4, #12]
 800780c:	f04f 30ff 	mov.w	r0, #4294967295
 8007810:	e78e      	b.n	8007730 <__sflush_r+0x1c>
 8007812:	4407      	add	r7, r0
 8007814:	eba8 0800 	sub.w	r8, r8, r0
 8007818:	e7e9      	b.n	80077ee <__sflush_r+0xda>
 800781a:	bf00      	nop
 800781c:	20400001 	.word	0x20400001

08007820 <_fflush_r>:
 8007820:	b538      	push	{r3, r4, r5, lr}
 8007822:	690b      	ldr	r3, [r1, #16]
 8007824:	4605      	mov	r5, r0
 8007826:	460c      	mov	r4, r1
 8007828:	b913      	cbnz	r3, 8007830 <_fflush_r+0x10>
 800782a:	2500      	movs	r5, #0
 800782c:	4628      	mov	r0, r5
 800782e:	bd38      	pop	{r3, r4, r5, pc}
 8007830:	b118      	cbz	r0, 800783a <_fflush_r+0x1a>
 8007832:	6983      	ldr	r3, [r0, #24]
 8007834:	b90b      	cbnz	r3, 800783a <_fflush_r+0x1a>
 8007836:	f7fe f945 	bl	8005ac4 <__sinit>
 800783a:	4b14      	ldr	r3, [pc, #80]	; (800788c <_fflush_r+0x6c>)
 800783c:	429c      	cmp	r4, r3
 800783e:	d11b      	bne.n	8007878 <_fflush_r+0x58>
 8007840:	686c      	ldr	r4, [r5, #4]
 8007842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d0ef      	beq.n	800782a <_fflush_r+0xa>
 800784a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800784c:	07d0      	lsls	r0, r2, #31
 800784e:	d404      	bmi.n	800785a <_fflush_r+0x3a>
 8007850:	0599      	lsls	r1, r3, #22
 8007852:	d402      	bmi.n	800785a <_fflush_r+0x3a>
 8007854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007856:	f7fe fd46 	bl	80062e6 <__retarget_lock_acquire_recursive>
 800785a:	4628      	mov	r0, r5
 800785c:	4621      	mov	r1, r4
 800785e:	f7ff ff59 	bl	8007714 <__sflush_r>
 8007862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007864:	07da      	lsls	r2, r3, #31
 8007866:	4605      	mov	r5, r0
 8007868:	d4e0      	bmi.n	800782c <_fflush_r+0xc>
 800786a:	89a3      	ldrh	r3, [r4, #12]
 800786c:	059b      	lsls	r3, r3, #22
 800786e:	d4dd      	bmi.n	800782c <_fflush_r+0xc>
 8007870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007872:	f7fe fd39 	bl	80062e8 <__retarget_lock_release_recursive>
 8007876:	e7d9      	b.n	800782c <_fflush_r+0xc>
 8007878:	4b05      	ldr	r3, [pc, #20]	; (8007890 <_fflush_r+0x70>)
 800787a:	429c      	cmp	r4, r3
 800787c:	d101      	bne.n	8007882 <_fflush_r+0x62>
 800787e:	68ac      	ldr	r4, [r5, #8]
 8007880:	e7df      	b.n	8007842 <_fflush_r+0x22>
 8007882:	4b04      	ldr	r3, [pc, #16]	; (8007894 <_fflush_r+0x74>)
 8007884:	429c      	cmp	r4, r3
 8007886:	bf08      	it	eq
 8007888:	68ec      	ldreq	r4, [r5, #12]
 800788a:	e7da      	b.n	8007842 <_fflush_r+0x22>
 800788c:	08007e54 	.word	0x08007e54
 8007890:	08007e74 	.word	0x08007e74
 8007894:	08007e34 	.word	0x08007e34

08007898 <fiprintf>:
 8007898:	b40e      	push	{r1, r2, r3}
 800789a:	b503      	push	{r0, r1, lr}
 800789c:	4601      	mov	r1, r0
 800789e:	ab03      	add	r3, sp, #12
 80078a0:	4805      	ldr	r0, [pc, #20]	; (80078b8 <fiprintf+0x20>)
 80078a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80078a6:	6800      	ldr	r0, [r0, #0]
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	f7ff fc85 	bl	80071b8 <_vfiprintf_r>
 80078ae:	b002      	add	sp, #8
 80078b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078b4:	b003      	add	sp, #12
 80078b6:	4770      	bx	lr
 80078b8:	20000020 	.word	0x20000020

080078bc <_lseek_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	4d07      	ldr	r5, [pc, #28]	; (80078dc <_lseek_r+0x20>)
 80078c0:	4604      	mov	r4, r0
 80078c2:	4608      	mov	r0, r1
 80078c4:	4611      	mov	r1, r2
 80078c6:	2200      	movs	r2, #0
 80078c8:	602a      	str	r2, [r5, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	f7fa fc3c 	bl	8002148 <_lseek>
 80078d0:	1c43      	adds	r3, r0, #1
 80078d2:	d102      	bne.n	80078da <_lseek_r+0x1e>
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	b103      	cbz	r3, 80078da <_lseek_r+0x1e>
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	bd38      	pop	{r3, r4, r5, pc}
 80078dc:	2000024c 	.word	0x2000024c

080078e0 <__swhatbuf_r>:
 80078e0:	b570      	push	{r4, r5, r6, lr}
 80078e2:	460e      	mov	r6, r1
 80078e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078e8:	2900      	cmp	r1, #0
 80078ea:	b096      	sub	sp, #88	; 0x58
 80078ec:	4614      	mov	r4, r2
 80078ee:	461d      	mov	r5, r3
 80078f0:	da08      	bge.n	8007904 <__swhatbuf_r+0x24>
 80078f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	602a      	str	r2, [r5, #0]
 80078fa:	061a      	lsls	r2, r3, #24
 80078fc:	d410      	bmi.n	8007920 <__swhatbuf_r+0x40>
 80078fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007902:	e00e      	b.n	8007922 <__swhatbuf_r+0x42>
 8007904:	466a      	mov	r2, sp
 8007906:	f000 f8c1 	bl	8007a8c <_fstat_r>
 800790a:	2800      	cmp	r0, #0
 800790c:	dbf1      	blt.n	80078f2 <__swhatbuf_r+0x12>
 800790e:	9a01      	ldr	r2, [sp, #4]
 8007910:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007914:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007918:	425a      	negs	r2, r3
 800791a:	415a      	adcs	r2, r3
 800791c:	602a      	str	r2, [r5, #0]
 800791e:	e7ee      	b.n	80078fe <__swhatbuf_r+0x1e>
 8007920:	2340      	movs	r3, #64	; 0x40
 8007922:	2000      	movs	r0, #0
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	b016      	add	sp, #88	; 0x58
 8007928:	bd70      	pop	{r4, r5, r6, pc}
	...

0800792c <__smakebuf_r>:
 800792c:	898b      	ldrh	r3, [r1, #12]
 800792e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007930:	079d      	lsls	r5, r3, #30
 8007932:	4606      	mov	r6, r0
 8007934:	460c      	mov	r4, r1
 8007936:	d507      	bpl.n	8007948 <__smakebuf_r+0x1c>
 8007938:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	6123      	str	r3, [r4, #16]
 8007940:	2301      	movs	r3, #1
 8007942:	6163      	str	r3, [r4, #20]
 8007944:	b002      	add	sp, #8
 8007946:	bd70      	pop	{r4, r5, r6, pc}
 8007948:	ab01      	add	r3, sp, #4
 800794a:	466a      	mov	r2, sp
 800794c:	f7ff ffc8 	bl	80078e0 <__swhatbuf_r>
 8007950:	9900      	ldr	r1, [sp, #0]
 8007952:	4605      	mov	r5, r0
 8007954:	4630      	mov	r0, r6
 8007956:	f7ff fa35 	bl	8006dc4 <_malloc_r>
 800795a:	b948      	cbnz	r0, 8007970 <__smakebuf_r+0x44>
 800795c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007960:	059a      	lsls	r2, r3, #22
 8007962:	d4ef      	bmi.n	8007944 <__smakebuf_r+0x18>
 8007964:	f023 0303 	bic.w	r3, r3, #3
 8007968:	f043 0302 	orr.w	r3, r3, #2
 800796c:	81a3      	strh	r3, [r4, #12]
 800796e:	e7e3      	b.n	8007938 <__smakebuf_r+0xc>
 8007970:	4b0d      	ldr	r3, [pc, #52]	; (80079a8 <__smakebuf_r+0x7c>)
 8007972:	62b3      	str	r3, [r6, #40]	; 0x28
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	6020      	str	r0, [r4, #0]
 8007978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800797c:	81a3      	strh	r3, [r4, #12]
 800797e:	9b00      	ldr	r3, [sp, #0]
 8007980:	6163      	str	r3, [r4, #20]
 8007982:	9b01      	ldr	r3, [sp, #4]
 8007984:	6120      	str	r0, [r4, #16]
 8007986:	b15b      	cbz	r3, 80079a0 <__smakebuf_r+0x74>
 8007988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800798c:	4630      	mov	r0, r6
 800798e:	f000 f88f 	bl	8007ab0 <_isatty_r>
 8007992:	b128      	cbz	r0, 80079a0 <__smakebuf_r+0x74>
 8007994:	89a3      	ldrh	r3, [r4, #12]
 8007996:	f023 0303 	bic.w	r3, r3, #3
 800799a:	f043 0301 	orr.w	r3, r3, #1
 800799e:	81a3      	strh	r3, [r4, #12]
 80079a0:	89a0      	ldrh	r0, [r4, #12]
 80079a2:	4305      	orrs	r5, r0
 80079a4:	81a5      	strh	r5, [r4, #12]
 80079a6:	e7cd      	b.n	8007944 <__smakebuf_r+0x18>
 80079a8:	08005a5d 	.word	0x08005a5d

080079ac <memmove>:
 80079ac:	4288      	cmp	r0, r1
 80079ae:	b510      	push	{r4, lr}
 80079b0:	eb01 0402 	add.w	r4, r1, r2
 80079b4:	d902      	bls.n	80079bc <memmove+0x10>
 80079b6:	4284      	cmp	r4, r0
 80079b8:	4623      	mov	r3, r4
 80079ba:	d807      	bhi.n	80079cc <memmove+0x20>
 80079bc:	1e43      	subs	r3, r0, #1
 80079be:	42a1      	cmp	r1, r4
 80079c0:	d008      	beq.n	80079d4 <memmove+0x28>
 80079c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079ca:	e7f8      	b.n	80079be <memmove+0x12>
 80079cc:	4402      	add	r2, r0
 80079ce:	4601      	mov	r1, r0
 80079d0:	428a      	cmp	r2, r1
 80079d2:	d100      	bne.n	80079d6 <memmove+0x2a>
 80079d4:	bd10      	pop	{r4, pc}
 80079d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079de:	e7f7      	b.n	80079d0 <memmove+0x24>

080079e0 <__malloc_lock>:
 80079e0:	4801      	ldr	r0, [pc, #4]	; (80079e8 <__malloc_lock+0x8>)
 80079e2:	f7fe bc80 	b.w	80062e6 <__retarget_lock_acquire_recursive>
 80079e6:	bf00      	nop
 80079e8:	20000240 	.word	0x20000240

080079ec <__malloc_unlock>:
 80079ec:	4801      	ldr	r0, [pc, #4]	; (80079f4 <__malloc_unlock+0x8>)
 80079ee:	f7fe bc7b 	b.w	80062e8 <__retarget_lock_release_recursive>
 80079f2:	bf00      	nop
 80079f4:	20000240 	.word	0x20000240

080079f8 <_realloc_r>:
 80079f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fc:	4680      	mov	r8, r0
 80079fe:	4614      	mov	r4, r2
 8007a00:	460e      	mov	r6, r1
 8007a02:	b921      	cbnz	r1, 8007a0e <_realloc_r+0x16>
 8007a04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a08:	4611      	mov	r1, r2
 8007a0a:	f7ff b9db 	b.w	8006dc4 <_malloc_r>
 8007a0e:	b92a      	cbnz	r2, 8007a1c <_realloc_r+0x24>
 8007a10:	f7ff f96c 	bl	8006cec <_free_r>
 8007a14:	4625      	mov	r5, r4
 8007a16:	4628      	mov	r0, r5
 8007a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a1c:	f000 f858 	bl	8007ad0 <_malloc_usable_size_r>
 8007a20:	4284      	cmp	r4, r0
 8007a22:	4607      	mov	r7, r0
 8007a24:	d802      	bhi.n	8007a2c <_realloc_r+0x34>
 8007a26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a2a:	d812      	bhi.n	8007a52 <_realloc_r+0x5a>
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	4640      	mov	r0, r8
 8007a30:	f7ff f9c8 	bl	8006dc4 <_malloc_r>
 8007a34:	4605      	mov	r5, r0
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d0ed      	beq.n	8007a16 <_realloc_r+0x1e>
 8007a3a:	42bc      	cmp	r4, r7
 8007a3c:	4622      	mov	r2, r4
 8007a3e:	4631      	mov	r1, r6
 8007a40:	bf28      	it	cs
 8007a42:	463a      	movcs	r2, r7
 8007a44:	f7fe fc6c 	bl	8006320 <memcpy>
 8007a48:	4631      	mov	r1, r6
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	f7ff f94e 	bl	8006cec <_free_r>
 8007a50:	e7e1      	b.n	8007a16 <_realloc_r+0x1e>
 8007a52:	4635      	mov	r5, r6
 8007a54:	e7df      	b.n	8007a16 <_realloc_r+0x1e>
	...

08007a58 <_read_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	4d07      	ldr	r5, [pc, #28]	; (8007a78 <_read_r+0x20>)
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	4608      	mov	r0, r1
 8007a60:	4611      	mov	r1, r2
 8007a62:	2200      	movs	r2, #0
 8007a64:	602a      	str	r2, [r5, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	f7fa fb0e 	bl	8002088 <_read>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d102      	bne.n	8007a76 <_read_r+0x1e>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	b103      	cbz	r3, 8007a76 <_read_r+0x1e>
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	2000024c 	.word	0x2000024c

08007a7c <abort>:
 8007a7c:	b508      	push	{r3, lr}
 8007a7e:	2006      	movs	r0, #6
 8007a80:	f000 f856 	bl	8007b30 <raise>
 8007a84:	2001      	movs	r0, #1
 8007a86:	f7fa faf5 	bl	8002074 <_exit>
	...

08007a8c <_fstat_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	4d07      	ldr	r5, [pc, #28]	; (8007aac <_fstat_r+0x20>)
 8007a90:	2300      	movs	r3, #0
 8007a92:	4604      	mov	r4, r0
 8007a94:	4608      	mov	r0, r1
 8007a96:	4611      	mov	r1, r2
 8007a98:	602b      	str	r3, [r5, #0]
 8007a9a:	f7fa fb3a 	bl	8002112 <_fstat>
 8007a9e:	1c43      	adds	r3, r0, #1
 8007aa0:	d102      	bne.n	8007aa8 <_fstat_r+0x1c>
 8007aa2:	682b      	ldr	r3, [r5, #0]
 8007aa4:	b103      	cbz	r3, 8007aa8 <_fstat_r+0x1c>
 8007aa6:	6023      	str	r3, [r4, #0]
 8007aa8:	bd38      	pop	{r3, r4, r5, pc}
 8007aaa:	bf00      	nop
 8007aac:	2000024c 	.word	0x2000024c

08007ab0 <_isatty_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4d06      	ldr	r5, [pc, #24]	; (8007acc <_isatty_r+0x1c>)
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	4608      	mov	r0, r1
 8007aba:	602b      	str	r3, [r5, #0]
 8007abc:	f7fa fb39 	bl	8002132 <_isatty>
 8007ac0:	1c43      	adds	r3, r0, #1
 8007ac2:	d102      	bne.n	8007aca <_isatty_r+0x1a>
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	b103      	cbz	r3, 8007aca <_isatty_r+0x1a>
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
 8007acc:	2000024c 	.word	0x2000024c

08007ad0 <_malloc_usable_size_r>:
 8007ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ad4:	1f18      	subs	r0, r3, #4
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bfbc      	itt	lt
 8007ada:	580b      	ldrlt	r3, [r1, r0]
 8007adc:	18c0      	addlt	r0, r0, r3
 8007ade:	4770      	bx	lr

08007ae0 <_raise_r>:
 8007ae0:	291f      	cmp	r1, #31
 8007ae2:	b538      	push	{r3, r4, r5, lr}
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	460d      	mov	r5, r1
 8007ae8:	d904      	bls.n	8007af4 <_raise_r+0x14>
 8007aea:	2316      	movs	r3, #22
 8007aec:	6003      	str	r3, [r0, #0]
 8007aee:	f04f 30ff 	mov.w	r0, #4294967295
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007af6:	b112      	cbz	r2, 8007afe <_raise_r+0x1e>
 8007af8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007afc:	b94b      	cbnz	r3, 8007b12 <_raise_r+0x32>
 8007afe:	4620      	mov	r0, r4
 8007b00:	f000 f830 	bl	8007b64 <_getpid_r>
 8007b04:	462a      	mov	r2, r5
 8007b06:	4601      	mov	r1, r0
 8007b08:	4620      	mov	r0, r4
 8007b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b0e:	f000 b817 	b.w	8007b40 <_kill_r>
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d00a      	beq.n	8007b2c <_raise_r+0x4c>
 8007b16:	1c59      	adds	r1, r3, #1
 8007b18:	d103      	bne.n	8007b22 <_raise_r+0x42>
 8007b1a:	2316      	movs	r3, #22
 8007b1c:	6003      	str	r3, [r0, #0]
 8007b1e:	2001      	movs	r0, #1
 8007b20:	e7e7      	b.n	8007af2 <_raise_r+0x12>
 8007b22:	2400      	movs	r4, #0
 8007b24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b28:	4628      	mov	r0, r5
 8007b2a:	4798      	blx	r3
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	e7e0      	b.n	8007af2 <_raise_r+0x12>

08007b30 <raise>:
 8007b30:	4b02      	ldr	r3, [pc, #8]	; (8007b3c <raise+0xc>)
 8007b32:	4601      	mov	r1, r0
 8007b34:	6818      	ldr	r0, [r3, #0]
 8007b36:	f7ff bfd3 	b.w	8007ae0 <_raise_r>
 8007b3a:	bf00      	nop
 8007b3c:	20000020 	.word	0x20000020

08007b40 <_kill_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4d07      	ldr	r5, [pc, #28]	; (8007b60 <_kill_r+0x20>)
 8007b44:	2300      	movs	r3, #0
 8007b46:	4604      	mov	r4, r0
 8007b48:	4608      	mov	r0, r1
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	602b      	str	r3, [r5, #0]
 8007b4e:	f7fa fa81 	bl	8002054 <_kill>
 8007b52:	1c43      	adds	r3, r0, #1
 8007b54:	d102      	bne.n	8007b5c <_kill_r+0x1c>
 8007b56:	682b      	ldr	r3, [r5, #0]
 8007b58:	b103      	cbz	r3, 8007b5c <_kill_r+0x1c>
 8007b5a:	6023      	str	r3, [r4, #0]
 8007b5c:	bd38      	pop	{r3, r4, r5, pc}
 8007b5e:	bf00      	nop
 8007b60:	2000024c 	.word	0x2000024c

08007b64 <_getpid_r>:
 8007b64:	f7fa ba6e 	b.w	8002044 <_getpid>

08007b68 <_init>:
 8007b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6a:	bf00      	nop
 8007b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b6e:	bc08      	pop	{r3}
 8007b70:	469e      	mov	lr, r3
 8007b72:	4770      	bx	lr

08007b74 <_fini>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	bf00      	nop
 8007b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b7a:	bc08      	pop	{r3}
 8007b7c:	469e      	mov	lr, r3
 8007b7e:	4770      	bx	lr
